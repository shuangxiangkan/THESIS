 \chapter{绪论}
\label{chap:chap01}


\section{研究背景}
高性能计算(High Performance Computing)是计算机科学的一个分支，
它是继理论科学和实验科学之后的人类科学研究的第三大科学，
致力于开发高性能计算机和运行在高性能计算机上的应用软件\upcite{Zang2016HighPerformance}。
高性能计算利用大量处理单元的聚合计算能力在很短的时间周期内完成复杂的计算任务，
更直观地讲，它是指快速、量大并且性能高的一类计算，
典型的有向量计算、并行与分布式计算和网格计算等\upcite{Chen2015HighPerformance}。

高性能计算作为世界高技术领域的战略制高点，已经成为科技进步的重要标志之一，同时也是一个国家科技综合实力的集中体现\upcite{Chen2015HighPerformance}，是支撑国家实力持续发展的关键技术之一。
现在高性能计算已经渗透到传统应用和新兴应用的各个学科领域。
在传统应用领域中，
高性能计算已经被广泛应用在高能物理研究、核武器设计、航天航空飞行器设计、能源勘探、中长期天气预报、
卫星图像处理、互联网服务和工业仿真等领域，对国民经济发展和国防建设具有重要的价值。
在新兴应用领域中，高性能计算在生命科学、网络社交、人工智能、大数据处理和云计算等方面有广泛的应用。
微软公司的Dan Reed 认为，高性能计算和云计算是出生时被分开的双胞胎，
并且他认为高性能并行计算技术是隐藏在云计算背后的核心技术\upcite{Xu2015BigData}。
人工智能和机器学习的顶级学者Andrew Ng和分布式系统顶级专家Jeff Dean所共同执行的Google Brain项目，
用了包含$16000$个CPU核的高性能并行计算平台训练超过$10$亿个神经元的深度神经网络，
在语音识别和图像识别等领域取得了突破性的进展\upcite{Zang2016HighPerformance}。
目前， 在科研、国防、工业、金融、服务和生活等领域中，
高性能计算都发挥着重要的作用。
%
%\begin{figure}[!htbp]
%\centering
%\includegraphics[width=11cm]{backgroudOfHPC.eps}
%\smallcaption{2014年高性能应用领域分布}
%\label{backgroudOfHPC}
%\end{figure}


%\begin{figure}[!htbp]
%\centering
%\includegraphics[width=11cm]{1_1.eps}
%\smallcaption{定理\ref{ConnectivityLargerThan_1}的情形1.1}
%\label{hello}
%\end{figure}

%自第一台电子计算机ENIAC问世以来，
%以电子器件、系统结构和计算模式的重大变革为标志，
%高性能计算机发展已经历经三次大的发展阶段\upcite{Zang2016HighPerformance}。
根据Top 500历史数据进行预测，
高性能计算机将在2020年左右将进入E级时代\upcite{Zang2016HighPerformance}。
%美国政府在“Strategy for American Innovation”计划中，
%将E级计算列为21世纪美国最主要的技术挑战。
%中国也在“十三五”期间启动了E级计算机的研制计划。
在中国发布的《国家中长期科学和技术发展规划纲要(2006―2020年)》中，
提出了要全面提升我国的自主创新能力，
明确指出要加速发展高性能计算,
并启动了“十三五”期间E级计算机系统(计算峰值达到百亿亿次的高性能计算机)的研制计划，
在能耗、可靠性、应用效率等方面都将面临一系列挑战。

近年来，我国高性能计算机的发展备受世界瞩目，
其中代表性的国产高性能计算机有神威蓝光、天河一号、天河二号、联想6800 和曙光600(星云)等\upcite{Chen2015HighPerformance}。
其中，天河一号和曙光星云系统在2010年先后获得了世界高性能计算机Top500榜单的第一名和第二名。
自2013年起, 天河二号在世界超级计算机排行榜TOP500中连续七次占据第一，在国际中引起了高度的关注\upcite{liaoxiangke2016HPC}。
在2017年最新发布的第50届TOP500榜单中，
神威太湖之光和天河二号再次蝉联冠亚军，
它们的浮点运算速度分别达到每秒9.3亿亿次和每秒3.39亿亿次。

\subsection{并行计算}
在高性能计算的研究中，提升运算效率一直是其发展的首要目标。
%从20世纪40年代开始的现代计算机发展历程可以分为两个明显的发展时代: 串行计算时代和并行计算时代。
基于高性能计算机的速度峰值性能不等同于单个应用软件运行时的实际性能，
它们之间往往差距较大。
要发挥高性能计算机的高速硬件优势，
必须要有适用的算法和调优的应用程序来实现数百万核之间的并行运算。
因此，创建和应用并行计算成为解决单处理单元速度瓶颈的最好方法之一。
%大规模并行软件和高性能算 法的发展水平象征着各个国家高性能 计算的软实力。
%高性能计算系统利用大量处理单元的聚合计算能力来满足应用巨大的计算需求，其核心的技术高性能计算机和大规模并行应用程序可以实现众多计算节点的大规模集成和高效协同计算，进而以更快的速度共同完成一项大规模的计算任务。

并行计算(Parallel Computing)指的是同时使用多种计算资源共同解决计算问题的方法，
是提高计算机系统计算速度和处理能力的一种有效手段。
具体来讲，它的基本思想是将大规模的计算任务分解成若干个部分，
各部分均由不同的处理单元来进行计算，
然后通过多个处理单元之间的通信和协作来完成计算任务，
进而有效地提升整个系统的运算速度和运算能力\upcite{Chen2015HighPerformance}。
%通俗地讲，并行计算就是在并行计算机上所做的计算，它和常说的高性能计算、超级计算(Super Computing)是同义词，
%因为任何高性能计算和超级计算总离不开并行技术\upcite{chenguoliang2009HPC,chen2011bingxing}。
并行计算由以下几个部分构成：并行计算机(并行计算的硬件平台)、并行算法(并行计算的理论基础)、
并行程序设计(并行计算的软件支撑)和并行应用(并行计算的发展动力)\upcite{Zhang2006Parallel}。

并行计算机系统中的处理单元按照某种特定的方式进行连接，
处理单元之间的连接方式可视为一个网络，我们将该连接方式称为互连网络。
直观地讲，互连网络的拓扑结构在很大程度上影响着并行计算机系统的带宽、延迟、可靠性等通信性能，
进而直接影响其运算能力\upcite{Liu2015HPC}。
因此，互连网络拓扑结构的相关研究成为研究并行计算机系统的一个重要课题。


\subsection{互连网络}

根据互连网络的拓扑结构在程序运行过程中是否可变，
互连网络分为静态网络(Static Network)和动态网络(Dynamic Network)\upcite{Chen2015HighPerformance,Song2012Network}。
其中静态网络是指网络中顶点之间存在固定的物理连接，
且在程序的执行过程中顶点之间的连接方式不变。
常见的静态网络有网格(Mesh)\upcite{Shao2002An}、
环绕(Torus)\upcite{Latifi1997On}、
星图(Star)\upcite{Day1993Unidirectional}、
超立方体(Hypercube)\upcite{Harary1988A}、
交叉立方体(Crossed Cube)\upcite{Efe1992The,Wang2007On}、
莫比乌斯立方体(M\"{o}bius Cube)\upcite{Cull1995The,Fan2002Hamilton}
和广义超立方体(Generalized Hypercube)\upcite{Bhuyan2006Generalized,Lawson2001i}等。
另外，动态网络是指顶点之间没有固定的物理连接，
而是在连接路径的交叉点处用电子开关、路由器或仲裁器等提供动态连接。
典型的动态网络有多级互连网络(Multistage Interconnect Network)\upcite{Lai1990Network}、
交叉开关(Cross-Switching)\upcite{Fu1995Network}、总线(Bus)\upcite{Zhang2006RS485}等。

传统静态网络中的超立方体是很早就被提出并展开研究的一类网络。
本文主要研究静态网络中超立方体的一个主要的变型网络结构：
广义超立方体。
它是目前重要的、有吸引力的网络之一，
具有良好的正则性、低直径\upcite{S1998hierarchy}、对称性\upcite{S1998hierarchy}、
可嵌入性、
良好的通信性能\upcite{S1998hierarchy,P1996optimal,SG1999evaluation}
和可扩展性等优点\upcite{Duh1996combinatorial}。
目前，它不仅是某些大型多处理器并行计算机系统所采用的拓扑结构\upcite{SG1995scalable,SG1996low}，
而且还被应用在光纤通讯网络(Optical Fibers)\upcite{T1990fiber}的构建中。
同时，广义超立方体在数据中心网络的构建中也得到广泛的应用，如BCube\upcite{Guo2009BCube}、 FBFLY(Flattened Butterfly)\upcite{Abts2010Energy}
和HyperX\upcite{Ahn2009HyperX}。

%在众多的网格网络模型中，较为有用并且最为流行的是二维网格网络，被国内外许多多处理机系统的拓扑结构所采用。
%如 Intel Paragon、 Standford DASH、Touchstone DELTA、Symult 2010 和国内的曙光系列\upcite{wanggaocaimesh2003}。

\section{研究现状及研究意义}
%互连网络的拓扑结构常常模型化为一个无向图$G=(V(G),E(G))$。
%其中，图中的顶点集合$V(G)$可以表示互连网络中的处理器，
%图中的边集合E(G)可以表示互连网络中的链路。
%本文中，我们用图论知识中图的定义来抽象地表示一个互连网络的拓扑结构。

在实际应用中，一个大型的高性能互连网络具有大量强大计算能力的处理单元，
要求该系统在很短的时间周期内完成给定的计算任务。
实际应用中一般通过不断增加处理器数目来提升整个系统的计算能力(Capability)，即计算速度\upcite{Chen2015HighPerformance}。
随着网络中处理器数目逐渐增多，处理器发生故障的概率逐渐增加。
当网络中处理器发生故障时，
网络中某些特性能否继续保持取决于网络的容错性，
它是衡量互连网络优劣的一项关键指标。
近年来， 互连网络的容错问题一直是学者们研究的热点\upcite{hsien2009fault,lin2012embedding,k1997highly}。
其中，顶点连通度是衡量网络容错性的一个重要参数。
而且，在某些处理器发生故障后仍然保持连通的网络中，
无故障的处理器之间如何进行路由
是研究该网络的容错性需要考虑的一个重要问题，
该问题被称为容错路由问题\upcite{Liu2015HPC}。
接下来，我们分别介绍连通度和容错路由两个问题相关的研究现状。
%网络中的容错路由问题是研究网络性能的一大热点课题。

%在容错性中，比较重要的一个衡量标准是连通性。
%所谓连通性，是指在未发生故障的顶点之间，
%存在完整的通信链路，从而有效地保证互联网络的正常运行。

\subsection{连通度}

互连网络中的顶点连通度越大，表示该网络的容错性越好。
我们以$r$-维广义超立方体$G(m_{r},m_{r-1},\ldots,m_{1})$为例，
它的顶点连通度为$\sum_{i=1}^{r}(m_i - 1)$。
%则该广义超立方体的度为$\sum_{i=1}^{r}(m_i - 1)$。
也就是说，在$G(m_{r},m_{r-1},\ldots,m_{1})$中，
当总故障顶点数小于$\sum_{i=1}^{r} (m_i - 1)$时，该网络仍是连通的。
然而，仅仅用顶点连通度来衡量一个网络的容错性仍存在不足之处。
对于一些常见的网络结构，
它们的顶点连通度至多为该网络中所有顶点的邻接点个数的最小值。
我们可以计算得到当$G(m_{r},m_{r-1},\ldots,m_{1})$的总故障顶点数为$\sum_{i=1}^{r} (m_i - 1)$时，
某个顶点的所有邻接点同时故障的概率为
$P=\frac{\prod m_i \times \sum_{i=1}^{r}(m_i - 1)}{\binom{\prod m_i}{\sum_{i=1}^{r} (m_i - 1)}}
= \frac{1}{(\prod m_i -2)\times ... \times (\prod m_i - \sum_{i=1}^{r} (m_i - 1) - 2)}$。
%显然，随着网络规模的扩大，
%网络中顶点个数增多，
%每个顶点的邻接点个数也随之增多，
在这种情况下，某个顶点的所有邻接点同时故障的概率$P$是极小的，
特别是当$G(m_{r},m_{r-1},\ldots,m_{1})$的规模足够大时，
这种情况发生的概率趋近于0。
因此，传统的顶点连通度无法很好地衡量实际的互连网络容错性的优劣。
为了解决这个问题，Harary\upcite{Harary1983Conditional}提出了条件连通度的概念。
令图$G$是一个连通的无向图，$\rho$表示一个图的某种性质，
条件连通度指的是使得$G$变得不连通且剩余的连通分支仍然保留着性质$\rho$时，所需去掉的最少顶点数。
在此基础上，Esfahanian\upcite{Esfahanian2015Generalized}进一步引入了限制连通度的概念，
限制连通度要求当某些顶点发生故障时，每个顶点至少要有一个无故障的邻居顶点。
之后，Latifi等人\upcite{Latifi1994Conditional}在限制连通度的基础上，进一步提出了$g$-限制连通度，
即要求当发生顶点故障时，每个顶点至少有$g$个无故障邻居。

近年来，$g$-限制连通度已成为衡量网络容错性的重要标准之一，在超立方体及其部分变型立方体中，已取得了许多相关的研究成果。
%2010年，Zhou研究了$(n,k)$星图上的$1$-限制连通度和$2$-限制连通度\upcite{zhou2010nkstarRg}。
%2012年，Lin等人研究了$(n,k)$排列图上的$g$-限制连通度\upcite{lin2012arrangeRg}。
1998年，Wu和Guo研究了超立方体上的$g$-限制连通度\upcite{Wu1998Fault}；
2013年，Li和Xu研究了交换超立方体上的$g$-限制点连通度和$g$-限制边连通度\upcite{Li2013Generalized}；
2016年，Ye和Liang进一步研究了类超立方体上的$g$-限制连通度， 得到了交叉立方体、莫比乌斯立方体、
局部扭立方体(Local Twisted Cube)等超立方体的变型立方体的$g$-限制连通度\upcite{Liangcheng2016On}；
2017年，Hsieh等人研究了局部扭立方体上的$2$-限制连通度和$3$-限制连通度\upcite{Hsieh2017}。
%同时，在其他的网络中，限制连通度也得到广泛的关注和研究
%\upcite{lin2016extra,wang2015restricted,xu2005restricted,hsieh2016restricted,liuExistence2010,lin2015Restricted,fan2010one,efficientUni2011fan}。

另外，F\`{a}brega和Fiol在限制连通度的基础上定义了$g$-外连通度\upcite{Fabrega1996On}。
要求除去网络中的故障顶点之后，剩余的每个分支至少包含$g+1$个无故障顶点。
目前，$g$-外连通度在超立方体及其部分变型立方体中，已得到许多相关的研究成果。
2009年，Yang和Meng研究了超立方体上的$g$-外连通度\upcite{Yang2010Extraconnectivity}；
2013年，Chang和Hsieh将$g$-外连通度应用到类超立方体中，研究了它们的$2$-外连通度和$3$-外连通度\upcite{Chang2013}；
2013年，Li和Yang研究了超立方体上的$g$-外边连通度\upcite{Li2013Bounding}；
2014年，Yang和Lin进一步研究了类超立方体上的$g$-外连通度， 得到了包括交叉立方体、莫比乌斯立方体、
局部扭立方体等超立方体的变型立方体的$g$-外连通度\upcite{Yang2014Reliability}。

广义超立方体作为超立方体的一个重要变型， 具有更好的容错性和可扩展性，
但是关于限制连通度和外连通度的相关研究却仍有不足。
因此，我们有必要对这两个参数进行研究。
%2014年，Chang等人研究了折叠超立方体上的$3$-外连通度和$3$-外边连通度\upcite{chang2014extraedgeFQ}。
%2016年，Lin等人在Split-Star网络上研究了$1$-限制连通度和$2$-限制连通度，并分析了其$g$-外连通度\upcite{lin2016SplitStar}。
%
%为了解决这一问题，Harary \upcite{condiconnectivity1983}提出了条件连通度的概念。%参考文献 conditional connectivity
%令图$G$是一个连通的无向图，$\rho$表示一个图的某种性质，
%条件连通度表示使得图$G$变得不连通所需去掉的最少顶点数，并且剩余的连通分支仍然保留着性质$\rho$。
%
%在此基础上，Esfahanian \upcite{restrict1989}提出了限制(边)连通度的概念，它要求去掉的顶点(边)集合不能包含图中任一顶点的所有邻接点(关联边)。
%%%Generalized Measure of Fault Tolerance with Application to N-cube Networks
%换言之，它要求保证每个顶点至少存在一个无故障的邻接点。并且，作者证明$n$维超立方体的限制(边)连通度为$2n-2$。
%
%而后， Latifi \upcite{latifi1994}将限制(边)连通度进行了推广，提出了$g$-限制(边)连通度，该连通度要求每个顶点至少存在$g$个无故障的邻接点。并且，作者证明了$n$ 维超立方体的$g$-限制(边)连通度为$(n-g)2^{g}$，其中$g\leq n/2$。

%%Conditional connectivity measures for large multiprocessor systems
\subsection{容错路由}
%在一个存在故障顶点的网络结构中，如果任意的两个顶点之间存在无故障路径，
%那么如何求得任意两个无故障顶点间的一条尽可能短的无故障路径(即容错路由问题)是数据中心网络容错性研究中需要解决的重要问题。

% 如第一章所述，早期超立方体的容错性通常用连通度来衡量。
%$n$维超立方体$Q_{n}$的连通度为$n$，当$Q_{n}$中某个顶点的$n$个邻居同时发生故障时，将使$Q_{n}$ 变得不连通。
%用经典的广度优先算法(Breadth First Search，又称BFS)可以设计$Q_{n}$的容错单播路由算法，该算法虽然可以得到$Q_{n}$ 中两顶点之间的最短的无故障路径，但是该算法的执行效率不高。
%之后，学者们注意到当$n$足够大时，$Q_{n}$中某个顶点的$n$个邻居同时发生故障的概率是极低的，
%1989年，Esfahanian提出了基于限制故障集(Forbidden Faulty Set)的网络容错模型，它要求网络中某个顶点的所有邻接点(或关联边)不能同时故障\upcite{restrict1989}。
%在此基础上，Latifi等人在1994年提出了$k$-限制连通度($k$-safe)的网络容错模型\upcite{latifi1994}，即网络中每个顶点至少有$k$ 个无故障的邻接点。
%基于这两类容错模型，学者们提出了许多容错路由算法，
%例如1999年，Gu等人分别基于$1$-safe，$2$-safe和$k$-safe三种容错模型提出了单播路由算法\upcite{gu1999}。
%
%多年来，不断有新的容错模型概念被提出，并且基于这些容错模型设计路由算法。
%1997年和1998年，Wu分别基于安全级别(Safety Levels)模型和安全向量(Safety Vectors)模型设计了超立方体上的单播路由算法\upcite{safetylevel1997, safetyvector1998}；
%2000年，Gao等人基于最优通路矩阵(Optimal Path Matrices)实现了超立方体的容错路由算法\upcite{gao2000}；
%2002年，Tian基于扩展最优通路矩阵(Extended Optimal Path Matrices)对Gao的算法进行了改进\upcite{tian2002}；
%2004年，Li等人在概率故障模型下基于自适应二项树(Adaptive Binomial-Tree)结构设计了超立方体上的容错路由算法\upcite{Li2004}，我们用ABT来表示该算法；
%2005年，Wang等人基于“局部连通性”(Local Connectivity)的容错模型设计了超立方体上的高效容错路由算法\upcite{wang2005}；
%2014年，Duong等人基于近似定向可路由概率(Approximate Directed Routable Probabilities)设计了超立方体上的容错路由算法\upcite{routing2014}。

根据网络中故障信息的情况，容错路由算法可以分为三类：基于全局信息的算法、基于局部信息的算法以及介于两者之间的算法。
基于全局信息的算法，又称为非分布式(Non-distributed)算法或离线(Off-line)算法，
这类算法要求网络中每个顶点了解网络中所有的故障信息，
一般可以得到源顶点和目的顶点之间的最短通信路径，但需要使用大量的存储空间以及通信开销。
Gu和Peng人提出的算法是其典型代表\upcite{Gu1999Unicast}。
基于局部信息的算法，又称分布式(Distributed)算法，
这类算法要求每个顶点了解其邻接点的故障信息，
因此只需要较少的存储空间和通信开销，
相应的，它不能保证得到的通信路径是最优的。
Li等人提出的算法就属于这一类\upcite{Li2008An}。
还有一些算法介于两者之间，
即每个顶点只了解自己附近顶点的故障信息，
这类算法需要的存储空间和通信开销也介于上述两类算法之间。
其典型的算法是Wu提出的算法\upcite{Wu1997Reliable, Wu1998Adaptive}。

很早就有学者开始研究广义超立方体上的容错路由。
在1998年，董明生等人就研究了广义超立方体$G(m_{r},m_{r-1},\ldots,m_{1})$上的容错路由算法，
在该网络中，对于任意一个$i \in \langle r \rangle \setminus \{0\}$，都有$m_i = n$。
对$G(m_{r},m_{r-1},\ldots,m_{1})$中给定的任意两个顶点，用$h$表示这两个顶点的汉明距离。
董明生等人提出的算法在故障顶点的个数小于$mr-r$时，可以构造出连接这两个顶点的长度不大于$h+2$的无故障路径；
在故障顶点个数大于等于$mr-r$且小于$ m^2r - m^2 - mh + m $时，
可以构造出长度不大于$h+4m-2$的无故障路径\upcite{Dong1998Generalized}。
该算法在故障顶点较少时表现良好；当故障顶点较多时，获取的路径长度较长。
之后，在2006年，刘红美基于广义超立方体的局部连通性定义，
研究了故障顶点分布比较均匀且具有局部连通性的广义超立方体中的单播容错路由算法\upcite{Liu2006Generalized}。
继而，在2009年， 针对$r$-维BCube数据中心网络(该网络的逻辑结构即为广义超立方体)，
Guo等人提出的容错路由算法BuildPathSet\upcite{Guo2009BCube}在网络中的总故障顶点数少于该网络的连通度$\kappa(G)$时，
可在任意两个无故障顶点间建立$\kappa(G)$条无故障路径，且这些路径的长度最长为$h+2$，
该算法的时间复杂度为$O(\kappa(G)^2)$。

综上所述，目前尚缺乏对于广义超立方体在限制连通度与外连通度条件下的容错路由的研究成果。因此，我们将针对这个问题开展研究。

%在互连网络中，路由是指在处理器之间进行信息传递的过程。
%如果我们将信息分成多份，通过多条不相交路径进行传递，这样既可以增强路由的传输性能，也可以提高其可靠性\upcite{KDay1997,CNLai2015DPC}。
%不相交路径除了可以用来避免拥塞，加速传输速率，提供可选择的传播途径，还可以增强顶点故障的鲁棒性和负载均衡的能力
%\upcite{CLiu2007DPC,Y-KShih2011DPC,CNLai2012DPC,CNLai2012DPC1,CNLai2014DPC,RYWu2007DPC,YXiang2010DPC}。
%这些优点使得不相交路径问题在并行计算机系统中扮演着重要的角色。
%不相交路径问题分为三类\upcite{wangxi2015}：一对一不相交路径、一对多不相交路径和多对多不相交路径。
%顾名思义，一对一不相交路径是指两个不同顶点之间的不相交路径。
%一对多不相交路径则是指一个源顶点$s$和$k$个目的顶点$t_{1}, t_{2}, \dots, t_{k}$之间的不相交路径。
%多对多不相交路径是指$k$个源顶点$s_{1}, s_{2}, \dots, s_{k}$和$k$ 个目的顶点$t_{1}, t_{2}, \dots, t_{k}$之间的不相交路径。
%
%如果不相交路径能够覆盖互连网络中的所有顶点，上述的问题就演变为不相交路径覆盖问题。
%类似地，不相交路径覆盖问题同样可以分为三类\upcite{wangxi2015}：一对一不相交路径覆盖、一对多不相交路径覆盖和多对多不相交路径覆盖。
%不相交路径覆盖问题不仅对于代码优化\upcite{STAndrew1981DPC}和软件测试\upcite{CNSimeon1981DPC} 有着十分显著的作用，
%而且已经广泛地应用到了数据库设计\upcite{ADeutsch1999DPC}、无线传感器网络的拓扑控制\upcite{ZZhou2009DPC}和超大规模集成电路的设计\upcite{ABKahng2001DPC} 等领域。
%在互连网络方面，许多学者对不相交路径覆盖问题进行了深入的研究。
%例如，Chang等人\upcite{CHChang2004DPC}首先提出了在超立方体上的一对一不相交路径覆盖，并且证明了其条件容错一对一不相交路径覆盖的存在性。
%Lin等人\upcite{CKLin2005DPC}也证明了在饼图(Pancake Graph)和星图上的一对一不相交路径覆盖的存在性。
%Xiang等人\upcite{YXiang2010DPC}则证明了在($n$, $k$)-星图上的一对多不相交路径覆盖的存在性，并且给出了构造的算法，分析了其时间复杂度。
%除此之外，还有许多学者研究其他的互连网络的不相交路径覆盖性质，
%例如，环绕\upcite{JLi2015DPC}、$k$元$n$立方体\upcite{Y-KShih2011DPC}、折叠超立方体\upcite{MMa2010DPC}、增强超立方体\upcite{TYHo2006DPC}、线图
%\upcite{PYHuang2011DPC}等等
%\upcite{JHPark2013DPC,JHPark2006DPC,SYKim2011DPC,PLLai2006DPC,JHPark2004DPC}。
%在互连网络中，不相交路径覆盖不仅可以提高广播通讯的效率，而且还在提高数据收集和分发效率方面起着重要的作用。
%例如在网格网络中利用不相交路径覆盖进行广播通讯，我们不仅可以加快通讯的速度而且仅需要对每台处理器访问一次。
%
%
%随着互连网络的不断扩大，网络中的处理器数量也越来越多。
%当一个大型多处理器并行计算机系统投入使用之后，发生故障是不可避免的。
%因此，近年来互连网络的容错性研究已经成为了一个重要的研究课题。
%顶点连通度是图论中衡量容错性的重要参数。
%互连网络中的顶点连通度越大，表示网络的容错性越好。
%
%
%实际的互连网络中，某个处理器的邻居全部发生故障的概率是很低的。
%所以说，传统的顶点连通度并不能精确地衡量互连网络的容错性。
%为了解决这个问题，Harary\upcite{condiconnectivity1983}提出了条件连通度的概念。
%令图$G$是一个连通的无向图，$\rho$表示一个图的某种性质，
%条件连通度表示使得图$G$变得不连通所需去掉的最少顶点数，并且剩余的连通分支仍然保留着性质$\rho$。
%在此基础上，Esfahanian\upcite{restrict1989}进一步引入了限制连通度的概念，此连通度要求每个顶点至少要有一个无故障的邻居顶点。
%之后，Latifi等人\upcite{latifi1994}在限制连通度的基础上，提出了$g$-限制连通度，即要求每个顶点至少存在$g$个无故障的邻居顶点。
%另外，还有一种重要的条件连通度――$g$-外连通度，它是由F\`{a}brega 和Fiol在限制连通度的基础上定义的\upcite{extra1996}。
%$g$-外连通度要求删除图$G$的故障顶点之后，剩余的每个连通分支至少存在$g+1$个顶点。
%
%但是，这些连通度都是只专注于单独顶点发生故障时候所造成的影响。
%即假设某个顶点是否发生故障和其邻居顶点的状态是相互独立的。
%但是在现实生活中，相邻的顶点是相互影响的。
%如果一个顶点发生故障，那么与其邻居顶点更容易发生故障。
%
%最近，Lin等人\upcite{cklin2016connectivity}提出了两个新的连通度：结构连通度和子结构连通度。
%令图$G$是一个连通的无向图，$H$是$G$中某个连通子图。
%$G$的$H$-结构连通度，$\kappa(G;H)$，是$G$中的最小一组子图集合$F = \{H_{1}^{'}, H_{2}^{'}, \dots, H_{m}^{'}\}$的元素个数，
%其中$F$中的每一个元素$H_{i}^{'}$都和$H$同构且去掉集合$F$后使得$G$ 不连通。
%$G$的$H$-子结构连通度，$\kappa^{s}(G;H)$，是$G$中的最小一组子图集合$F = \{J_{1}, J_{2}, \dots, J_{m}\}$的元素个数，
%其中$F$中的每一个元素$J_{i}$都是$H$的连通子图且去掉集合$F$后使得$G$不连通。
%
%
%%哈密顿路径问题是图论的重要问题，也是衡量网络通信性能的重要指标。
%%哈密顿性质在信息通讯中具有重要作用，例如哈密顿路可用于一类通讯系统中，用来减少拥塞和死锁\upcite{XLinhamilton1994,maliang2016}。
%%%%此外，存在哈密顿路或哈密顿圈的网络进行线性或循环通信时有很高的效率\upcite{SRazavi2010}。
%%此外，哈密顿性质还可应用在互连网络的故障诊断中，通过减少故障诊断的次数来提高故障诊断的效率\upcite{SFujita2004}。
%%由于各种网络的结构不同，并非任意的一个网络都存在哈密顿路径。
%%因此，我们退而求其次，转而寻找网络中的最长路径。
%%
%%Bornd\"{o}rfer\upcite{RBM2008longestpath}等人指出交通网络图的线路价格问题是一个最长路径问题。
%%通过在城市交通图中找最大权重的简单路径，将其应用于路径规划。在城市交通、电网等环境下，顶点很容易发生故障。
%%因此，研究容错最长路径问题具有很重要的现实意义。
%%同样地，最长路径问题在生物信息学等领域中也有着重要的应用。
%%将蛋白质作为顶点, 蛋白质与蛋白质之间的相互作用作为边，相互作用发生的概率作为边的权值，从而构成生物蛋白质作用网络。
%%Scott等人\upcite{JScott2005longestpath}指出，蛋白质网络中权值大的简单路径更有可能是信号的传输路径。
%%因此，找出网络中最大权值的最长路径对于研究生物蛋白质间的相互作用具有重要的意义。
%%
%%2002年，Bulterman等人\upcite{RWBulterman2002longestpath}证明了在树上求最长路径算法的正确性。
%%2011年，Ioannidou等人\upcite{KIoannidou2011longestpath}证明了在区间图(Interval Graph)上最长路径问题可以在多项式时间内解决。
%%2012年，Keshavarz-Kohjerdi等人\upcite{FKeshavarz-Kohjerdi2012longestpath} 给出了网格网络上最长路径问题的线性时间算法。
%%2015年，Chang等人\upcite{TWChang2015longestpath}给出了网格网络在存在故障顶点的情况下的最长无故障路径算法。
%%
%
%\iffalse
%为了解决这一问题，Harary \upcite{condiconnectivity1983}提出了条件连通度的概念。%参考文献 conditional connectivity
%令图$G$是一个连通的无向图，$\rho$表示一个图的某种性质，
%条件连通度表示使得图$G$变得不连通所需去掉的最少顶点数，并且剩余的连通分支仍然保留着性质$\rho$。
%
%在此基础上，Esfahanian \upcite{restrict1989}提出了限制(边)连通度的概念，它要求去掉的顶点(边)集合不能包含图中任一顶点的所有邻接点(关联边)。
%%%Generalized Measure of Fault Tolerance with Application to N-cube Networks
%换言之，它要求保证每个顶点至少存在一个无故障的邻接点。并且，作者证明$n$维超立方体的限制(边)连通度为$2n-2$。
%
%而后， Latifi \upcite{latifi1994}将限制(边)连通度进行了推广，提出了$g$-限制(边)连通度，该连通度要求每个顶点至少存在$g$个无故障的邻接点。并且，作者证明了$n$ 维超立方体的$g$- 限制(边)连通度为$(n-g)2^{g}$，其中$g\leq n/2$。
%
%%%Conditional connectivity measures for large multiprocessor systems
%近年来，$g$-限制(边)连通度作为衡量网络容错性的重要性质，被应用到其他网络拓扑中，得出了许多成果。
%2010年，Zhou研究了$(n,k)$星图上的$1$-限制连通度和$2$-限制连通度\upcite{zhou2010nkstarRg}。
%2012年，Lin等人研究了$(n,k)$排列图上的$g$-限制连通度\upcite{lin2012arrangeRg}。
%2013年，Li等人研究了交换超立方体上的$g$-限制连通度和$g$-限制边连通度\upcite{li2013exchangedRg}。
%2016年，Hsieh等人研究了局部扭立方体上的$2$-限制连通度和$3$-限制连通度\upcite{heish2016LTQRg}。
%
%除此之外，还有一种重要的条件连通度――$g$-外(边)连通度，
%它是F\`{a}brega和Fiol
%在限制(边)连通度的基础上定义的\upcite{extra1996}。%% On the extraconnectivity of graphs
%$g$-外(边)连通度要求删除图$G$的故障顶点(边)之后，剩余的每个连通分支至少存在$g+1$个顶点。
%
%$g$-外(边)连通度近些年也得到学者们的广泛关注，被推广到众多网络拓扑中，与$g$- 限制(边)连通度一起，成为衡量网络容错性的重要参数。
%2009年，Yang研究了超立方体上的$g$-外连通度\upcite{yang2009extra}。
%2013年，Chang等人将$g$-外连通度应用到类超立方体中，研究了它们的$2$-外连通度和$3$-外连通度\upcite{chang2013extraHL}；
%Li等人研究了超立方体上的$g$-外边连通度\upcite{li2013extraedge}。
%2014年，Chang等人研究了折叠超立方体上的$3$-外连通度和$3$-外边连通度\upcite{chang2014extraedgeFQ}。
%2016年，Lin等人在Split-Star网络上研究了$1$-限制连通度和$2$-限制连通度，并分析了其$g$-外连通度\upcite{lin2016SplitStar}。
%
%


%另一类衡量网络通信性能的重要参数是网络的哈密顿性质。
%包含图$G$中所有顶点的一条$(u,v)$-路，称为$G$的一条$(u,v)$-哈密顿路，
%而包含$G$中所有顶点的圈称为$G$的哈密顿圈。
%哈密顿性质在信息通讯中具有重要作用，例如哈密顿路可用于一类通讯系统中，用来减少拥塞和死锁\upcite{yiyihamilton1991}。
%因此，网络中是否存在哈密顿路或哈密顿圈也是衡量该网络通信性能的一个重要标准。
%
%当出现故障顶点或故障边时，网络的哈密顿性质是否改变也是一项重要的研究课题。
%如果删除图$G$的任意至多$f$条边，所得到的图仍然存在哈密顿圈，我们称图$G$是$f$-边容错哈密顿的。
%
%以$n$维超立方体$Q_{n}$为例，$Q_{n}$是$(n-2)$-边容错哈密顿的。
%2004年，Tsai将条件故障的概念引入哈密顿性质，研究了条件容错哈密顿性质\upcite{tsai2004}。
%假设$Q_{n}$中的每个顶点至少与两条无故障的边相关联，那么在至多存在$2n-5$条故障边时，
%$Q_{n}$中任意两个不同部($Q_{n}$是二部图)的顶点之间存在一条哈密顿路，$Q_{n}$ 也仍然包含长度从$4$到$2^{n}$的所有偶圈，其中包括哈密顿圈。
%可以看出，在条件故障的情况下，$Q_{n}$允许存在的故障边几乎比在传统的故障情况下提高了一倍。
%
%随后，许多学者将条件故障引入其他网络拓扑结构中，取得了一系列研究成果。
%2007年，Hung等人将条件故障引入交叉立方体，得出了交叉立方体的条件容错哈密顿性\upcite{hung2007hamilton}。
%2008年，Fu研究了扭立方体的条件容错哈密顿性\upcite{fu2008hamilton}。
%2010年，Hsieh等人研究了局部扭立方体的条件容错哈密顿性\upcite{hsieh2010hamilton}。
%2011年，Chen等人研究了双重立方体的条件容错哈密顿性\upcite{chen2011hamilton}。%dual cube
%\fi

\section{研究内容}
本文的研究内容分为以下两个部分：

一、广义超立方体的限制连通度问题

在第三章中，基于$1$-限制连通度的定义，
我们求出了广义超立方体的$1$-限制连通度，并给出其相关证明。
同时， 我们给出当广义超立方体的总故障顶点数小于其$1$-限制连通度时，
在每个无故障顶点都至少有一个无故障邻居条件下的容错路由算法。
本文取得如下研究成果：

1. $r$-维广义超立方体$G(m_{r},m_{r-1},\ldots,m_{1})$的$1$-限制连通度是$2\kappa(G(m_{r},m_{r-1},\ldots,m_{1}))-n$，
其中$n=\max\{m_{1},m_{2},\ldots,m_{r}\}$。

2. 给出一个满足$1$-限制连通度条件的容错路由算法，该算法的时间复杂度为$O(\kappa(G(m_{r},m_{r-1},\ldots,m_{1}))^{3})$。

二、广义超立方体的外连通度问题

在第四章中，基于外连通度的定义，
我们求出了广义超立方体的$1$-外连通度和$2$-外连通度，并给出其相关证明。
同时， 我们给出当广义超立方体的总故障顶点数小于其$2$-外连通度时，
在除去故障顶点集合后的每个分支中至少包含$3$个无故障顶点条件下的容错路由算法。
本文取得如下研究成果：

1. $r$-维广义超立方体$G(m_{r},m_{r-1},\ldots,m_{1})$的$1$-外连通度是$2\kappa(G(m_{r},m_{r-1},\ldots,m_{1}))-n$，
其中$n=\max\{m_{1},m_{2},\ldots,m_{r}\}$。

2. 对于广义超立方体$G(m_{r},m_{r-1},\ldots,m_{1})$，
其中$r \geq 5$且对于任意的$i \in \langle r \rangle \setminus \{0\}$ 都有$m_{i}\geq 3$
且$m_{i}\geq m_{i-1}$。
若$m_{r}>m_{r-1}$，
则$G(m_{r},m_{r-1},\ldots,m_{1})$的$2$-外连通度为$3\kappa(G(m_{r},m_{r-1},$\\
$\ldots,m_{1})) - 2m_{r}$；
若$m_{r}=m_{r-1}$，
则$G(m_{r},m_{r-1},\ldots,m_{1})$的$2$-外连通度为$3\kappa(G(m_{r},m_{r-1}$ $,\ldots,m_{1})) $ $- 2m_{r}-1$。

3. 给出一个满足$2$-外连通度条件的容错路由算法，该算法的时间复杂度为$O(N\times\kappa(G(m_{r},m_{r-1},\ldots,m_{1})))$，
其中$N$为$G(m_{r},m_{r-1},\ldots,m_{1})$中的总顶点个数。

\section{文章组织结构}

全文的组织结构如下：

第一章介绍了本文的研究背景、研究意义、研究内容以及文章的组织结构。

第二章首先介绍了与本文相关的图论中的基本定义和符号表示，
然后介绍了广义超立方体的定义以及一些主要的性质。

第三章给出广义超体方体的$1$-限制连通度，
并且给出广义超立方体中满足$1$-限制连通度条件下的容错路由算法。

第四章给出广义超体方体的$1$-外连通度和$2$-外连通度，
并且给出广义超立方体上中满足$2$-外连通度条件下的容错路由算法。

第五章对本论文所做的工作进行了总结，并对未来的研究工作进行了展望。
%一、不相交路径覆盖问题。
%
%如图\ref{fig:DPC_example}所示，令图$H$是由$V(H) = \{ a, b, c, d, e \}$和$E(H) = \{ (a, b), (a, c), (a, d), (a, e), \\(b, c), (b, d), (c, d), (c, e), (d, e) \}$ 组成的。
%根据表\ref{k*-container_of_H1}所示，我们可得$H$的生成连通度是3，即$H$中的任意两个不同顶点之间都存在3条不相交路径且它们覆盖$H$ 中的所有顶点。
%但是如表\ref{k*-container_of_H2}所示，$\{ a, c, d \}$中的任意两个不同顶点之间都存在4条不相交路径且它们覆盖$H$中的所有顶点。
%可以看出传统的生成连通度并不能很好的描述图$H$的性质，因此我们在传统生成连通度和生成交织度的基础上，提出了增强生成连通度和增强生成交织度的定义。
%在第三章中，我们求出了二维网格网络的增强生成交织度，并取得如下研究成果：
%
%1. 假设$u$和$v$是$M_{m,n}$中的任意两个不同顶点，如果$\{u, v\} \subseteq A_{m,n}$，那么$u$ 和$v$之间存在一个$1^{*}$-容器，其中$m$和$n$是奇数且$\min \{m, n\} \geq 3$；
%
%2. 假设$u$和$v$是$M_{m,n}$中的任意两个不同顶点，如果$\{u, v\} \subseteq B_{m,n}$，那么$u$ 和$v$之间存在一个$3^{*}$-容器，其中$m$和$n$是奇数且$\min \{m, n\} \geq 3$；
%
%3. $s\kappa^{L}(M_{m,n})=3$，其中$m$是偶数且$\min \{m, n\} \geq 4$；
%
%4. 假设$u$和$v$是$M_{m,n}$中任意两个不同部的顶点，如果$u \notin \{ (1,1), (1,n-2), (m-2,1), (m-2,n-2)\}$且$v \notin\{ (1,1), (1,n-2), (m-2,1), (m-2,n-2)\}$，那么$u$和$v$之间存在一个$4^{*}$- 容器，其中$m$是偶数且$\min \{m, n\} \geq 6$。
%
%\begin{figure}[!htbp]
%\centering
%\includegraphics[width=40mm]{DPC_example.eps}
%\smallcaption{简单图$H$}
%\label{fig:DPC_example}
%\vspace{-10pt}
%\end{figure}
%
%
%如前文所述，利用不相交路径性质，我们可以将信息分成多份，通过多条不相交路径进行传递，这样既可以增强路由的传输性能，也可以提高其可靠性。
%通过多条不相交路径传递信息时，其中最长路径的长度如果能够尽可能的短，那么信息的传递速度就较快。
%在第四章中，我们讨论二维环绕网络中任意两个不同部的顶点间$4^{*}$- 容器中最长路径长度上限，即二维环绕网络的宽生成直径的上限，结论如下：
%
%$D^{s_{L}}_{\kappa(T_{4m,12t})}(T_{4m,12t}) \leq 16mt+1$，其中$m \geq 2$且$t \geq 1$。
%
%\begin{table}[!htb]
%\centering
%\smallcaption{图$H$中的$1^*$-容器，$2^*$-容器和$3^*$-容器} \label{k*-container_of_H1}.
%{\small
%    \begin{tabular}{|l|l|l|l|}
%    \hline
%     $x$ to $y$ & $1^*$-容器 & $2^*$-容器 & $3^*$-容器 \\
%     \hline
%     a $\rightarrow$ b & $\{ \langle a, e, d, c, b \rangle \}$ & $\{ \langle a, b \rangle, \langle a, e, d, c, b \rangle \}$ & $\{ \langle a, b \rangle, \langle a, c, b \rangle, \langle a, e, d, b \rangle \}$ \\
%     \hline
%     a $\rightarrow$ c & $\{ \langle a, b, d, e, c \rangle \}$ & $\{ \langle a, c \rangle, \langle a, b, d, e, c \rangle \}$ & $\{ \langle a, c \rangle, \langle a, b, c \rangle, \langle a, e, d, c \rangle \}$ \\
%     \hline
%     a $\rightarrow$ d & $\{ \langle a, b, c, e, d \rangle \}$ & $\{ \langle a, d \rangle, \langle a, b, c, e, d \rangle \}$ & $\{ \langle a, d \rangle, \langle a, e, d \rangle, \langle a, b, c, d \rangle \}$ \\
%     \hline
%     a $\rightarrow$ e & $\{ \langle a, b, c, d, e \rangle \}$ & $\{ \langle a, e \rangle, \langle a, b, c, d, e \rangle \}$ & $\{ \langle a, e \rangle, \langle a, d, e \rangle, \langle a, b, c, e \rangle \}$ \\
%     \hline
%     b $\rightarrow$ c & $\{ \langle b, a, e, d, c \rangle \}$ & $\{ \langle b, c \rangle, \langle b, a, e, d, c \rangle \}$ & $\{ \langle b, c \rangle, \langle b, d, c \rangle, \langle b, a, e, c \rangle \}$ \\
%     \hline
%     b $\rightarrow$ d & $\{ \langle b, a, e, c, d \rangle \}$ & $\{ \langle b, d \rangle, \langle b, a, e, c, d \rangle \}$ & $\{ \langle b, d \rangle, \langle b, c, d \rangle, \langle b, a, e, d \rangle \}$ \\
%     \hline
%     b $\rightarrow$ e & $\{ \langle b, a, c, d, e \rangle \}$ & $\{ \langle b, a, e \rangle, \langle b, c, d, e \rangle \}$ & $\{ \langle b, a, e \rangle, \langle b, c, e \rangle, \langle b, d, e \rangle \}$ \\
%     \hline
%     c $\rightarrow$ d & $\{ \langle c, e, a, b, d \rangle \}$ & $\{ \langle c, e, d \rangle, \langle c, a, b, d \rangle \}$ & $\{ \langle c, a, d \rangle, \langle c, b, d \rangle, \langle c, e, d \rangle \}$ \\
%     \hline
%     c $\rightarrow$ e & $\{ \langle c, a, b, d, e \rangle \}$ & $\{ \langle c, e \rangle, \langle c, a, b, d, e \rangle \}$ & $\{ \langle c, e \rangle, \langle c, a, e \rangle, \langle c, b, d, e \rangle \}$ \\
%     \hline
%     d $\rightarrow$ e & $\{ \langle d, b, a, c, e \rangle \}$ & $\{ \langle d, e \rangle, \langle d, b, a, c, e \rangle \}$ & $\{ \langle d, e \rangle, \langle d, c, e \rangle, \langle d, b, a, e \rangle \}$ \\
%     \hline
%    \end{tabular}
%}
%\end{table}
%
%\begin{table}[!htb]
%\centering
%\smallcaption{图$H$中的$4^*$-容器} \label{k*-container_of_H2}.
%{\small
%     \begin{tabular}{|l|l|}
%    \hline
%     $x$ to $y$ & $4^*$-容器\\
%     \hline
%     a $\rightarrow$ b & none \\
%     \hline
%     a $\rightarrow$ c & $\{ \langle a, c \rangle, \langle a, b, c \rangle, \langle a, d, c \rangle, \langle a, e, c \rangle \}$ \\
%     \hline
%     a $\rightarrow$ d & $\{ \langle a, d \rangle, \langle a, b, d \rangle, \langle a, c, d \rangle, \langle a, e, d \rangle \}$ \\
%     \hline
%     a $\rightarrow$ e & none \\
%     \hline
%     b $\rightarrow$ c & none \\
%     \hline
%     b $\rightarrow$ d & none \\
%     \hline
%     b $\rightarrow$ e & none \\
%     \hline
%     c $\rightarrow$ d & $\{ \langle c, d \rangle, \langle c, a, d \rangle, \langle c, b, d \rangle, \langle c, e, d \rangle \}$ \\
%     \hline
%     c $\rightarrow$ e & none \\
%     \hline
%     d $\rightarrow$ e & none \\
%     \hline
%    \end{tabular}
%}
%\end{table}
%
%二、容错最长路径问题。
%
%在互连网络中，顶点发生故障是在所难免的，所以容错性是衡量网络性能的一个重要参数。
%受到Lin等人\upcite{cklin2016connectivity}提出的两个新的连通度：结构连通度和子结构连通度的启发，我们讨论互连网络中顶点出现大面积故障或某个顶点及其邻
%居顶点发生故障的情况下，任意两个无故障顶点之间的最长无故障路径。
%主要结论如下：
%
%1. 若在$T_{m,n}$中出现一个故障网格$M_{s,t}$，满足$s \leq m-4$且$t \leq n-4$，则对于$T_{m,n}$中的任意两个无故障顶点$u$和$v$，$u$和$v$之间存在一条长度大于等于$mn-st-3$的最长无故障路径，其中$m$ 和$n$均是偶数且$\min \{ m, n\} \geq 6$。
%
%2. 当在$T_{m,n}$中某个顶点及其邻居顶点出现故障时，对于$T_{m,n}$ 中的任意两个无故障顶点$u$ 和$v$，$u$和$v$之间存在一条长度大于等于$mn-10$的最长无故障路径，其中$m$和$n$均是偶数且$\min \{m, n\} \geq 8$。
%
%3. 当在网格网络$M_{m,n}$中出现一个故障网格$M_{s,t}$时，如果满足$ 4 \leq s \leq m-8$，$4 \leq t \leq n-8$和$V(M_{s,t}) \cap \{V(Mesh(0:3,0:n-1))\cup V(Mesh(m-4:m-1,0:n-1))\cup V(Mesh(0:m-1,0:3))\cup V(Mesh(0:m-1,n-4:n-1))\} = \varnothing $，那么对于$M_{m,n}$中的任意两个无故障顶点$u$和$v$，$u$和$v$之间存在一条长度大于等于$mn-st-2$的最长无故障路径，其中$m$，$n$，$s$和$t$ 均是偶数且$\min \{m, n\} \geq 12$。
%
%4. 基于大面积顶点发生故障和某个顶点及其邻居顶点发生故障两种情形给出了环绕网络中的容错最长无故障路径路由算法。
%结果表明，在耗时以及路径长度上都有很好的表现。
%
%
%\iffalse
%如前文所述，$n$维超立方体的(边)连通度是$n$。
%从概率论的角度分析，如果$Q_{n}$中存在$n$个故障顶点，那么$Q_{n}$ 不连通的概率为：$\frac{2^{n}}{\binom{2^{n}}{n}}$。
%当$n$足够大时，一个顶点的所有邻接点同时故障的情况几乎是不可能发生的。
%因此，学者们提出了条件连通度的定义，其中一类著名的条件连通度是$g$-限制连通度，它们要求去掉故障集合后每个顶点至少存在$g$个无故障的邻接点。
%当$g=0$时，$g$-限制连通度等同于传统的连通度，因此连通度可以看作是$g$-限制连通度的一种特殊情形，$g$-限制连通度则是连通度的一种推广。
%本文在$g$-限制连通度的基础上，提出了一种更具一般性且符合实际的条件连通度定义。
%
%我们发现，在某些实际网络中，故障的发生具有随机性，因此小范围内大量故障的概率较低。
%由此，我们可以大胆假设，距离较近的顶点，与它们相邻的故障顶点(边)较少。
%换言之，距离较近的两个顶点，它们的无故障邻接点的数量应该较多。
%因此在$g$-限制连通度的基础上，我们提出了一种与距离相关的条件连通度定义――$(g,d,k)$-条件连通度。
%$g$表示要求去掉故障集合后每个顶点至少存在$g$个无故障的邻接点，
%$d$表示顶点之间距离，$k$表示我们设定的参数。
%我们要求对于任意两个顶点$u$和$v$，如果它们之间的距离不超过$d$，那么$u$和$v$ 的度数之和不小于$2g+k$。
%具体的$(g,d,k)$-条件连通度定义以及相关术语的解释，请参见第二章和第三章。
%
%$(g,d,k)$-条件连通度可以看作是$g$-限制连通度的推广。当$k=0$时，$(g,D_{G},0)$-条件连通度和$g$-限制连通度在定义上是等价的。
%因此，$g$-限制连通度可以看作是$(g,d,k)$-条件连通度的一种特殊情形。
%$(g,d,k)$-条件连通度的提出为研究超立方体等网络的容错性提供了更具普遍意义的衡量指标。
%
%在本文中，基于新提出的条件连通度定义，我们研究得出了以下成果：
%
%1. 我们通过理论推导，给出了超立方体网络上某些特定$(g,d,k)$-条件(边)连通度的结果：
%\begin{align*}
%(1)& \kappa^{1,1,k}(Q_{n}) = \left\{ \begin{array}{l}
%        (k+2)n-2(k+1)+\binom{k+1}{2}  \makebox{ \; ，其中 $k\leq n-5$,} \\
%        n(n-1)/2  \makebox{ \; ，其中 $n-4\leq k \leq n-1$,}；
%    \end{array}\right. \nonumber
%    \label{eq:Cskip}\\
%(2)&\kappa^{1,d,2}(Q_{n})= 4n-8， \makebox{ \; ，其中$n \geq 4$ ，$d\geq 2$；}\\
%(3)&\lambda^{1,1,1}(Q_{n}) = 3n-4，\makebox{ \; ，其中$n \geq 4$；}\\
%(4)&\lambda^{1,d,2}(Q_{n}) = 4n-8，\makebox{ \; ，其中$n \geq 6 $，$1 \leq d \leq n$。}
%\end{align*}
%
%
%2. 在$(1,1,1)$-条件连通的情况下，我们提出了一种基于局部信息的容错单播路由算法，该算法通过构建长度不超过3的跨越路径来选择用于路由的维度。
%我们分析了该算法的时间复杂度和空间复杂度，并且与现有的几种单播路由算法从成功率，运行时间，路径长度等方面进行了比较。
%
%3. 本文结合$(g,d,k)$-条件边连通的定义，提出了一种新的条件容错哈密顿性质：$f$-$(g,d,k)$条件边容错哈密顿。
%本文证明，当$n\geq 4$时，$n$维超立方体是$(4n-13)$-$(3,0,0)$条件边容错哈密顿的，并且这一结果是最优的。
%\fi







