%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: time-diagram.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: Kansx
%%CreationDate: 2021/1/10, 16:41:51
%%BoundingBox: 0 0 461 346
%%HiResBoundingBox: 0 0 460.8000 345.1719
%%CropBox: 0 0 460.8000 345.1719
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 571 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2021-01-10T16:37:35+08:00"
   xmp:CreatorTool="matplotlib 3.0.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend 3.0.2"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -345.172 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 345.172 li
460.8 345.172 li
460.8 0 li
cp
clp
gsave
0 345.176 mo
461 345.176 li
461 -.824118 li
0 -.824118 li
0 345.176 li
clp
0 345.176 mo
460.8 345.176 li
460.8 -.424119 li
0 -.424119 li
0 345.176 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
57.6 307.16 mo
414.72 307.16 li
414.72 41.0479 li
57.6 41.0479 li
57.6 307.16 li
f
73.8327 307.16 mo
73.8327 310.66 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
73.8327 307.16 mo
73.8327 310.66 li
@
43.3627 321.382 mo
39.3827 321.382 li
39.3827 314.702 li
43.1727 314.702 li
43.1727 315.452 li
40.2827 315.452 li
40.2827 317.522 li
42.9327 317.522 li
42.9327 318.262 li
40.2827 318.262 li
40.2827 320.642 li
43.3627 320.642 li
43.3627 321.382 li
f
48.4827 321.882 mo
48.0527 322.312 li
47.3927 321.692 46.9027 321.052 46.5827 320.372 cv
46.2627 319.692 46.1027 318.922 46.1027 318.062 cv
46.1027 317.212 46.2627 316.442 46.5827 315.762 cv
46.9027 315.082 47.3927 314.422 48.0527 313.772 cv
48.4827 314.202 li
47.8827 314.782 47.4327 315.372 47.1327 315.982 cv
46.8327 316.592 46.6827 317.282 46.6827 318.062 cv
46.6827 318.852 46.8327 319.552 47.1327 320.162 cv
47.4327 320.772 47.8827 321.342 48.4827 321.882 cv
f
51.0227 315.952 mo
50.6827 316.292 50.2527 316.622 49.7327 316.932 cv
49.7327 316.192 li
50.3827 315.752 50.9127 315.232 51.3327 314.632 cv
51.8027 314.632 li
51.8027 321.352 li
51.0227 321.352 li
51.0227 315.952 li
f
55.5527 321.382 mo
55.0427 322.432 li
54.6527 322.432 li
55.0427 321.382 li
54.6527 321.382 li
54.6527 320.532 li
55.5527 320.532 li
55.5527 321.382 li
f
59.6927 319.512 mo
59.8727 320.212 60.1827 320.602 60.6227 320.682 cv
61.0627 320.762 61.4227 320.722 61.7027 320.552 cv
61.9727 320.382 62.1627 320.162 62.2827 319.882 cv
62.4027 319.612 62.4527 319.302 62.4427 318.962 cv
62.4227 318.622 62.3327 318.342 62.1727 318.102 cv
62.0027 317.872 61.7827 317.722 61.5227 317.642 cv
61.2627 317.562 60.9627 317.562 60.6427 317.642 cv
60.3227 317.722 60.0527 317.902 59.8527 318.182 cv
59.1827 318.102 li
59.2327 317.952 59.4827 316.832 59.9227 314.742 cv
63.0127 314.742 li
63.0127 315.452 li
60.5127 315.452 li
60.3727 316.152 60.2427 316.712 60.1227 317.132 cv
60.5127 316.952 60.8727 316.862 61.2127 316.872 cv
61.5527 316.892 61.8727 316.972 62.1927 317.112 cv
62.5027 317.252 62.7327 317.452 62.8727 317.692 cv
63.0127 317.942 63.1227 318.192 63.1827 318.442 cv
63.2427 318.692 63.2727 318.962 63.2627 319.242 cv
63.2427 319.532 63.1827 319.822 63.0827 320.122 cv
62.9827 320.422 62.8227 320.662 62.6227 320.862 cv
62.4127 321.062 62.1627 321.212 61.8627 321.332 cv
61.5627 321.452 61.2127 321.492 60.8227 321.462 cv
60.4327 321.442 60.0627 321.292 59.7127 321.032 cv
59.3527 320.772 59.1127 320.332 58.9927 319.702 cv
59.6927 319.512 li
f
65.5527 321.382 mo
65.0427 322.432 li
64.6527 322.432 li
65.0427 321.382 li
64.6527 321.382 li
64.6527 320.532 li
65.5527 320.532 li
65.5527 321.382 li
f
69.1827 317.622 mo
69.2027 316.932 69.3027 316.382 69.4727 315.982 cv
69.6427 315.582 69.8827 315.242 70.2027 314.982 cv
70.5127 314.722 70.8927 314.592 71.3527 314.592 cv
71.8027 314.592 72.2027 314.782 72.5427 315.162 cv
72.8827 315.542 73.1027 316.012 73.2027 316.582 cv
73.3027 317.162 73.3427 317.822 73.3027 318.562 cv
73.2627 319.302 73.1327 319.912 72.9127 320.372 cv
72.6927 320.842 72.3527 321.162 71.9127 321.342 cv
71.4727 321.522 71.0227 321.502 70.5827 321.282 cv
70.1427 321.062 69.8327 320.772 69.6527 320.412 cv
69.4727 320.052 69.3427 319.662 69.2627 319.262 cv
69.1827 318.862 69.1527 318.312 69.1827 317.622 cv
70.0027 317.382 mo
69.9227 318.102 69.9427 318.732 70.0827 319.292 cv
70.2127 319.852 70.4227 320.252 70.7227 320.492 cv
71.0227 320.732 71.3227 320.772 71.6427 320.632 cv
71.9527 320.492 72.1827 320.202 72.3227 319.772 cv
72.4627 319.342 72.5427 318.872 72.5427 318.362 cv
72.5427 317.862 72.5227 317.402 72.4827 316.982 cv
72.4427 316.562 72.3227 316.182 72.1327 315.842 cv
71.9327 315.502 71.6727 315.332 71.3527 315.312 cv
71.0227 315.302 70.7327 315.462 70.4927 315.802 cv
70.2427 316.142 70.0827 316.672 70.0027 317.382 cv
f
75.5527 321.382 mo
75.0427 322.432 li
74.6527 322.432 li
75.0427 321.382 li
74.6527 321.382 li
74.6527 320.532 li
75.5527 320.532 li
75.5527 321.382 li
f
81.0227 315.952 mo
80.6827 316.292 80.2527 316.622 79.7327 316.932 cv
79.7327 316.192 li
80.3827 315.752 80.9127 315.232 81.3327 314.632 cv
81.8027 314.632 li
81.8027 321.352 li
81.0227 321.352 li
81.0227 315.952 li
f
85.1627 321.352 mo
85.6227 319.372 86.4427 317.412 87.6227 315.452 cv
84.2627 315.452 li
84.2627 314.742 li
88.4427 314.742 li
88.4427 315.412 li
87.2127 317.392 86.4027 319.372 86.0227 321.352 cv
85.1627 321.352 li
f
90.5527 321.382 mo
90.0427 322.432 li
89.6527 322.432 li
90.0427 321.382 li
89.6527 321.382 li
89.6527 320.532 li
90.5527 320.532 li
90.5527 321.382 li
f
96.0227 315.952 mo
95.6827 316.292 95.2527 316.622 94.7327 316.932 cv
94.7327 316.192 li
95.3827 315.752 95.9127 315.232 96.3327 314.632 cv
96.8027 314.632 li
96.8027 321.352 li
96.0227 321.352 li
96.0227 315.952 li
f
99.1827 317.622 mo
99.2027 316.932 99.3027 316.382 99.4727 315.982 cv
99.6427 315.582 99.8827 315.242 100.203 314.982 cv
100.513 314.722 100.893 314.592 101.353 314.592 cv
101.803 314.592 102.203 314.782 102.543 315.162 cv
102.883 315.542 103.103 316.012 103.203 316.582 cv
103.303 317.162 103.343 317.822 103.303 318.562 cv
103.263 319.302 103.133 319.912 102.913 320.372 cv
102.693 320.842 102.353 321.162 101.913 321.342 cv
101.473 321.522 101.023 321.502 100.583 321.282 cv
100.143 321.062 99.8327 320.772 99.6527 320.412 cv
99.4727 320.052 99.3427 319.662 99.2627 319.262 cv
99.1827 318.862 99.1527 318.312 99.1827 317.622 cv
100.003 317.382 mo
99.9227 318.102 99.9427 318.732 100.083 319.292 cv
100.213 319.852 100.423 320.252 100.723 320.492 cv
101.023 320.732 101.323 320.772 101.643 320.632 cv
101.953 320.492 102.183 320.202 102.323 319.772 cv
102.463 319.342 102.543 318.872 102.543 318.362 cv
102.543 317.862 102.523 317.402 102.483 316.982 cv
102.443 316.562 102.323 316.182 102.133 315.842 cv
101.933 315.502 101.673 315.332 101.353 315.312 cv
101.023 315.302 100.733 315.462 100.493 315.802 cv
100.243 316.142 100.083 316.672 100.003 317.382 cv
f
106.453 318.062 mo
106.453 318.922 106.283 319.692 105.963 320.372 cv
105.633 321.052 105.143 321.692 104.493 322.312 cv
104.063 321.882 li
104.663 321.342 105.113 320.772 105.413 320.162 cv
105.713 319.552 105.863 318.852 105.863 318.062 cv
105.863 317.282 105.713 316.592 105.413 315.982 cv
105.113 315.372 104.663 314.782 104.063 314.202 cv
104.493 313.772 li
105.143 314.422 105.633 315.082 105.963 315.762 cv
106.283 316.442 106.453 317.212 106.453 318.062 cv
f
154.996 307.16 mo
154.996 310.66 li
f
154.996 307.16 mo
154.996 310.66 li
@
124.526 321.382 mo
120.546 321.382 li
120.546 314.702 li
124.336 314.702 li
124.336 315.452 li
121.446 315.452 li
121.446 317.522 li
124.096 317.522 li
124.096 318.262 li
121.446 318.262 li
121.446 320.642 li
124.526 320.642 li
124.526 321.382 li
f
129.646 321.882 mo
129.216 322.312 li
128.556 321.692 128.066 321.052 127.746 320.372 cv
127.426 319.692 127.266 318.922 127.266 318.062 cv
127.266 317.212 127.426 316.442 127.746 315.762 cv
128.066 315.082 128.556 314.422 129.216 313.772 cv
129.646 314.202 li
129.046 314.782 128.596 315.372 128.296 315.982 cv
127.996 316.592 127.846 317.282 127.846 318.062 cv
127.846 318.852 127.996 319.552 128.296 320.162 cv
128.596 320.772 129.046 321.342 129.646 321.882 cv
f
130.466 321.192 mo
130.486 320.802 130.666 320.452 131.006 320.142 cv
131.346 319.832 131.776 319.342 132.296 318.672 cv
132.816 318.012 133.156 317.492 133.316 317.132 cv
133.466 316.772 133.526 316.452 133.486 316.192 cv
133.446 315.932 133.326 315.722 133.116 315.552 cv
132.906 315.382 132.666 315.312 132.396 315.332 cv
132.116 315.362 131.856 315.472 131.616 315.652 cv
131.366 315.832 131.176 316.102 131.046 316.462 cv
130.306 316.352 li
130.516 315.752 130.786 315.322 131.106 315.042 cv
131.426 314.772 131.816 314.622 132.266 314.592 cv
132.526 314.572 132.756 314.572 132.966 314.612 cv
133.166 314.652 133.386 314.752 133.606 314.892 cv
133.826 315.032 134.016 315.252 134.156 315.532 cv
134.296 315.812 134.356 316.162 134.316 316.562 cv
134.276 316.972 134.066 317.452 133.706 318.012 cv
133.336 318.572 132.636 319.452 131.596 320.642 cv
134.406 320.642 li
134.406 321.352 li
130.466 321.352 li
130.466 321.192 li
f
136.716 321.382 mo
136.206 322.432 li
135.816 322.432 li
136.206 321.382 li
135.816 321.382 li
135.816 320.532 li
136.716 320.532 li
136.716 321.382 li
f
141.326 321.352 mo
141.786 319.372 142.606 317.412 143.786 315.452 cv
140.426 315.452 li
140.426 314.742 li
144.606 314.742 li
144.606 315.412 li
143.376 317.392 142.566 319.372 142.186 321.352 cv
141.326 321.352 li
f
146.716 321.382 mo
146.206 322.432 li
145.816 322.432 li
146.206 321.382 li
145.816 321.382 li
145.816 320.532 li
146.716 320.532 li
146.716 321.382 li
f
150.346 317.622 mo
150.366 316.932 150.466 316.382 150.636 315.982 cv
150.806 315.582 151.046 315.242 151.366 314.982 cv
151.676 314.722 152.056 314.592 152.516 314.592 cv
152.966 314.592 153.366 314.782 153.706 315.162 cv
154.046 315.542 154.266 316.012 154.366 316.582 cv
154.466 317.162 154.506 317.822 154.466 318.562 cv
154.426 319.302 154.296 319.912 154.076 320.372 cv
153.856 320.842 153.516 321.162 153.076 321.342 cv
152.636 321.522 152.186 321.502 151.746 321.282 cv
151.306 321.062 150.996 320.772 150.816 320.412 cv
150.636 320.052 150.506 319.662 150.426 319.262 cv
150.346 318.862 150.316 318.312 150.346 317.622 cv
151.166 317.382 mo
151.086 318.102 151.106 318.732 151.246 319.292 cv
151.376 319.852 151.586 320.252 151.886 320.492 cv
152.186 320.732 152.486 320.772 152.806 320.632 cv
153.116 320.492 153.346 320.202 153.486 319.772 cv
153.626 319.342 153.706 318.872 153.706 318.362 cv
153.706 317.862 153.686 317.402 153.646 316.982 cv
153.606 316.562 153.486 316.182 153.296 315.842 cv
153.096 315.502 152.836 315.332 152.516 315.312 cv
152.186 315.302 151.896 315.462 151.656 315.802 cv
151.406 316.142 151.246 316.672 151.166 317.382 cv
f
156.716 321.382 mo
156.206 322.432 li
155.816 322.432 li
156.206 321.382 li
155.816 321.382 li
155.816 320.532 li
156.716 320.532 li
156.716 321.382 li
f
160.466 321.192 mo
160.486 320.802 160.666 320.452 161.006 320.142 cv
161.346 319.832 161.776 319.342 162.296 318.672 cv
162.816 318.012 163.156 317.492 163.316 317.132 cv
163.466 316.772 163.526 316.452 163.486 316.192 cv
163.446 315.932 163.326 315.722 163.116 315.552 cv
162.906 315.382 162.666 315.312 162.396 315.332 cv
162.116 315.362 161.856 315.472 161.616 315.652 cv
161.366 315.832 161.176 316.102 161.046 316.462 cv
160.306 316.352 li
160.516 315.752 160.786 315.322 161.106 315.042 cv
161.426 314.772 161.816 314.622 162.266 314.592 cv
162.526 314.572 162.756 314.572 162.966 314.612 cv
163.166 314.652 163.386 314.752 163.606 314.892 cv
163.826 315.032 164.016 315.252 164.156 315.532 cv
164.296 315.812 164.356 316.162 164.316 316.562 cv
164.276 316.972 164.066 317.452 163.706 318.012 cv
163.336 318.572 162.636 319.452 161.596 320.642 cv
164.406 320.642 li
164.406 321.352 li
160.466 321.352 li
160.466 321.192 li
f
165.346 317.622 mo
165.366 316.932 165.466 316.382 165.636 315.982 cv
165.806 315.582 166.046 315.242 166.366 314.982 cv
166.676 314.722 167.056 314.592 167.516 314.592 cv
167.966 314.592 168.366 314.782 168.706 315.162 cv
169.046 315.542 169.266 316.012 169.366 316.582 cv
169.466 317.162 169.506 317.822 169.466 318.562 cv
169.426 319.302 169.296 319.912 169.076 320.372 cv
168.856 320.842 168.516 321.162 168.076 321.342 cv
167.636 321.522 167.186 321.502 166.746 321.282 cv
166.306 321.062 165.996 320.772 165.816 320.412 cv
165.636 320.052 165.506 319.662 165.426 319.262 cv
165.346 318.862 165.316 318.312 165.346 317.622 cv
166.166 317.382 mo
166.086 318.102 166.106 318.732 166.246 319.292 cv
166.376 319.852 166.586 320.252 166.886 320.492 cv
167.186 320.732 167.486 320.772 167.806 320.632 cv
168.116 320.492 168.346 320.202 168.486 319.772 cv
168.626 319.342 168.706 318.872 168.706 318.362 cv
168.706 317.862 168.686 317.402 168.646 316.982 cv
168.606 316.562 168.486 316.182 168.296 315.842 cv
168.096 315.502 167.836 315.332 167.516 315.312 cv
167.186 315.302 166.896 315.462 166.656 315.802 cv
166.406 316.142 166.246 316.672 166.166 317.382 cv
f
171.716 321.382 mo
171.206 322.432 li
170.816 322.432 li
171.206 321.382 li
170.816 321.382 li
170.816 320.532 li
171.716 320.532 li
171.716 321.382 li
f
177.186 315.952 mo
176.846 316.292 176.416 316.622 175.896 316.932 cv
175.896 316.192 li
176.546 315.752 177.076 315.232 177.496 314.632 cv
177.966 314.632 li
177.966 321.352 li
177.186 321.352 li
177.186 315.952 li
f
183.126 319.862 mo
180.116 319.862 li
180.116 319.202 li
183.276 314.632 li
183.866 314.632 li
183.866 319.202 li
184.796 319.202 li
184.796 319.862 li
183.866 319.862 li
183.866 321.352 li
183.126 321.352 li
183.126 319.862 li
183.126 319.202 mo
183.126 316.112 li
180.936 319.202 li
183.126 319.202 li
f
187.616 318.062 mo
187.616 318.922 187.446 319.692 187.126 320.372 cv
186.796 321.052 186.306 321.692 185.656 322.312 cv
185.226 321.882 li
185.826 321.342 186.276 320.772 186.576 320.162 cv
186.876 319.552 187.026 318.852 187.026 318.062 cv
187.026 317.282 186.876 316.592 186.576 315.982 cv
186.276 315.372 185.826 314.782 185.226 314.202 cv
185.656 313.772 li
186.306 314.422 186.796 315.082 187.126 315.762 cv
187.446 316.442 187.616 317.212 187.616 318.062 cv
f
236.16 307.16 mo
236.16 310.66 li
f
236.16 307.16 mo
236.16 310.66 li
@
203.19 321.382 mo
199.21 321.382 li
199.21 314.702 li
203 314.702 li
203 315.452 li
200.11 315.452 li
200.11 317.522 li
202.76 317.522 li
202.76 318.262 li
200.11 318.262 li
200.11 320.642 li
203.19 320.642 li
203.19 321.382 li
f
208.31 321.882 mo
207.88 322.312 li
207.22 321.692 206.73 321.052 206.41 320.372 cv
206.09 319.692 205.93 318.922 205.93 318.062 cv
205.93 317.212 206.09 316.442 206.41 315.762 cv
206.73 315.082 207.22 314.422 207.88 313.772 cv
208.31 314.202 li
207.71 314.782 207.26 315.372 206.96 315.982 cv
206.66 316.592 206.51 317.282 206.51 318.062 cv
206.51 318.852 206.66 319.552 206.96 320.162 cv
207.26 320.772 207.71 321.342 208.31 321.882 cv
f
209.05 319.672 mo
209.75 319.552 li
209.85 319.892 210.02 320.172 210.26 320.392 cv
210.49 320.612 210.78 320.722 211.14 320.702 cv
211.49 320.692 211.77 320.552 211.98 320.272 cv
212.18 320.002 212.27 319.692 212.25 319.342 cv
212.22 318.992 212.08 318.722 211.84 318.522 cv
211.59 318.322 211.19 318.182 210.65 318.102 cv
210.65 317.602 li
211.19 317.552 211.59 317.412 211.84 317.172 cv
212.08 316.932 212.19 316.632 212.17 316.252 cv
212.15 315.872 211.98 315.602 211.67 315.432 cv
211.35 315.262 211.02 315.242 210.67 315.372 cv
210.31 315.502 210.03 315.862 209.83 316.462 cv
209.13 316.352 li
209.28 315.882 209.49 315.492 209.77 315.172 cv
210.04 314.862 210.41 314.682 210.88 314.632 cv
211.35 314.582 211.76 314.642 212.11 314.812 cv
212.46 314.982 212.71 315.242 212.85 315.592 cv
212.99 315.942 213.01 316.322 212.91 316.742 cv
212.81 317.162 212.51 317.522 212.02 317.832 cv
212.38 317.992 212.66 318.222 212.86 318.532 cv
213.05 318.852 213.11 319.262 213.05 319.772 cv
212.99 320.282 212.76 320.692 212.37 321.002 cv
211.98 321.312 211.54 321.462 211.04 321.442 cv
210.54 321.432 210.11 321.282 209.75 320.982 cv
209.39 320.682 209.15 320.252 209.05 319.672 cv
f
215.38 321.382 mo
214.87 322.432 li
214.48 322.432 li
214.87 321.382 li
214.48 321.382 li
214.48 320.532 li
215.38 320.532 li
215.38 321.382 li
f
219.91 321.462 mo
220.48 320.502 220.95 319.632 221.32 318.852 cv
220.66 318.952 220.12 318.872 219.69 318.592 cv
219.26 318.322 219 317.952 218.91 317.482 cv
218.82 317.022 218.83 316.592 218.93 316.212 cv
219.03 315.832 219.2 315.522 219.42 315.272 cv
219.64 315.032 219.9 314.852 220.22 314.752 cv
220.53 314.652 220.81 314.592 221.06 314.592 cv
221.3 314.592 221.56 314.652 221.82 314.752 cv
222.08 314.852 222.31 315.012 222.52 315.222 cv
222.73 315.432 222.87 315.642 222.95 315.862 cv
223.03 316.082 223.07 316.372 223.07 316.722 cv
223.07 317.072 222.94 317.522 222.68 318.062 cv
222.42 318.612 221.78 319.742 220.77 321.462 cv
219.91 321.462 li
219.69 317.092 mo
219.73 317.432 219.87 317.712 220.12 317.932 cv
220.37 318.152 220.64 318.252 220.93 318.222 cv
221.21 318.202 221.44 318.122 221.61 317.992 cv
221.77 317.862 221.94 317.642 222.1 317.322 cv
222.2 316.942 222.22 316.612 222.17 316.332 cv
222.12 316.062 221.98 315.832 221.76 315.652 cv
221.54 315.472 221.3 315.372 221.04 315.372 cv
220.88 315.352 220.68 315.392 220.44 315.492 cv
220.19 315.592 219.99 315.802 219.85 316.112 cv
219.71 316.432 219.65 316.752 219.69 317.092 cv
f
225.38 321.382 mo
224.87 322.432 li
224.48 322.432 li
224.87 321.382 li
224.48 321.382 li
224.48 320.532 li
225.38 320.532 li
225.38 321.382 li
f
229.01 317.622 mo
229.03 316.932 229.13 316.382 229.3 315.982 cv
229.47 315.582 229.71 315.242 230.03 314.982 cv
230.34 314.722 230.72 314.592 231.18 314.592 cv
231.63 314.592 232.03 314.782 232.37 315.162 cv
232.71 315.542 232.93 316.012 233.03 316.582 cv
233.13 317.162 233.17 317.822 233.13 318.562 cv
233.09 319.302 232.96 319.912 232.74 320.372 cv
232.52 320.842 232.18 321.162 231.74 321.342 cv
231.3 321.522 230.85 321.502 230.41 321.282 cv
229.97 321.062 229.66 320.772 229.48 320.412 cv
229.3 320.052 229.17 319.662 229.09 319.262 cv
229.01 318.862 228.98 318.312 229.01 317.622 cv
229.83 317.382 mo
229.75 318.102 229.77 318.732 229.91 319.292 cv
230.04 319.852 230.25 320.252 230.55 320.492 cv
230.85 320.732 231.15 320.772 231.47 320.632 cv
231.78 320.492 232.01 320.202 232.15 319.772 cv
232.29 319.342 232.37 318.872 232.37 318.362 cv
232.37 317.862 232.35 317.402 232.31 316.982 cv
232.27 316.562 232.15 316.182 231.96 315.842 cv
231.76 315.502 231.5 315.332 231.18 315.312 cv
230.85 315.302 230.56 315.462 230.32 315.802 cv
230.07 316.142 229.91 316.672 229.83 317.382 cv
f
235.38 321.382 mo
234.87 322.432 li
234.48 322.432 li
234.87 321.382 li
234.48 321.382 li
234.48 320.532 li
235.38 320.532 li
235.38 321.382 li
f
239.05 319.672 mo
239.75 319.552 li
239.85 319.892 240.02 320.172 240.26 320.392 cv
240.49 320.612 240.78 320.722 241.14 320.702 cv
241.49 320.692 241.77 320.552 241.98 320.272 cv
242.18 320.002 242.27 319.692 242.25 319.342 cv
242.22 318.992 242.08 318.722 241.84 318.522 cv
241.59 318.322 241.19 318.182 240.65 318.102 cv
240.65 317.602 li
241.19 317.552 241.59 317.412 241.84 317.172 cv
242.08 316.932 242.19 316.632 242.17 316.252 cv
242.15 315.872 241.98 315.602 241.67 315.432 cv
241.35 315.262 241.02 315.242 240.67 315.372 cv
240.31 315.502 240.03 315.862 239.83 316.462 cv
239.13 316.352 li
239.28 315.882 239.49 315.492 239.77 315.172 cv
240.04 314.862 240.41 314.682 240.88 314.632 cv
241.35 314.582 241.76 314.642 242.11 314.812 cv
242.46 314.982 242.71 315.242 242.85 315.592 cv
242.99 315.942 243.01 316.322 242.91 316.742 cv
242.81 317.162 242.51 317.522 242.02 317.832 cv
242.38 317.992 242.66 318.222 242.86 318.532 cv
243.05 318.852 243.11 319.262 243.05 319.772 cv
242.99 320.282 242.76 320.692 242.37 321.002 cv
241.98 321.312 241.54 321.462 241.04 321.442 cv
240.54 321.432 240.11 321.282 239.75 320.982 cv
239.39 320.682 239.15 320.252 239.05 319.672 cv
f
244.05 319.672 mo
244.75 319.552 li
244.85 319.892 245.02 320.172 245.26 320.392 cv
245.49 320.612 245.78 320.722 246.14 320.702 cv
246.49 320.692 246.77 320.552 246.98 320.272 cv
247.18 320.002 247.27 319.692 247.25 319.342 cv
247.22 318.992 247.08 318.722 246.84 318.522 cv
246.59 318.322 246.19 318.182 245.65 318.102 cv
245.65 317.602 li
246.19 317.552 246.59 317.412 246.84 317.172 cv
247.08 316.932 247.19 316.632 247.17 316.252 cv
247.15 315.872 246.98 315.602 246.67 315.432 cv
246.35 315.262 246.02 315.242 245.67 315.372 cv
245.31 315.502 245.03 315.862 244.83 316.462 cv
244.13 316.352 li
244.28 315.882 244.49 315.492 244.77 315.172 cv
245.04 314.862 245.41 314.682 245.88 314.632 cv
246.35 314.582 246.76 314.642 247.11 314.812 cv
247.46 314.982 247.71 315.242 247.85 315.592 cv
247.99 315.942 248.01 316.322 247.91 316.742 cv
247.81 317.162 247.51 317.522 247.02 317.832 cv
247.38 317.992 247.66 318.222 247.86 318.532 cv
248.05 318.852 248.11 319.262 248.05 319.772 cv
247.99 320.282 247.76 320.692 247.37 321.002 cv
246.98 321.312 246.54 321.462 246.04 321.442 cv
245.54 321.432 245.11 321.282 244.75 320.982 cv
244.39 320.682 244.15 320.252 244.05 319.672 cv
f
249.13 321.192 mo
249.15 320.802 249.33 320.452 249.67 320.142 cv
250.01 319.832 250.44 319.342 250.96 318.672 cv
251.48 318.012 251.82 317.492 251.98 317.132 cv
252.13 316.772 252.19 316.452 252.15 316.192 cv
252.11 315.932 251.99 315.722 251.78 315.552 cv
251.57 315.382 251.33 315.312 251.06 315.332 cv
250.78 315.362 250.52 315.472 250.28 315.652 cv
250.03 315.832 249.84 316.102 249.71 316.462 cv
248.97 316.352 li
249.18 315.752 249.45 315.322 249.77 315.042 cv
250.09 314.772 250.48 314.622 250.93 314.592 cv
251.19 314.572 251.42 314.572 251.63 314.612 cv
251.83 314.652 252.05 314.752 252.27 314.892 cv
252.49 315.032 252.68 315.252 252.82 315.532 cv
252.96 315.812 253.02 316.162 252.98 316.562 cv
252.94 316.972 252.73 317.452 252.37 318.012 cv
252 318.572 251.3 319.452 250.26 320.642 cv
253.07 320.642 li
253.07 321.352 li
249.13 321.352 li
249.13 321.192 li
f
255.38 321.382 mo
254.87 322.432 li
254.48 322.432 li
254.87 321.382 li
254.48 321.382 li
254.48 320.532 li
255.38 320.532 li
255.38 321.382 li
f
259.13 321.192 mo
259.15 320.802 259.33 320.452 259.67 320.142 cv
260.01 319.832 260.44 319.342 260.96 318.672 cv
261.48 318.012 261.82 317.492 261.98 317.132 cv
262.13 316.772 262.19 316.452 262.15 316.192 cv
262.11 315.932 261.99 315.722 261.78 315.552 cv
261.57 315.382 261.33 315.312 261.06 315.332 cv
260.78 315.362 260.52 315.472 260.28 315.652 cv
260.03 315.832 259.84 316.102 259.71 316.462 cv
258.97 316.352 li
259.18 315.752 259.45 315.322 259.77 315.042 cv
260.09 314.772 260.48 314.622 260.93 314.592 cv
261.19 314.572 261.42 314.572 261.63 314.612 cv
261.83 314.652 262.05 314.752 262.27 314.892 cv
262.49 315.032 262.68 315.252 262.82 315.532 cv
262.96 315.812 263.02 316.162 262.98 316.562 cv
262.94 316.972 262.73 317.452 262.37 318.012 cv
262 318.572 261.3 319.452 260.26 320.642 cv
263.07 320.642 li
263.07 321.352 li
259.13 321.352 li
259.13 321.192 li
f
264.99 321.352 mo
265.45 319.372 266.27 317.412 267.45 315.452 cv
264.09 315.452 li
264.09 314.742 li
268.27 314.742 li
268.27 315.412 li
267.04 317.392 266.23 319.372 265.85 321.352 cv
264.99 321.352 li
f
271.28 318.062 mo
271.28 318.922 271.11 319.692 270.79 320.372 cv
270.46 321.052 269.97 321.692 269.32 322.312 cv
268.89 321.882 li
269.49 321.342 269.94 320.772 270.24 320.162 cv
270.54 319.552 270.69 318.852 270.69 318.062 cv
270.69 317.282 270.54 316.592 270.24 315.982 cv
269.94 315.372 269.49 314.782 268.89 314.202 cv
269.32 313.772 li
269.97 314.422 270.46 315.082 270.79 315.762 cv
271.11 316.442 271.28 317.212 271.28 318.062 cv
f
317.324 307.16 mo
317.324 310.66 li
f
317.324 307.16 mo
317.324 310.66 li
@
281.854 321.382 mo
277.874 321.382 li
277.874 314.702 li
281.664 314.702 li
281.664 315.452 li
278.774 315.452 li
278.774 317.522 li
281.424 317.522 li
281.424 318.262 li
278.774 318.262 li
278.774 320.642 li
281.854 320.642 li
281.854 321.382 li
f
286.974 321.882 mo
286.544 322.312 li
285.884 321.692 285.394 321.052 285.074 320.372 cv
284.754 319.692 284.594 318.922 284.594 318.062 cv
284.594 317.212 284.754 316.442 285.074 315.762 cv
285.394 315.082 285.884 314.422 286.544 313.772 cv
286.974 314.202 li
286.374 314.782 285.924 315.372 285.624 315.982 cv
285.324 316.592 285.174 317.282 285.174 318.062 cv
285.174 318.852 285.324 319.552 285.624 320.162 cv
285.924 320.772 286.374 321.342 286.974 321.882 cv
f
290.454 319.862 mo
287.444 319.862 li
287.444 319.202 li
290.604 314.632 li
291.194 314.632 li
291.194 319.202 li
292.124 319.202 li
292.124 319.862 li
291.194 319.862 li
291.194 321.352 li
290.454 321.352 li
290.454 319.862 li
290.454 319.202 mo
290.454 316.112 li
288.264 319.202 li
290.454 319.202 li
f
294.044 321.382 mo
293.534 322.432 li
293.144 322.432 li
293.534 321.382 li
293.144 321.382 li
293.144 320.532 li
294.044 320.532 li
294.044 321.382 li
f
299.514 315.952 mo
299.174 316.292 298.744 316.622 298.224 316.932 cv
298.224 316.192 li
298.874 315.752 299.404 315.232 299.824 314.632 cv
300.294 314.632 li
300.294 321.352 li
299.514 321.352 li
299.514 315.952 li
f
302.674 317.622 mo
302.694 316.932 302.794 316.382 302.964 315.982 cv
303.134 315.582 303.374 315.242 303.694 314.982 cv
304.004 314.722 304.384 314.592 304.844 314.592 cv
305.294 314.592 305.694 314.782 306.034 315.162 cv
306.374 315.542 306.594 316.012 306.694 316.582 cv
306.794 317.162 306.834 317.822 306.794 318.562 cv
306.754 319.302 306.624 319.912 306.404 320.372 cv
306.184 320.842 305.844 321.162 305.404 321.342 cv
304.964 321.522 304.514 321.502 304.074 321.282 cv
303.634 321.062 303.324 320.772 303.144 320.412 cv
302.964 320.052 302.834 319.662 302.754 319.262 cv
302.674 318.862 302.644 318.312 302.674 317.622 cv
303.494 317.382 mo
303.414 318.102 303.434 318.732 303.574 319.292 cv
303.704 319.852 303.914 320.252 304.214 320.492 cv
304.514 320.732 304.814 320.772 305.134 320.632 cv
305.444 320.492 305.674 320.202 305.814 319.772 cv
305.954 319.342 306.034 318.872 306.034 318.362 cv
306.034 317.862 306.014 317.402 305.974 316.982 cv
305.934 316.562 305.814 316.182 305.624 315.842 cv
305.424 315.502 305.164 315.332 304.844 315.312 cv
304.514 315.302 304.224 315.462 303.984 315.802 cv
303.734 316.142 303.574 316.672 303.494 317.382 cv
f
309.044 321.382 mo
308.534 322.432 li
308.144 322.432 li
308.534 321.382 li
308.144 321.382 li
308.144 320.532 li
309.044 320.532 li
309.044 321.382 li
f
312.674 317.622 mo
312.694 316.932 312.794 316.382 312.964 315.982 cv
313.134 315.582 313.374 315.242 313.694 314.982 cv
314.004 314.722 314.384 314.592 314.844 314.592 cv
315.294 314.592 315.694 314.782 316.034 315.162 cv
316.374 315.542 316.594 316.012 316.694 316.582 cv
316.794 317.162 316.834 317.822 316.794 318.562 cv
316.754 319.302 316.624 319.912 316.404 320.372 cv
316.184 320.842 315.844 321.162 315.404 321.342 cv
314.964 321.522 314.514 321.502 314.074 321.282 cv
313.634 321.062 313.324 320.772 313.144 320.412 cv
312.964 320.052 312.834 319.662 312.754 319.262 cv
312.674 318.862 312.644 318.312 312.674 317.622 cv
313.494 317.382 mo
313.414 318.102 313.434 318.732 313.574 319.292 cv
313.704 319.852 313.914 320.252 314.214 320.492 cv
314.514 320.732 314.814 320.772 315.134 320.632 cv
315.444 320.492 315.674 320.202 315.814 319.772 cv
315.954 319.342 316.034 318.872 316.034 318.362 cv
316.034 317.862 316.014 317.402 315.974 316.982 cv
315.934 316.562 315.814 316.182 315.624 315.842 cv
315.424 315.502 315.164 315.332 314.844 315.312 cv
314.514 315.302 314.224 315.462 313.984 315.802 cv
313.734 316.142 313.574 316.672 313.494 317.382 cv
f
319.044 321.382 mo
318.534 322.432 li
318.144 322.432 li
318.534 321.382 li
318.144 321.382 li
318.144 320.532 li
319.044 320.532 li
319.044 321.382 li
f
323.654 321.352 mo
324.114 319.372 324.934 317.412 326.114 315.452 cv
322.754 315.452 li
322.754 314.742 li
326.934 314.742 li
326.934 315.412 li
325.704 317.392 324.894 319.372 324.514 321.352 cv
323.654 321.352 li
f
329.514 315.952 mo
329.174 316.292 328.744 316.622 328.224 316.932 cv
328.224 316.192 li
328.874 315.752 329.404 315.232 329.824 314.632 cv
330.294 314.632 li
330.294 321.352 li
329.514 321.352 li
329.514 315.952 li
f
332.794 321.192 mo
332.814 320.802 332.994 320.452 333.334 320.142 cv
333.674 319.832 334.104 319.342 334.624 318.672 cv
335.144 318.012 335.484 317.492 335.644 317.132 cv
335.794 316.772 335.854 316.452 335.814 316.192 cv
335.774 315.932 335.654 315.722 335.444 315.552 cv
335.234 315.382 334.994 315.312 334.724 315.332 cv
334.444 315.362 334.184 315.472 333.944 315.652 cv
333.694 315.832 333.504 316.102 333.374 316.462 cv
332.634 316.352 li
332.844 315.752 333.114 315.322 333.434 315.042 cv
333.754 314.772 334.144 314.622 334.594 314.592 cv
334.854 314.572 335.084 314.572 335.294 314.612 cv
335.494 314.652 335.714 314.752 335.934 314.892 cv
336.154 315.032 336.344 315.252 336.484 315.532 cv
336.624 315.812 336.684 316.162 336.644 316.562 cv
336.604 316.972 336.394 317.452 336.034 318.012 cv
335.664 318.572 334.964 319.452 333.924 320.642 cv
336.734 320.642 li
336.734 321.352 li
332.794 321.352 li
332.794 321.192 li
f
339.044 321.382 mo
338.534 322.432 li
338.144 322.432 li
338.534 321.382 li
338.144 321.382 li
338.144 320.532 li
339.044 320.532 li
339.044 321.382 li
f
342.714 319.672 mo
343.414 319.552 li
343.514 319.892 343.684 320.172 343.924 320.392 cv
344.154 320.612 344.444 320.722 344.804 320.702 cv
345.154 320.692 345.434 320.552 345.644 320.272 cv
345.844 320.002 345.934 319.692 345.914 319.342 cv
345.884 318.992 345.744 318.722 345.504 318.522 cv
345.254 318.322 344.854 318.182 344.314 318.102 cv
344.314 317.602 li
344.854 317.552 345.254 317.412 345.504 317.172 cv
345.744 316.932 345.854 316.632 345.834 316.252 cv
345.814 315.872 345.644 315.602 345.334 315.432 cv
345.014 315.262 344.684 315.242 344.334 315.372 cv
343.974 315.502 343.694 315.862 343.494 316.462 cv
342.794 316.352 li
342.944 315.882 343.154 315.492 343.434 315.172 cv
343.704 314.862 344.074 314.682 344.544 314.632 cv
345.014 314.582 345.424 314.642 345.774 314.812 cv
346.124 314.982 346.374 315.242 346.514 315.592 cv
346.654 315.942 346.674 316.322 346.574 316.742 cv
346.474 317.162 346.174 317.522 345.684 317.832 cv
346.044 317.992 346.324 318.222 346.524 318.532 cv
346.714 318.852 346.774 319.262 346.714 319.772 cv
346.654 320.282 346.424 320.692 346.034 321.002 cv
345.644 321.312 345.204 321.462 344.704 321.442 cv
344.204 321.432 343.774 321.282 343.414 320.982 cv
343.054 320.682 342.814 320.252 342.714 319.672 cv
f
347.674 317.622 mo
347.694 316.932 347.794 316.382 347.964 315.982 cv
348.134 315.582 348.374 315.242 348.694 314.982 cv
349.004 314.722 349.384 314.592 349.844 314.592 cv
350.294 314.592 350.694 314.782 351.034 315.162 cv
351.374 315.542 351.594 316.012 351.694 316.582 cv
351.794 317.162 351.834 317.822 351.794 318.562 cv
351.754 319.302 351.624 319.912 351.404 320.372 cv
351.184 320.842 350.844 321.162 350.404 321.342 cv
349.964 321.522 349.514 321.502 349.074 321.282 cv
348.634 321.062 348.324 320.772 348.144 320.412 cv
347.964 320.052 347.834 319.662 347.754 319.262 cv
347.674 318.862 347.644 318.312 347.674 317.622 cv
348.494 317.382 mo
348.414 318.102 348.434 318.732 348.574 319.292 cv
348.704 319.852 348.914 320.252 349.214 320.492 cv
349.514 320.732 349.814 320.772 350.134 320.632 cv
350.444 320.492 350.674 320.202 350.814 319.772 cv
350.954 319.342 351.034 318.872 351.034 318.362 cv
351.034 317.862 351.014 317.402 350.974 316.982 cv
350.934 316.562 350.814 316.182 350.624 315.842 cv
350.424 315.502 350.164 315.332 349.844 315.312 cv
349.514 315.302 349.224 315.462 348.984 315.802 cv
348.734 316.142 348.574 316.672 348.494 317.382 cv
f
354.944 318.062 mo
354.944 318.922 354.774 319.692 354.454 320.372 cv
354.124 321.052 353.634 321.692 352.984 322.312 cv
352.554 321.882 li
353.154 321.342 353.604 320.772 353.904 320.162 cv
354.204 319.552 354.354 318.852 354.354 318.062 cv
354.354 317.282 354.204 316.592 353.904 315.982 cv
353.604 315.372 353.154 314.782 352.554 314.202 cv
352.984 313.772 li
353.634 314.422 354.124 315.082 354.454 315.762 cv
354.774 316.442 354.944 317.212 354.944 318.062 cv
f
398.487 307.16 mo
398.487 310.66 li
f
398.487 307.16 mo
398.487 310.66 li
@
363.017 321.382 mo
359.037 321.382 li
359.037 314.702 li
362.827 314.702 li
362.827 315.452 li
359.937 315.452 li
359.937 317.522 li
362.587 317.522 li
362.587 318.262 li
359.937 318.262 li
359.937 320.642 li
363.017 320.642 li
363.017 321.382 li
f
368.137 321.882 mo
367.707 322.312 li
367.047 321.692 366.557 321.052 366.237 320.372 cv
365.917 319.692 365.757 318.922 365.757 318.062 cv
365.757 317.212 365.917 316.442 366.237 315.762 cv
366.557 315.082 367.047 314.422 367.707 313.772 cv
368.137 314.202 li
367.537 314.782 367.087 315.372 366.787 315.982 cv
366.487 316.592 366.337 317.282 366.337 318.062 cv
366.337 318.852 366.487 319.552 366.787 320.162 cv
367.087 320.772 367.537 321.342 368.137 321.882 cv
f
369.347 319.512 mo
369.527 320.212 369.837 320.602 370.277 320.682 cv
370.717 320.762 371.077 320.722 371.357 320.552 cv
371.627 320.382 371.817 320.162 371.937 319.882 cv
372.057 319.612 372.107 319.302 372.097 318.962 cv
372.077 318.622 371.987 318.342 371.827 318.102 cv
371.657 317.872 371.437 317.722 371.177 317.642 cv
370.917 317.562 370.617 317.562 370.297 317.642 cv
369.977 317.722 369.707 317.902 369.507 318.182 cv
368.837 318.102 li
368.887 317.952 369.137 316.832 369.577 314.742 cv
372.667 314.742 li
372.667 315.452 li
370.167 315.452 li
370.027 316.152 369.897 316.712 369.777 317.132 cv
370.167 316.952 370.527 316.862 370.867 316.872 cv
371.207 316.892 371.527 316.972 371.847 317.112 cv
372.157 317.252 372.387 317.452 372.527 317.692 cv
372.667 317.942 372.777 318.192 372.837 318.442 cv
372.897 318.692 372.927 318.962 372.917 319.242 cv
372.897 319.532 372.837 319.822 372.737 320.122 cv
372.637 320.422 372.477 320.662 372.277 320.862 cv
372.067 321.062 371.817 321.212 371.517 321.332 cv
371.217 321.452 370.867 321.492 370.477 321.462 cv
370.087 321.442 369.717 321.292 369.367 321.032 cv
369.007 320.772 368.767 320.332 368.647 319.702 cv
369.347 319.512 li
f
375.207 321.382 mo
374.697 322.432 li
374.307 322.432 li
374.697 321.382 li
374.307 321.382 li
374.307 320.532 li
375.207 320.532 li
375.207 321.382 li
f
380.677 315.952 mo
380.337 316.292 379.907 316.622 379.387 316.932 cv
379.387 316.192 li
380.037 315.752 380.567 315.232 380.987 314.632 cv
381.457 314.632 li
381.457 321.352 li
380.677 321.352 li
380.677 315.952 li
f
383.877 319.672 mo
384.577 319.552 li
384.677 319.892 384.847 320.172 385.087 320.392 cv
385.317 320.612 385.607 320.722 385.967 320.702 cv
386.317 320.692 386.597 320.552 386.807 320.272 cv
387.007 320.002 387.097 319.692 387.077 319.342 cv
387.047 318.992 386.907 318.722 386.667 318.522 cv
386.417 318.322 386.017 318.182 385.477 318.102 cv
385.477 317.602 li
386.017 317.552 386.417 317.412 386.667 317.172 cv
386.907 316.932 387.017 316.632 386.997 316.252 cv
386.977 315.872 386.807 315.602 386.497 315.432 cv
386.177 315.262 385.847 315.242 385.497 315.372 cv
385.137 315.502 384.857 315.862 384.657 316.462 cv
383.957 316.352 li
384.107 315.882 384.317 315.492 384.597 315.172 cv
384.867 314.862 385.237 314.682 385.707 314.632 cv
386.177 314.582 386.587 314.642 386.937 314.812 cv
387.287 314.982 387.537 315.242 387.677 315.592 cv
387.817 315.942 387.837 316.322 387.737 316.742 cv
387.637 317.162 387.337 317.522 386.847 317.832 cv
387.207 317.992 387.487 318.222 387.687 318.532 cv
387.877 318.852 387.937 319.262 387.877 319.772 cv
387.817 320.282 387.587 320.692 387.197 321.002 cv
386.807 321.312 386.367 321.462 385.867 321.442 cv
385.367 321.432 384.937 321.282 384.577 320.982 cv
384.217 320.682 383.977 320.252 383.877 319.672 cv
f
390.207 321.382 mo
389.697 322.432 li
389.307 322.432 li
389.697 321.382 li
389.307 321.382 li
389.307 320.532 li
390.207 320.532 li
390.207 321.382 li
f
393.757 319.432 mo
393.757 319.122 393.827 318.812 393.987 318.512 cv
394.147 318.212 394.407 317.972 394.777 317.792 cv
394.457 317.612 394.247 317.412 394.147 317.192 cv
394.047 316.972 393.987 316.712 393.977 316.422 cv
393.957 316.142 393.997 315.892 394.087 315.682 cv
394.177 315.482 394.317 315.282 394.497 315.102 cv
394.677 314.922 394.887 314.792 395.107 314.732 cv
395.327 314.672 395.567 314.632 395.827 314.632 cv
396.087 314.632 396.317 314.662 396.527 314.712 cv
396.737 314.762 396.957 314.872 397.197 315.042 cv
397.427 315.212 397.597 315.452 397.707 315.762 cv
397.807 316.082 397.807 316.442 397.687 316.862 cv
397.567 317.282 397.257 317.602 396.767 317.832 cv
397.207 317.972 397.527 318.172 397.707 318.442 cv
397.887 318.722 397.977 319.052 397.977 319.442 cv
397.977 319.832 397.917 320.142 397.797 320.372 cv
397.677 320.612 397.547 320.802 397.407 320.962 cv
397.267 321.122 397.067 321.242 396.827 321.332 cv
396.577 321.422 396.267 321.462 395.887 321.462 cv
395.507 321.462 395.187 321.422 394.917 321.332 cv
394.637 321.242 394.407 321.102 394.227 320.922 cv
394.047 320.742 393.917 320.522 393.857 320.272 cv
393.787 320.032 393.757 319.752 393.757 319.432 cv
394.557 319.392 mo
394.537 319.712 394.597 319.982 394.717 320.212 cv
394.837 320.452 395.047 320.602 395.357 320.662 cv
395.667 320.732 395.997 320.732 396.337 320.652 cv
396.677 320.572 396.907 320.392 397.037 320.102 cv
397.167 319.822 397.217 319.532 397.177 319.242 cv
397.137 318.962 396.967 318.722 396.687 318.522 cv
396.397 318.322 396.087 318.242 395.747 318.262 cv
395.407 318.292 395.127 318.412 394.907 318.612 cv
394.687 318.822 394.567 319.082 394.557 319.392 cv
394.697 316.352 mo
394.697 316.612 394.787 316.862 394.967 317.092 cv
395.147 317.332 395.437 317.442 395.827 317.442 cv
396.217 317.442 396.507 317.332 396.707 317.092 cv
396.907 316.862 396.997 316.582 396.987 316.252 cv
396.967 315.932 396.847 315.692 396.627 315.532 cv
396.407 315.372 396.107 315.312 395.727 315.332 cv
395.347 315.362 395.087 315.472 394.927 315.662 cv
394.767 315.862 394.697 316.092 394.697 316.352 cv
f
400.207 321.382 mo
399.697 322.432 li
399.307 322.432 li
399.697 321.382 li
399.307 321.382 li
399.307 320.532 li
400.207 320.532 li
400.207 321.382 li
f
404.737 321.462 mo
405.307 320.502 405.777 319.632 406.147 318.852 cv
405.487 318.952 404.947 318.872 404.517 318.592 cv
404.087 318.322 403.827 317.952 403.737 317.482 cv
403.647 317.022 403.657 316.592 403.757 316.212 cv
403.857 315.832 404.027 315.522 404.247 315.272 cv
404.467 315.032 404.727 314.852 405.047 314.752 cv
405.357 314.652 405.637 314.592 405.887 314.592 cv
406.127 314.592 406.387 314.652 406.647 314.752 cv
406.907 314.852 407.137 315.012 407.347 315.222 cv
407.557 315.432 407.697 315.642 407.777 315.862 cv
407.857 316.082 407.897 316.372 407.897 316.722 cv
407.897 317.072 407.767 317.522 407.507 318.062 cv
407.247 318.612 406.607 319.742 405.597 321.462 cv
404.737 321.462 li
404.517 317.092 mo
404.557 317.432 404.697 317.712 404.947 317.932 cv
405.197 318.152 405.467 318.252 405.757 318.222 cv
406.037 318.202 406.267 318.122 406.437 317.992 cv
406.597 317.862 406.767 317.642 406.927 317.322 cv
407.027 316.942 407.047 316.612 406.997 316.332 cv
406.947 316.062 406.807 315.832 406.587 315.652 cv
406.367 315.472 406.127 315.372 405.867 315.372 cv
405.707 315.352 405.507 315.392 405.267 315.492 cv
405.017 315.592 404.817 315.802 404.677 316.112 cv
404.537 316.432 404.477 316.752 404.517 317.092 cv
f
408.757 319.432 mo
408.757 319.122 408.827 318.812 408.987 318.512 cv
409.147 318.212 409.407 317.972 409.777 317.792 cv
409.457 317.612 409.247 317.412 409.147 317.192 cv
409.047 316.972 408.987 316.712 408.977 316.422 cv
408.957 316.142 408.997 315.892 409.087 315.682 cv
409.177 315.482 409.317 315.282 409.497 315.102 cv
409.677 314.922 409.887 314.792 410.107 314.732 cv
410.327 314.672 410.567 314.632 410.827 314.632 cv
411.087 314.632 411.317 314.662 411.527 314.712 cv
411.737 314.762 411.957 314.872 412.197 315.042 cv
412.427 315.212 412.597 315.452 412.707 315.762 cv
412.807 316.082 412.807 316.442 412.687 316.862 cv
412.567 317.282 412.257 317.602 411.767 317.832 cv
412.207 317.972 412.527 318.172 412.707 318.442 cv
412.887 318.722 412.977 319.052 412.977 319.442 cv
412.977 319.832 412.917 320.142 412.797 320.372 cv
412.677 320.612 412.547 320.802 412.407 320.962 cv
412.267 321.122 412.067 321.242 411.827 321.332 cv
411.577 321.422 411.267 321.462 410.887 321.462 cv
410.507 321.462 410.187 321.422 409.917 321.332 cv
409.637 321.242 409.407 321.102 409.227 320.922 cv
409.047 320.742 408.917 320.522 408.857 320.272 cv
408.787 320.032 408.757 319.752 408.757 319.432 cv
409.557 319.392 mo
409.537 319.712 409.597 319.982 409.717 320.212 cv
409.837 320.452 410.047 320.602 410.357 320.662 cv
410.667 320.732 410.997 320.732 411.337 320.652 cv
411.677 320.572 411.907 320.392 412.037 320.102 cv
412.167 319.822 412.217 319.532 412.177 319.242 cv
412.137 318.962 411.967 318.722 411.687 318.522 cv
411.397 318.322 411.087 318.242 410.747 318.262 cv
410.407 318.292 410.127 318.412 409.907 318.612 cv
409.687 318.822 409.567 319.082 409.557 319.392 cv
409.697 316.352 mo
409.697 316.612 409.787 316.862 409.967 317.092 cv
410.147 317.332 410.437 317.442 410.827 317.442 cv
411.217 317.442 411.507 317.332 411.707 317.092 cv
411.907 316.862 411.997 316.582 411.987 316.252 cv
411.967 315.932 411.847 315.692 411.627 315.532 cv
411.407 315.372 411.107 315.312 410.727 315.332 cv
410.347 315.362 410.087 315.472 409.927 315.662 cv
409.767 315.862 409.697 316.092 409.697 316.352 cv
f
414.817 321.352 mo
415.277 319.372 416.097 317.412 417.277 315.452 cv
413.917 315.452 li
413.917 314.742 li
418.097 314.742 li
418.097 315.412 li
416.867 317.392 416.057 319.372 415.677 321.352 cv
414.817 321.352 li
f
420.207 321.382 mo
419.697 322.432 li
419.307 322.432 li
419.697 321.382 li
419.307 321.382 li
419.307 320.532 li
420.207 320.532 li
420.207 321.382 li
f
426.617 319.862 mo
423.607 319.862 li
423.607 319.202 li
426.767 314.632 li
427.357 314.632 li
427.357 319.202 li
428.287 319.202 li
428.287 319.862 li
427.357 319.862 li
427.357 321.352 li
426.617 321.352 li
426.617 319.862 li
426.617 319.202 mo
426.617 316.112 li
424.427 319.202 li
426.617 319.202 li
f
428.837 317.622 mo
428.857 316.932 428.957 316.382 429.127 315.982 cv
429.297 315.582 429.537 315.242 429.857 314.982 cv
430.167 314.722 430.547 314.592 431.007 314.592 cv
431.457 314.592 431.857 314.782 432.197 315.162 cv
432.537 315.542 432.757 316.012 432.857 316.582 cv
432.957 317.162 432.997 317.822 432.957 318.562 cv
432.917 319.302 432.787 319.912 432.567 320.372 cv
432.347 320.842 432.007 321.162 431.567 321.342 cv
431.127 321.522 430.677 321.502 430.237 321.282 cv
429.797 321.062 429.487 320.772 429.307 320.412 cv
429.127 320.052 428.997 319.662 428.917 319.262 cv
428.837 318.862 428.807 318.312 428.837 317.622 cv
429.657 317.382 mo
429.577 318.102 429.597 318.732 429.737 319.292 cv
429.867 319.852 430.077 320.252 430.377 320.492 cv
430.677 320.732 430.977 320.772 431.297 320.632 cv
431.607 320.492 431.837 320.202 431.977 319.772 cv
432.117 319.342 432.197 318.872 432.197 318.362 cv
432.197 317.862 432.177 317.402 432.137 316.982 cv
432.097 316.562 431.977 316.182 431.787 315.842 cv
431.587 315.502 431.327 315.332 431.007 315.312 cv
430.677 315.302 430.387 315.462 430.147 315.802 cv
429.897 316.142 429.737 316.672 429.657 317.382 cv
f
436.107 318.062 mo
436.107 318.922 435.937 319.692 435.617 320.372 cv
435.287 321.052 434.797 321.692 434.147 322.312 cv
433.717 321.882 li
434.317 321.342 434.767 320.772 435.067 320.162 cv
435.367 319.552 435.517 318.852 435.517 318.062 cv
435.517 317.282 435.367 316.592 435.067 315.982 cv
434.767 315.372 434.317 314.782 433.717 314.202 cv
434.147 313.772 li
434.797 314.422 435.287 315.082 435.617 315.762 cv
435.937 316.442 436.107 317.212 436.107 318.062 cv
f
215.5 327.897 mo
215.02 327.877 214.62 327.857 214.29 327.857 cv
211.98 327.857 li
211.8 328.217 211.58 328.627 211.32 329.067 cv
211.32 333.947 li
211.32 334.467 211.33 335.047 211.36 335.697 cv
210.5 335.697 li
210.52 335.077 210.54 334.497 210.54 333.947 cv
210.54 330.117 li
209.72 331.237 208.63 332.267 207.25 333.207 cv
207.04 332.897 206.85 332.677 206.67 332.547 cv
207.19 332.307 207.88 331.807 208.74 331.037 cv
209.6 330.277 210.39 329.217 211.12 327.857 cv
208.54 327.857 li
208.04 327.857 207.52 327.877 206.98 327.897 cv
206.98 327.117 li
207.76 327.137 208.36 327.147 208.78 327.147 cv
214.25 327.147 li
214.58 327.147 215 327.137 215.5 327.117 cv
215.5 327.897 li
214.68 333.087 mo
214.18 332.467 213.29 331.497 212.02 330.197 cv
212.22 330.017 212.39 329.837 212.53 329.647 cv
213.15 330.227 213.68 330.727 214.12 331.157 cv
214.56 331.587 214.98 332.007 215.38 332.427 cv
215.12 332.637 214.88 332.857 214.68 333.087 cv
f
225.26 327.147 mo
225.2 327.547 225.18 328.037 225.18 328.637 cv
225.18 334.917 li
225.18 335.277 225.05 335.507 224.79 335.597 cv
224.53 335.687 224.11 335.757 223.54 335.817 cv
223.54 335.577 223.43 335.277 223.23 334.917 cv
223.65 334.917 223.95 334.897 224.13 334.857 cv
224.31 334.827 224.4 334.717 224.4 334.537 cv
224.4 327.897 li
217.96 327.897 li
217.96 335.777 li
217.06 335.777 li
217.08 335.407 217.11 334.997 217.14 334.537 cv
217.14 328.637 li
217.14 328.017 217.12 327.517 217.1 327.147 cv
225.26 327.147 li
223 330.867 mo
222.94 331.157 222.92 331.597 222.92 332.187 cv
222.92 332.767 222.94 333.277 223 333.717 cv
219.32 333.717 li
219.34 333.247 219.36 332.717 219.36 332.117 cv
219.36 331.517 219.34 331.107 219.32 330.867 cv
223 330.867 li
222.57 328.987 mo
223.09 328.987 223.46 328.977 223.7 328.947 cv
223.7 329.727 li
223.44 329.707 223.05 329.687 222.53 329.687 cv
219.99 329.687 li
219.36 329.687 218.92 329.707 218.66 329.727 cv
218.66 328.947 li
218.94 328.977 219.4 328.987 220.03 328.987 cv
222.57 328.987 li
222.21 333.047 mo
222.21 331.487 li
220.11 331.487 li
220.11 333.047 li
222.21 333.047 li
f
232.61 329.377 mo
232.53 329.697 232.46 330.127 232.41 330.667 cv
232.35 331.217 232.28 331.807 232.18 332.427 cv
234.01 332.427 li
234.47 332.427 234.97 332.417 235.5 332.387 cv
235.5 333.127 li
234.95 333.107 234.44 333.087 233.97 333.087 cv
231.98 333.087 li
231.74 333.607 231.39 334.067 230.92 334.457 cv
230.45 334.847 229.9 335.147 229.28 335.367 cv
228.66 335.587 228.1 335.757 227.61 335.887 cv
227.5 335.577 227.28 335.327 226.94 335.147 cv
227.69 335.067 228.5 334.857 229.36 334.517 cv
230.22 334.167 230.82 333.687 231.16 333.087 cv
228.39 333.087 li
227.91 333.087 227.39 333.107 226.82 333.127 cv
226.82 332.387 li
227.42 332.417 227.94 332.427 228.39 332.427 cv
231.43 332.427 li
231.51 331.987 231.57 331.507 231.61 330.997 cv
231.65 330.497 231.65 329.877 231.63 329.147 cv
231.94 329.247 232.27 329.327 232.61 329.377 cv
231.24 326.647 mo
231.44 327.067 231.63 327.517 231.79 328.007 cv
235.18 328.007 li
235.15 328.297 235.14 328.587 235.14 328.867 cv
235.14 329.127 235.15 329.417 235.18 329.727 cv
234.29 329.727 li
234.29 328.637 li
228.07 328.637 li
228.07 329.807 li
227.21 329.807 li
227.23 329.497 227.25 329.197 227.25 328.907 cv
227.25 328.597 227.23 328.297 227.21 328.007 cv
230.81 328.007 li
230.73 327.707 230.58 327.337 230.38 326.917 cv
230.58 326.837 230.87 326.747 231.24 326.647 cv
232.41 333.557 mo
232.98 333.877 233.53 334.167 234.05 334.437 cv
234.57 334.717 235.02 334.957 235.42 335.187 cv
235.23 335.387 235.03 335.617 234.83 335.857 cv
234.36 335.517 233.85 335.197 233.31 334.897 cv
232.76 334.607 232.29 334.377 231.9 334.217 cv
232.1 333.957 232.27 333.737 232.41 333.557 cv
228 330.547 mo
228.44 330.767 229.05 331.127 229.83 331.647 cv
229.73 331.807 229.57 332.007 229.36 332.267 cv
228.63 331.727 228.05 331.357 227.61 331.177 cv
227.76 331.017 227.89 330.807 228 330.547 cv
231.08 330.437 mo
230.9 330.647 230.74 330.857 230.61 331.057 cv
229.77 330.457 229.16 330.097 228.78 329.967 cv
228.9 329.787 229.05 329.577 229.21 329.337 cv
231.08 330.437 li
f
239.75 327.467 mo
239.7 327.707 239.66 328.037 239.64 328.477 cv
239.36 331.527 li
240.11 331.527 li
240.08 331.737 240.05 332.087 240.03 332.577 cv
239.87 334.727 li
239.87 335.267 239.71 335.577 239.4 335.657 cv
239.08 335.737 238.65 335.807 238.11 335.887 cv
238.03 335.527 237.93 335.227 237.8 334.997 cv
238.34 334.997 238.7 334.987 238.87 334.977 cv
239.04 334.957 239.15 334.847 239.21 334.617 cv
239.32 332.187 li
237.02 332.187 li
237.04 331.697 237.06 331.157 237.08 330.567 cv
237.09 329.987 237.1 329.427 237.1 328.907 cv
237.88 328.907 li
237.82 329.197 237.78 329.567 237.76 330.027 cv
237.73 330.487 237.72 330.987 237.72 331.527 cv
238.7 331.527 li
238.97 328.087 li
237.92 328.087 li
237.5 328.087 237.09 328.107 236.71 328.127 cv
236.71 327.427 li
237.09 327.457 237.5 327.467 237.92 327.467 cv
239.75 327.467 li
242.92 327.227 mo
243.33 328.007 243.76 328.587 244.2 328.947 cv
244.64 329.317 245.17 329.607 245.77 329.807 cv
245.53 330.017 245.35 330.277 245.22 330.587 cv
244.86 330.387 244.51 330.137 244.17 329.847 cv
244.17 330.507 li
243.83 330.487 243.34 330.467 242.72 330.467 cv
242.1 330.467 241.59 330.487 241.2 330.507 cv
241.2 329.887 li
241.04 330.097 240.82 330.367 240.54 330.707 cv
240.3 330.477 240.05 330.297 239.79 330.157 cv
240.21 329.877 240.53 329.587 240.75 329.297 cv
240.97 329.017 241.16 328.717 241.33 328.407 cv
241.5 328.097 241.64 327.807 241.76 327.547 cv
241.88 327.287 241.98 326.997 242.06 326.687 cv
242.4 326.767 242.75 326.837 243.11 326.917 cv
242.92 327.227 li
244.91 331.487 mo
244.77 331.647 244.67 331.857 244.59 332.137 cv
244.51 332.417 244.39 332.847 244.22 333.427 cv
244.05 334.007 243.92 334.467 243.82 334.807 cv
244.36 334.807 li
244.54 334.807 244.83 334.797 245.22 334.767 cv
245.22 335.467 li
244.88 335.437 244.59 335.427 244.36 335.427 cv
241.36 335.427 li
240.88 335.427 240.54 335.437 240.34 335.467 cv
240.34 334.767 li
240.65 334.797 241 334.807 241.39 334.807 cv
243.15 334.807 li
243.35 334.237 243.52 333.647 243.66 333.047 cv
244.05 331.257 li
244.25 331.337 244.54 331.407 244.91 331.487 cv
244.13 329.807 mo
243.81 329.577 243.53 329.287 243.27 328.947 cv
243.01 328.607 242.75 328.177 242.49 327.657 cv
242.28 328.077 242.09 328.437 241.92 328.737 cv
241.75 329.037 241.52 329.397 241.24 329.807 cv
244.13 329.807 li
241.24 331.447 mo
241.34 331.817 241.45 332.237 241.57 332.697 cv
241.69 333.167 241.8 333.597 241.9 333.987 cv
241.66 334.017 241.44 334.087 241.24 334.187 cv
241.16 333.687 241.07 333.277 240.98 332.937 cv
240.89 332.597 240.77 332.167 240.61 331.647 cv
240.82 331.567 241.03 331.507 241.24 331.447 cv
238.93 333.087 mo
238.9 333.277 238.88 333.497 238.86 333.757 cv
238.46 333.837 238.14 333.897 237.9 333.947 cv
237.65 334.007 237.27 334.107 236.75 334.257 cv
236.67 333.977 236.57 333.687 236.47 333.397 cv
236.83 333.377 237.21 333.347 237.6 333.287 cv
237.99 333.237 238.43 333.167 238.93 333.087 cv
242.88 332.267 mo
242.93 332.607 242.99 333.037 243.07 333.557 cv
242.45 333.717 li
242.34 333.147 242.26 332.707 242.21 332.407 cv
242.16 332.107 242.1 331.767 242.02 331.367 cv
242.25 331.327 242.48 331.287 242.72 331.257 cv
242.88 332.267 li
f
253.23 327.147 mo
253.17 327.287 253.11 327.457 253.03 327.677 cv
252.95 327.897 252.84 328.297 252.68 328.867 cv
254.48 328.867 li
254.74 328.867 255.05 328.857 255.42 328.827 cv
255.42 329.537 li
255.13 329.517 254.91 329.497 254.75 329.497 cv
254.75 329.917 254.67 330.567 254.53 331.467 cv
254.39 332.367 254.14 333.147 253.78 333.797 cv
254.04 334.107 254.33 334.387 254.65 334.627 cv
254.97 334.867 255.28 335.047 255.57 335.147 cv
255.26 335.377 255.05 335.597 254.95 335.817 cv
254.63 335.627 254.35 335.417 254.09 335.187 cv
253.83 334.957 253.57 334.677 253.31 334.337 cv
253.02 334.657 252.71 334.917 252.39 335.137 cv
252.06 335.357 251.65 335.597 251.16 335.857 cv
251.02 335.617 250.84 335.427 250.61 335.307 cv
251 335.147 251.42 334.927 251.86 334.647 cv
252.3 334.367 252.64 334.077 252.88 333.797 cv
252.7 333.437 252.52 333.047 252.35 332.627 cv
252.18 332.207 252.03 331.657 251.9 330.977 cv
251.82 331.197 251.69 331.467 251.51 331.797 cv
251.33 331.697 251.11 331.597 250.85 331.487 cv
251.26 330.767 251.6 329.967 251.86 329.107 cv
252.12 328.247 252.29 327.507 252.37 326.877 cv
252.68 327.017 252.97 327.107 253.23 327.147 cv
249.44 331.327 mo
249.34 331.437 249.22 331.607 249.09 331.837 cv
251.24 331.837 li
251.08 332.497 250.8 333.147 250.42 333.797 cv
250.83 333.957 251.15 334.097 251.39 334.217 cv
251.26 334.407 251.14 334.607 251.04 334.807 cv
250.8 334.657 250.45 334.497 249.99 334.337 cv
249.47 334.897 248.57 335.407 247.29 335.857 cv
247.16 335.567 246.99 335.367 246.79 335.267 cv
248.01 334.987 248.84 334.607 249.29 334.107 cv
248.55 333.927 247.95 333.767 247.49 333.637 cv
247.64 333.407 247.85 333.017 248.11 332.467 cv
247.85 332.467 247.42 332.487 246.82 332.507 cv
246.82 331.797 li
247.32 331.827 247.83 331.837 248.35 331.837 cv
248.45 331.607 248.52 331.347 248.58 331.057 cv
248.86 331.167 249.15 331.257 249.44 331.327 cv
248.93 328.677 mo
248.93 328.057 248.91 327.457 248.89 326.877 cv
249.68 326.877 li
249.65 327.427 249.64 328.027 249.64 328.677 cv
250.52 328.677 251.14 328.667 251.51 328.637 cv
251.51 329.337 li
251.14 329.317 250.52 329.297 249.64 329.297 cv
249.64 330.057 249.65 330.647 249.68 331.057 cv
248.89 331.057 li
248.91 330.697 248.93 330.237 248.93 329.687 cv
248.8 329.907 248.55 330.177 248.19 330.497 cv
247.82 330.817 247.48 331.077 247.18 331.257 cv
247.04 331.017 246.85 330.847 246.59 330.747 cv
246.82 330.667 247.13 330.487 247.52 330.197 cv
247.91 329.917 248.21 329.617 248.43 329.297 cv
247.9 329.297 247.4 329.317 246.94 329.337 cv
246.94 328.637 li
247.38 328.667 248.05 328.677 248.93 328.677 cv
252.37 329.887 mo
252.6 331.427 252.93 332.487 253.35 333.087 cv
253.61 332.487 253.78 331.887 253.87 331.277 cv
253.96 330.667 254.02 330.077 254.05 329.497 cv
252.53 329.497 li
252.37 329.887 li
248.43 333.287 mo
248.73 333.367 249.16 333.467 249.71 333.597 cv
249.92 333.337 250.12 332.967 250.3 332.467 cv
248.86 332.467 li
248.72 332.727 248.58 333.007 248.43 333.287 cv
251.36 327.307 mo
251.22 327.517 251.12 327.717 251.04 327.897 cv
250.96 328.077 250.86 328.297 250.73 328.557 cv
250.52 328.457 250.31 328.377 250.11 328.327 cv
250.31 327.987 250.51 327.557 250.69 327.037 cv
250.95 327.167 251.17 327.257 251.36 327.307 cv
250.18 329.577 mo
250.52 329.917 250.84 330.247 251.16 330.587 cv
251 330.727 250.83 330.877 250.65 331.057 cv
250.29 330.617 249.99 330.267 249.75 330.007 cv
249.91 329.877 250.05 329.737 250.18 329.577 cv
247.61 327.037 mo
247.97 327.397 248.26 327.767 248.5 328.127 cv
247.92 328.477 li
247.73 328.117 247.46 327.787 247.1 327.467 cv
247.33 327.307 247.5 327.167 247.61 327.037 cv
f
265.14 327.387 mo
265.12 327.627 265.11 327.907 265.11 328.247 cv
265.11 328.757 li
265.11 329.227 265.12 329.567 265.14 329.767 cv
261 329.767 li
261 330.937 li
262.8 330.937 li
262.8 330.707 262.78 330.357 262.76 329.887 cv
263.5 329.887 li
263.47 330.307 263.46 330.657 263.46 330.937 cv
264.52 330.937 li
264.98 330.937 265.37 330.927 265.69 330.897 cv
265.69 331.607 li
265.37 331.587 265 331.567 264.56 331.567 cv
263.46 331.567 li
263.46 332.617 li
265.18 332.617 li
265.15 333.117 265.14 333.447 265.14 333.597 cv
265.14 334.577 li
265.14 334.977 265.15 335.367 265.18 335.737 cv
264.48 335.737 li
264.48 335.187 li
261.9 335.187 li
261.9 335.777 li
261.2 335.777 li
261.22 335.487 261.24 335.127 261.24 334.687 cv
261.24 333.557 li
261.24 333.297 261.22 332.987 261.2 332.617 cv
262.8 332.617 li
262.8 331.567 li
260.96 331.567 li
260.94 332.327 260.84 333.037 260.67 333.697 cv
260.5 334.357 260.26 334.977 259.95 335.577 cv
259.71 335.417 259.47 335.307 259.21 335.227 cv
259.52 334.827 259.75 334.387 259.89 333.917 cv
260.03 333.447 260.14 332.947 260.22 332.407 cv
260.3 331.877 260.34 331.327 260.34 330.747 cv
260.34 329.257 li
260.34 328.847 260.32 328.227 260.3 327.387 cv
265.14 327.387 li
258.15 327.937 mo
258.15 327.577 258.13 327.237 258.11 326.917 cv
258.89 326.917 li
258.87 327.207 258.86 327.547 258.86 327.937 cv
258.86 328.947 li
259.12 328.947 259.52 328.937 260.07 328.907 cv
260.07 329.577 li
259.52 329.557 259.12 329.537 258.86 329.537 cv
258.86 331.017 li
259.19 330.837 259.54 330.637 259.91 330.397 cv
259.93 330.607 260 330.797 260.11 330.977 cv
259.61 331.267 259.19 331.517 258.86 331.717 cv
258.86 334.577 li
258.86 335.057 258.73 335.357 258.48 335.457 cv
258.23 335.557 257.86 335.657 257.37 335.737 cv
257.31 335.477 257.22 335.197 257.1 334.917 cv
257.54 334.917 257.82 334.897 257.95 334.857 cv
258.08 334.827 258.15 334.657 258.15 334.337 cv
258.15 332.037 li
257.76 332.247 257.37 332.497 256.98 332.777 cv
256.9 332.577 256.77 332.327 256.59 332.037 cv
257.11 331.857 257.63 331.617 258.15 331.327 cv
258.15 329.537 li
257.65 329.537 257.17 329.557 256.71 329.577 cv
256.71 328.907 li
257.17 328.937 257.65 328.947 258.15 328.947 cv
258.15 327.937 li
264.44 329.187 mo
264.44 327.967 li
261 327.967 li
261 329.187 li
264.44 329.187 li
264.48 334.617 mo
264.48 333.167 li
261.9 333.167 li
261.9 334.617 li
264.48 334.617 li
f
57.6 295.064 mo
54.1 295.064 li
f
57.6 295.064 mo
54.1 295.064 li
@
35.95 294.541 mo
35.97 293.851 36.07 293.301 36.24 292.901 cv
36.41 292.501 36.65 292.161 36.97 291.901 cv
37.28 291.641 37.66 291.511 38.12 291.511 cv
38.57 291.511 38.97 291.701 39.31 292.081 cv
39.65 292.461 39.87 292.931 39.97 293.501 cv
40.07 294.081 40.11 294.741 40.07 295.481 cv
40.03 296.221 39.9 296.831 39.68 297.291 cv
39.46 297.761 39.12 298.081 38.68 298.261 cv
38.24 298.441 37.79 298.421 37.35 298.201 cv
36.91 297.981 36.6 297.691 36.42 297.331 cv
36.24 296.971 36.11 296.581 36.03 296.181 cv
35.95 295.781 35.92 295.231 35.95 294.541 cv
36.77 294.301 mo
36.69 295.021 36.71 295.651 36.85 296.211 cv
36.98 296.771 37.19 297.171 37.49 297.411 cv
37.79 297.651 38.09 297.691 38.41 297.551 cv
38.72 297.411 38.95 297.121 39.09 296.691 cv
39.23 296.261 39.31 295.791 39.31 295.281 cv
39.31 294.781 39.29 294.321 39.25 293.901 cv
39.21 293.481 39.09 293.101 38.9 292.761 cv
38.7 292.421 38.44 292.251 38.12 292.231 cv
37.79 292.221 37.5 292.381 37.26 292.721 cv
37.01 293.061 36.85 293.591 36.77 294.301 cv
f
42.28 298.301 mo
41.38 298.301 li
41.38 297.451 li
42.28 297.451 li
42.28 298.301 li
f
45.95 294.541 mo
45.97 293.851 46.07 293.301 46.24 292.901 cv
46.41 292.501 46.65 292.161 46.97 291.901 cv
47.28 291.641 47.66 291.511 48.12 291.511 cv
48.57 291.511 48.97 291.701 49.31 292.081 cv
49.65 292.461 49.87 292.931 49.97 293.501 cv
50.07 294.081 50.11 294.741 50.07 295.481 cv
50.03 296.221 49.9 296.831 49.68 297.291 cv
49.46 297.761 49.12 298.081 48.68 298.261 cv
48.24 298.441 47.79 298.421 47.35 298.201 cv
46.91 297.981 46.6 297.691 46.42 297.331 cv
46.24 296.971 46.11 296.581 46.03 296.181 cv
45.95 295.781 45.92 295.231 45.95 294.541 cv
46.77 294.301 mo
46.69 295.021 46.71 295.651 46.85 296.211 cv
46.98 296.771 47.19 297.171 47.49 297.411 cv
47.79 297.651 48.09 297.691 48.41 297.551 cv
48.72 297.411 48.95 297.121 49.09 296.691 cv
49.23 296.261 49.31 295.791 49.31 295.281 cv
49.31 294.781 49.29 294.321 49.25 293.901 cv
49.21 293.481 49.09 293.101 48.9 292.761 cv
48.7 292.421 48.44 292.251 48.12 292.231 cv
47.79 292.221 47.5 292.381 47.26 292.721 cv
47.01 293.061 46.85 293.591 46.77 294.301 cv
f
57.6 255.629 mo
54.1 255.629 li
f
57.6 255.629 mo
54.1 255.629 li
@
35.95 255.106 mo
35.97 254.416 36.07 253.866 36.24 253.466 cv
36.41 253.066 36.65 252.726 36.97 252.466 cv
37.28 252.206 37.66 252.076 38.12 252.076 cv
38.57 252.076 38.97 252.266 39.31 252.646 cv
39.65 253.026 39.87 253.496 39.97 254.066 cv
40.07 254.646 40.11 255.306 40.07 256.046 cv
40.03 256.786 39.9 257.396 39.68 257.856 cv
39.46 258.326 39.12 258.646 38.68 258.826 cv
38.24 259.006 37.79 258.986 37.35 258.766 cv
36.91 258.546 36.6 258.256 36.42 257.896 cv
36.24 257.536 36.11 257.146 36.03 256.746 cv
35.95 256.346 35.92 255.796 35.95 255.106 cv
36.77 254.866 mo
36.69 255.586 36.71 256.216 36.85 256.776 cv
36.98 257.336 37.19 257.736 37.49 257.976 cv
37.79 258.216 38.09 258.256 38.41 258.116 cv
38.72 257.976 38.95 257.686 39.09 257.256 cv
39.23 256.826 39.31 256.356 39.31 255.846 cv
39.31 255.346 39.29 254.886 39.25 254.466 cv
39.21 254.046 39.09 253.666 38.9 253.326 cv
38.7 252.986 38.44 252.816 38.12 252.796 cv
37.79 252.786 37.5 252.946 37.26 253.286 cv
37.01 253.626 36.85 254.156 36.77 254.866 cv
f
42.28 258.866 mo
41.38 258.866 li
41.38 258.016 li
42.28 258.016 li
42.28 258.866 li
f
46.46 256.996 mo
46.64 257.696 46.95 258.086 47.39 258.166 cv
47.83 258.246 48.19 258.206 48.47 258.036 cv
48.74 257.866 48.93 257.646 49.05 257.366 cv
49.17 257.096 49.22 256.786 49.21 256.446 cv
49.19 256.106 49.1 255.826 48.94 255.586 cv
48.77 255.356 48.55 255.206 48.29 255.126 cv
48.03 255.046 47.73 255.046 47.41 255.126 cv
47.09 255.206 46.82 255.386 46.62 255.666 cv
45.95 255.586 li
46 255.436 46.25 254.316 46.69 252.226 cv
49.78 252.226 li
49.78 252.936 li
47.28 252.936 li
47.14 253.636 47.01 254.196 46.89 254.616 cv
47.28 254.436 47.64 254.346 47.98 254.356 cv
48.32 254.376 48.64 254.456 48.96 254.596 cv
49.27 254.736 49.5 254.936 49.64 255.176 cv
49.78 255.426 49.89 255.676 49.95 255.926 cv
50.01 256.176 50.04 256.446 50.03 256.726 cv
50.01 257.016 49.95 257.306 49.85 257.606 cv
49.75 257.906 49.59 258.146 49.39 258.346 cv
49.18 258.546 48.93 258.696 48.63 258.816 cv
48.33 258.936 47.98 258.976 47.59 258.946 cv
47.2 258.926 46.83 258.776 46.48 258.516 cv
46.12 258.256 45.88 257.816 45.76 257.186 cv
46.46 256.996 li
f
57.6 216.194 mo
54.1 216.194 li
f
57.6 216.194 mo
54.1 216.194 li
@
37.79 214.002 mo
37.45 214.342 37.02 214.672 36.5 214.982 cv
36.5 214.242 li
37.15 213.802 37.68 213.282 38.1 212.682 cv
38.57 212.682 li
38.57 219.402 li
37.79 219.402 li
37.79 214.002 li
f
42.28 219.432 mo
41.38 219.432 li
41.38 218.582 li
42.28 218.582 li
42.28 219.432 li
f
45.95 215.672 mo
45.97 214.982 46.07 214.432 46.24 214.032 cv
46.41 213.632 46.65 213.292 46.97 213.032 cv
47.28 212.772 47.66 212.642 48.12 212.642 cv
48.57 212.642 48.97 212.832 49.31 213.212 cv
49.65 213.592 49.87 214.062 49.97 214.632 cv
50.07 215.212 50.11 215.872 50.07 216.612 cv
50.03 217.352 49.9 217.962 49.68 218.422 cv
49.46 218.892 49.12 219.212 48.68 219.392 cv
48.24 219.572 47.79 219.552 47.35 219.332 cv
46.91 219.112 46.6 218.822 46.42 218.462 cv
46.24 218.102 46.11 217.712 46.03 217.312 cv
45.95 216.912 45.92 216.362 45.95 215.672 cv
46.77 215.432 mo
46.69 216.152 46.71 216.782 46.85 217.342 cv
46.98 217.902 47.19 218.302 47.49 218.542 cv
47.79 218.782 48.09 218.822 48.41 218.682 cv
48.72 218.542 48.95 218.252 49.09 217.822 cv
49.23 217.392 49.31 216.922 49.31 216.412 cv
49.31 215.912 49.29 215.452 49.25 215.032 cv
49.21 214.612 49.09 214.232 48.9 213.892 cv
48.7 213.552 48.44 213.382 48.12 213.362 cv
47.79 213.352 47.5 213.512 47.26 213.852 cv
47.01 214.192 46.85 214.722 46.77 215.432 cv
f
57.6 176.759 mo
54.1 176.759 li
f
57.6 176.759 mo
54.1 176.759 li
@
37.79 174.567 mo
37.45 174.907 37.02 175.237 36.5 175.547 cv
36.5 174.807 li
37.15 174.367 37.68 173.847 38.1 173.247 cv
38.57 173.247 li
38.57 179.967 li
37.79 179.967 li
37.79 174.567 li
f
42.28 179.997 mo
41.38 179.997 li
41.38 179.147 li
42.28 179.147 li
42.28 179.997 li
f
46.46 178.127 mo
46.64 178.827 46.95 179.217 47.39 179.297 cv
47.83 179.377 48.19 179.337 48.47 179.167 cv
48.74 178.997 48.93 178.777 49.05 178.497 cv
49.17 178.227 49.22 177.917 49.21 177.577 cv
49.19 177.237 49.1 176.957 48.94 176.717 cv
48.77 176.487 48.55 176.337 48.29 176.257 cv
48.03 176.177 47.73 176.177 47.41 176.257 cv
47.09 176.337 46.82 176.517 46.62 176.797 cv
45.95 176.717 li
46 176.567 46.25 175.447 46.69 173.357 cv
49.78 173.357 li
49.78 174.067 li
47.28 174.067 li
47.14 174.767 47.01 175.327 46.89 175.747 cv
47.28 175.567 47.64 175.477 47.98 175.487 cv
48.32 175.507 48.64 175.587 48.96 175.727 cv
49.27 175.867 49.5 176.067 49.64 176.307 cv
49.78 176.557 49.89 176.807 49.95 177.057 cv
50.01 177.307 50.04 177.577 50.03 177.857 cv
50.01 178.147 49.95 178.437 49.85 178.737 cv
49.75 179.037 49.59 179.277 49.39 179.477 cv
49.18 179.677 48.93 179.827 48.63 179.947 cv
48.33 180.067 47.98 180.107 47.59 180.077 cv
47.2 180.057 46.83 179.907 46.48 179.647 cv
46.12 179.387 45.88 178.947 45.76 178.317 cv
46.46 178.127 li
f
57.6 137.324 mo
54.1 137.324 li
f
57.6 137.324 mo
54.1 137.324 li
@
36.07 140.372 mo
36.09 139.982 36.27 139.632 36.61 139.322 cv
36.95 139.012 37.38 138.522 37.9 137.852 cv
38.42 137.192 38.76 136.672 38.92 136.312 cv
39.07 135.952 39.13 135.632 39.09 135.372 cv
39.05 135.112 38.93 134.902 38.72 134.732 cv
38.51 134.562 38.27 134.492 38 134.512 cv
37.72 134.542 37.46 134.652 37.22 134.832 cv
36.97 135.012 36.78 135.282 36.65 135.642 cv
35.91 135.532 li
36.12 134.932 36.39 134.502 36.71 134.222 cv
37.03 133.952 37.42 133.802 37.87 133.772 cv
38.13 133.752 38.36 133.752 38.57 133.792 cv
38.77 133.832 38.99 133.932 39.21 134.072 cv
39.43 134.212 39.62 134.432 39.76 134.712 cv
39.9 134.992 39.96 135.342 39.92 135.742 cv
39.88 136.152 39.67 136.632 39.31 137.192 cv
38.94 137.752 38.24 138.632 37.2 139.822 cv
40.01 139.822 li
40.01 140.532 li
36.07 140.532 li
36.07 140.372 li
f
42.28 140.562 mo
41.38 140.562 li
41.38 139.712 li
42.28 139.712 li
42.28 140.562 li
f
45.95 136.802 mo
45.97 136.112 46.07 135.562 46.24 135.162 cv
46.41 134.762 46.65 134.422 46.97 134.162 cv
47.28 133.902 47.66 133.772 48.12 133.772 cv
48.57 133.772 48.97 133.962 49.31 134.342 cv
49.65 134.722 49.87 135.192 49.97 135.762 cv
50.07 136.342 50.11 137.002 50.07 137.742 cv
50.03 138.482 49.9 139.092 49.68 139.552 cv
49.46 140.022 49.12 140.342 48.68 140.522 cv
48.24 140.702 47.79 140.682 47.35 140.462 cv
46.91 140.242 46.6 139.952 46.42 139.592 cv
46.24 139.232 46.11 138.842 46.03 138.442 cv
45.95 138.042 45.92 137.492 45.95 136.802 cv
46.77 136.562 mo
46.69 137.282 46.71 137.912 46.85 138.472 cv
46.98 139.032 47.19 139.432 47.49 139.672 cv
47.79 139.912 48.09 139.952 48.41 139.812 cv
48.72 139.672 48.95 139.382 49.09 138.952 cv
49.23 138.522 49.31 138.052 49.31 137.542 cv
49.31 137.042 49.29 136.582 49.25 136.162 cv
49.21 135.742 49.09 135.362 48.9 135.022 cv
48.7 134.682 48.44 134.512 48.12 134.492 cv
47.79 134.482 47.5 134.642 47.26 134.982 cv
47.01 135.322 46.85 135.852 46.77 136.562 cv
f
57.6 97.8892 mo
54.1 97.8892 li
f
57.6 97.8892 mo
54.1 97.8892 li
@
36.07 100.937 mo
36.09 100.547 36.27 100.197 36.61 99.8867 cv
36.95 99.5767 37.38 99.0867 37.9 98.4167 cv
38.42 97.7567 38.76 97.2367 38.92 96.8767 cv
39.07 96.5167 39.13 96.1967 39.09 95.9367 cv
39.05 95.6767 38.93 95.4667 38.72 95.2967 cv
38.51 95.1267 38.27 95.0567 38 95.0767 cv
37.72 95.1067 37.46 95.2167 37.22 95.3967 cv
36.97 95.5767 36.78 95.8467 36.65 96.2067 cv
35.91 96.0967 li
36.12 95.4967 36.39 95.0667 36.71 94.7867 cv
37.03 94.5167 37.42 94.3667 37.87 94.3367 cv
38.13 94.3167 38.36 94.3167 38.57 94.3567 cv
38.77 94.3967 38.99 94.4967 39.21 94.6367 cv
39.43 94.7767 39.62 94.9967 39.76 95.2767 cv
39.9 95.5567 39.96 95.9067 39.92 96.3067 cv
39.88 96.7167 39.67 97.1967 39.31 97.7567 cv
38.94 98.3167 38.24 99.1967 37.2 100.387 cv
40.01 100.387 li
40.01 101.097 li
36.07 101.097 li
36.07 100.937 li
f
42.28 101.127 mo
41.38 101.127 li
41.38 100.277 li
42.28 100.277 li
42.28 101.127 li
f
46.46 99.2567 mo
46.64 99.9567 46.95 100.347 47.39 100.427 cv
47.83 100.507 48.19 100.467 48.47 100.297 cv
48.74 100.127 48.93 99.9067 49.05 99.6267 cv
49.17 99.3567 49.22 99.0467 49.21 98.7067 cv
49.19 98.3667 49.1 98.0867 48.94 97.8467 cv
48.77 97.6167 48.55 97.4667 48.29 97.3867 cv
48.03 97.3067 47.73 97.3067 47.41 97.3867 cv
47.09 97.4667 46.82 97.6467 46.62 97.9267 cv
45.95 97.8467 li
46 97.6967 46.25 96.5767 46.69 94.4867 cv
49.78 94.4867 li
49.78 95.1967 li
47.28 95.1967 li
47.14 95.8967 47.01 96.4567 46.89 96.8767 cv
47.28 96.6967 47.64 96.6067 47.98 96.6167 cv
48.32 96.6367 48.64 96.7167 48.96 96.8567 cv
49.27 96.9967 49.5 97.1967 49.64 97.4367 cv
49.78 97.6867 49.89 97.9367 49.95 98.1867 cv
50.01 98.4367 50.04 98.7067 50.03 98.9867 cv
50.01 99.2767 49.95 99.5667 49.85 99.8667 cv
49.75 100.167 49.59 100.407 49.39 100.607 cv
49.18 100.807 48.93 100.957 48.63 101.077 cv
48.33 101.197 47.98 101.237 47.59 101.207 cv
47.2 101.187 46.83 101.037 46.48 100.777 cv
46.12 100.517 45.88 100.077 45.76 99.4467 cv
46.46 99.2567 li
f
57.6 58.4543 mo
54.1 58.4543 li
f
57.6 58.4543 mo
54.1 58.4543 li
@
35.99 59.9818 mo
36.69 59.8618 li
36.79 60.2018 36.96 60.4818 37.2 60.7018 cv
37.43 60.9218 37.72 61.0318 38.08 61.0118 cv
38.43 61.0018 38.71 60.8618 38.92 60.5818 cv
39.12 60.3118 39.21 60.0018 39.19 59.6518 cv
39.16 59.3018 39.02 59.0318 38.78 58.8318 cv
38.53 58.6318 38.13 58.4918 37.59 58.4118 cv
37.59 57.9118 li
38.13 57.8618 38.53 57.7218 38.78 57.4818 cv
39.02 57.2418 39.13 56.9418 39.11 56.5618 cv
39.09 56.1818 38.92 55.9118 38.61 55.7418 cv
38.29 55.5718 37.96 55.5518 37.61 55.6818 cv
37.25 55.8118 36.97 56.1718 36.77 56.7718 cv
36.07 56.6618 li
36.22 56.1918 36.43 55.8018 36.71 55.4818 cv
36.98 55.1718 37.35 54.9918 37.82 54.9418 cv
38.29 54.8918 38.7 54.9518 39.05 55.1218 cv
39.4 55.2918 39.65 55.5518 39.79 55.9018 cv
39.93 56.2518 39.95 56.6318 39.85 57.0518 cv
39.75 57.4718 39.45 57.8318 38.96 58.1418 cv
39.32 58.3018 39.6 58.5318 39.8 58.8418 cv
39.99 59.1618 40.05 59.5718 39.99 60.0818 cv
39.93 60.5918 39.7 61.0018 39.31 61.3118 cv
38.92 61.6218 38.48 61.7718 37.98 61.7518 cv
37.48 61.7418 37.05 61.5918 36.69 61.2918 cv
36.33 60.9918 36.09 60.5618 35.99 59.9818 cv
f
42.28 61.6918 mo
41.38 61.6918 li
41.38 60.8418 li
42.28 60.8418 li
42.28 61.6918 li
f
45.95 57.9318 mo
45.97 57.2418 46.07 56.6918 46.24 56.2918 cv
46.41 55.8918 46.65 55.5518 46.97 55.2918 cv
47.28 55.0318 47.66 54.9018 48.12 54.9018 cv
48.57 54.9018 48.97 55.0918 49.31 55.4718 cv
49.65 55.8518 49.87 56.3218 49.97 56.8918 cv
50.07 57.4718 50.11 58.1318 50.07 58.8718 cv
50.03 59.6118 49.9 60.2218 49.68 60.6818 cv
49.46 61.1518 49.12 61.4718 48.68 61.6518 cv
48.24 61.8318 47.79 61.8118 47.35 61.5918 cv
46.91 61.3718 46.6 61.0818 46.42 60.7218 cv
46.24 60.3618 46.11 59.9718 46.03 59.5718 cv
45.95 59.1718 45.92 58.6218 45.95 57.9318 cv
46.77 57.6918 mo
46.69 58.4118 46.71 59.0418 46.85 59.6018 cv
46.98 60.1618 47.19 60.5618 47.49 60.8018 cv
47.79 61.0418 48.09 61.0818 48.41 60.9418 cv
48.72 60.8018 48.95 60.5118 49.09 60.0818 cv
49.23 59.6518 49.31 59.1818 49.31 58.6718 cv
49.31 58.1718 49.29 57.7118 49.25 57.2918 cv
49.21 56.8718 49.09 56.4918 48.9 56.1518 cv
48.7 55.8118 48.44 55.6418 48.12 55.6218 cv
47.79 55.6118 47.5 55.7718 47.26 56.1118 cv
47.01 56.4518 46.85 56.9818 46.77 57.6918 cv
f
30.65 156.954 mo
31.08 157.384 li
30.46 158.044 29.82 158.534 29.14 158.854 cv
28.46 159.174 27.69 159.334 26.83 159.334 cv
25.98 159.334 25.21 159.174 24.53 158.854 cv
23.85 158.534 23.19 158.044 22.54 157.384 cv
22.97 156.954 li
23.55 157.554 24.14 158.004 24.75 158.304 cv
25.36 158.604 26.05 158.754 26.83 158.754 cv
27.62 158.754 28.32 158.604 28.93 158.304 cv
29.54 158.004 30.11 157.554 30.65 156.954 cv
f
28.28 152.074 mo
28.88 152.074 29.36 152.264 29.71 152.644 cv
30.06 153.024 30.23 153.534 30.23 154.184 cv
30.23 154.834 30.05 155.344 29.69 155.704 cv
29.33 156.074 28.87 156.254 28.32 156.254 cv
28.05 156.254 li
28.05 155.354 li
28.28 155.354 li
28.68 155.354 28.98 155.244 29.18 155.004 cv
29.39 154.774 29.49 154.504 29.49 154.184 cv
29.49 153.764 29.38 153.464 29.16 153.264 cv
28.94 153.074 28.68 152.974 28.36 152.974 cv
28.1 152.974 27.86 153.094 27.64 153.324 cv
27.42 153.564 27.21 153.894 27.03 154.334 cv
26.8 154.964 26.54 155.414 26.25 155.684 cv
25.97 155.964 25.63 156.094 25.23 156.094 cv
24.69 156.094 24.25 155.914 23.91 155.534 cv
23.57 155.154 23.4 154.704 23.4 154.184 cv
23.4 153.504 23.61 153.014 24.01 152.714 cv
24.41 152.414 24.85 152.264 25.31 152.264 cv
25.31 153.164 li
25.03 153.144 24.77 153.224 24.53 153.404 cv
24.3 153.584 24.18 153.844 24.18 154.184 cv
24.18 154.504 24.27 154.744 24.44 154.924 cv
24.61 155.104 24.84 155.194 25.12 155.194 cv
25.36 155.194 25.56 155.124 25.72 154.984 cv
25.89 154.844 26.09 154.474 26.33 153.874 cv
26.57 153.304 26.85 152.864 27.17 152.544 cv
27.49 152.234 27.86 152.074 28.28 152.074 cv
f
26.83 148.984 mo
27.69 148.984 28.46 149.154 29.14 149.474 cv
29.82 149.804 30.46 150.294 31.08 150.944 cv
30.65 151.374 li
30.11 150.774 29.54 150.324 28.93 150.024 cv
28.32 149.724 27.62 149.574 26.83 149.574 cv
26.05 149.574 25.36 149.724 24.75 150.024 cv
24.14 150.324 23.55 150.774 22.97 151.374 cv
22.54 150.944 li
23.19 150.294 23.85 149.804 24.53 149.474 cv
25.21 149.154 25.98 148.984 26.83 148.984 cv
f
28.67 193.714 mo
28.83 195.074 28.94 195.994 29 196.484 cv
29.07 196.984 29.16 197.324 29.26 197.504 cv
28.44 197.894 li
28.34 197.634 28.05 197.364 27.58 197.074 cv
27.11 196.794 26.51 196.564 25.78 196.404 cv
25.78 197.294 25.8 197.974 25.82 198.444 cv
25.08 198.444 li
25.11 197.944 25.12 196.944 25.12 195.434 cv
25.12 193.924 25.11 192.944 25.08 192.504 cv
25.82 192.504 li
25.8 192.944 25.78 193.964 25.78 195.554 cv
26.07 195.634 26.45 195.784 26.92 196.004 cv
27.39 196.224 27.87 196.494 28.36 196.804 cv
28.28 195.844 28.2 194.914 28.12 194.024 cv
27.79 194.214 27.41 194.474 26.99 194.804 cv
26.89 194.604 26.74 194.404 26.56 194.224 cv
27.19 193.724 27.97 193.194 28.9 192.624 cv
29.04 192.864 29.18 193.094 29.33 193.324 cv
29.1 193.454 28.88 193.584 28.67 193.714 cv
30.35 201.094 mo
29.83 200.294 29.52 199.754 29.41 199.494 cv
26.29 199.494 li
26.29 199.964 26.31 200.424 26.33 200.864 cv
25.58 200.864 li
25.61 200.374 25.62 199.894 25.62 199.414 cv
25.62 198.754 li
26.12 198.784 26.52 198.794 26.8 198.794 cv
29.26 198.794 li
29.94 198.254 30.28 197.214 30.29 195.694 cv
30.31 194.174 30.25 192.994 30.12 192.154 cv
30.44 192.334 30.75 192.454 31.04 192.504 cv
31.04 195.044 li
31.04 195.724 31 196.284 30.94 196.744 cv
30.88 197.204 30.79 197.584 30.67 197.894 cv
30.55 198.214 30.39 198.494 30.17 198.754 cv
29.95 199.014 30 199.324 30.31 199.674 cv
30.61 200.024 30.87 200.294 31.08 200.474 cv
30.87 200.654 30.63 200.864 30.35 201.094 cv
23.67 193.164 mo
23.65 193.664 23.63 194.404 23.63 195.394 cv
23.63 196.354 23.65 197.114 23.67 197.654 cv
22.93 197.654 li
22.96 197.194 22.97 196.454 22.97 195.434 cv
22.97 194.414 22.96 193.664 22.93 193.164 cv
23.67 193.164 li
24.45 199.304 mo
23.93 199.614 23.44 200.004 22.97 200.474 cv
22.5 199.924 li
23.23 199.244 23.72 198.834 23.98 198.674 cv
24.45 199.304 li
f
25.51 183.324 mo
25.51 182.834 25.5 182.374 25.47 181.954 cv
26.25 181.954 li
26.23 182.374 26.21 182.824 26.21 183.284 cv
26.21 183.834 li
30.46 183.834 li
30.77 183.814 30.98 183.904 31.1 184.124 cv
31.22 184.344 31.31 184.784 31.39 185.434 cv
31.08 185.494 30.77 185.634 30.46 185.864 cv
30.51 185.424 30.53 185.104 30.52 184.924 cv
30.5 184.744 30.37 184.644 30.12 184.614 cv
26.21 184.614 li
26.21 186.174 li
26.21 186.674 26.23 187.144 26.25 187.584 cv
25.47 187.584 li
25.5 187.114 25.51 186.644 25.51 186.174 cv
25.51 183.324 li
25.04 188.014 mo
25.17 188.254 25.34 188.424 25.55 188.544 cv
25.76 188.664 26.02 188.824 26.33 189.024 cv
29.84 189.024 li
30.18 189.024 30.69 189.014 31.39 188.984 cv
31.39 189.804 li
30.61 189.784 30.04 189.764 29.65 189.764 cv
27.15 189.764 li
27.54 190.004 27.93 190.324 28.32 190.704 cv
28.06 190.884 27.84 191.054 27.65 191.214 cv
27.09 190.614 26.54 190.154 26.02 189.814 cv
25.5 189.474 25 189.174 24.53 188.904 cv
24.69 188.644 24.86 188.354 25.04 188.014 cv
22.85 183.984 mo
22.85 183.544 22.84 183.094 22.81 182.624 cv
23.55 182.624 li
23.53 183.094 23.51 183.574 23.51 184.064 cv
23.51 185.514 li
23.51 186.094 23.53 186.584 23.55 186.994 cv
22.81 186.994 li
22.84 186.584 22.85 186.094 22.85 185.514 cv
22.85 183.984 li
22.65 188.364 mo
22.68 188.574 22.96 188.844 23.5 189.184 cv
24.04 189.524 24.63 189.994 25.27 190.584 cv
25.07 190.744 24.87 190.914 24.69 191.094 cv
24.27 190.684 23.82 190.304 23.34 189.964 cv
22.86 189.624 22.44 189.384 22.07 189.224 cv
22.23 188.964 22.42 188.684 22.65 188.364 cv
f
23.2 177.654 mo
24.14 177.684 25.28 177.694 26.6 177.694 cv
27.93 177.694 28.97 177.684 29.72 177.654 cv
29.72 178.474 li
28.98 178.474 li
28.98 180.044 li
30.27 180.044 li
30.27 180.864 li
29.07 180.844 27.88 180.824 26.68 180.824 cv
25.46 180.824 24.3 180.844 23.2 180.864 cv
23.2 177.654 li
24.37 173.984 mo
23.59 173.984 22.87 174.004 22.19 174.024 cv
22.19 173.164 li
22.87 173.194 23.59 173.204 24.37 173.204 cv
24.37 172.824 24.36 172.404 24.33 171.954 cv
25.08 171.954 li
25.06 172.404 25.04 172.824 25.04 173.204 cv
30.27 173.204 li
30.65 173.204 30.9 173.364 31 173.674 cv
31.1 173.994 31.18 174.394 31.24 174.884 cv
30.92 174.884 30.63 175.034 30.35 175.314 cv
30.39 174.824 30.4 174.484 30.38 174.284 cv
30.36 174.084 30.2 173.984 29.88 173.984 cv
25.04 173.984 li
25.04 175.294 25.06 176.384 25.08 177.264 cv
24.33 177.264 li
24.36 176.434 24.37 175.344 24.37 173.984 cv
28.32 178.474 mo
26.37 178.474 li
26.37 180.044 li
28.32 180.044 li
28.32 178.474 li
25.7 178.474 mo
23.87 178.474 li
23.87 180.044 li
25.7 180.044 li
25.7 178.474 li
26.09 176.054 mo
26.64 175.724 27.23 175.404 27.85 175.084 cv
27.93 175.344 28.05 175.624 28.2 175.904 cv
27.58 176.114 26.99 176.414 26.44 176.804 cv
26.34 176.564 26.23 176.314 26.09 176.054 cv
f
24.8 164.654 mo
25.3 164.684 25.73 164.694 26.09 164.694 cv
28.16 164.694 li
28.5 164.694 28.91 164.684 29.37 164.654 cv
29.37 168.594 li
28.91 168.574 28.49 168.554 28.12 168.554 cv
26.09 168.554 li
25.73 168.554 25.3 168.574 24.8 168.594 cv
24.8 164.654 li
22.73 162.544 mo
23.23 162.574 23.72 162.584 24.22 162.584 cv
29.96 162.584 li
30.55 162.564 30.91 162.724 31.04 163.074 cv
31.17 163.424 31.26 163.804 31.32 164.224 cv
31 164.254 30.69 164.354 30.38 164.534 cv
30.4 164.044 30.38 163.724 30.31 163.584 cv
30.23 163.444 30.06 163.364 29.8 163.364 cv
23.4 163.364 li
23.4 165.704 li
23.4 166.334 23.42 166.924 23.44 167.464 cv
22.69 167.464 li
22.72 166.924 22.73 166.334 22.73 165.704 cv
22.73 162.544 li
31.16 170.744 mo
30.64 170.694 30.1 170.664 29.53 170.664 cv
25.43 170.664 li
24.89 170.664 24.43 170.694 24.06 170.744 cv
24.06 169.844 li
24.46 169.874 24.83 169.884 25.19 169.884 cv
29.57 169.884 li
30.09 169.884 30.62 169.874 31.16 169.844 cv
31.16 170.744 li
28.75 165.434 mo
27.3 165.434 li
27.3 167.814 li
28.75 167.814 li
28.75 165.434 li
26.68 165.434 mo
25.43 165.434 li
25.43 167.814 li
26.68 167.814 li
26.68 165.434 li
22.07 169.224 mo
22.39 168.994 22.88 168.624 23.55 168.124 cv
23.69 168.414 23.83 168.684 23.98 168.944 cv
23.46 169.204 22.97 169.534 22.5 169.924 cv
22.3 169.644 22.15 169.404 22.07 169.224 cv
f
2 lw
2 lc
73.8327 295.033 mo
154.996 294.939 li
236.16 292.889 li
317.324 293.318 li
398.487 273.473 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
gsave
70.3328 298.533 mo
77.3328 298.533 li
77.3328 291.533 li
70.3328 291.533 li
70.3328 298.533 li
clp
70.8327 298.033 mo
76.8327 298.033 li
76.8327 292.033 li
70.8327 292.033 li
cp
f
1 lw
0 lc
0 lj
70.8327 298.033 mo
76.8327 298.033 li
76.8327 292.033 li
70.8327 292.033 li
cp
@
grestore
gsave
151.496 298.439 mo
158.496 298.439 li
158.496 291.439 li
151.496 291.439 li
151.496 298.439 li
clp
151.996 297.939 mo
157.996 297.939 li
157.996 291.939 li
151.996 291.939 li
cp
f
1 lw
0 lc
0 lj
151.996 297.939 mo
157.996 297.939 li
157.996 291.939 li
151.996 291.939 li
cp
@
grestore
gsave
232.66 296.389 mo
239.66 296.389 li
239.66 289.389 li
232.66 289.389 li
232.66 296.389 li
clp
233.16 295.889 mo
239.16 295.889 li
239.16 289.889 li
233.16 289.889 li
cp
f
1 lw
0 lc
0 lj
233.16 295.889 mo
239.16 295.889 li
239.16 289.889 li
233.16 289.889 li
cp
@
grestore
gsave
313.824 296.818 mo
320.824 296.818 li
320.824 289.818 li
313.824 289.818 li
313.824 296.818 li
clp
314.324 296.318 mo
320.324 296.318 li
320.324 290.318 li
314.324 290.318 li
cp
f
1 lw
0 lc
0 lj
314.324 296.318 mo
320.324 296.318 li
320.324 290.318 li
314.324 290.318 li
cp
@
grestore
gsave
394.987 276.972 mo
401.987 276.972 li
401.987 269.972 li
394.987 269.972 li
394.987 276.972 li
clp
395.487 276.473 mo
401.487 276.473 li
401.487 270.473 li
395.487 270.473 li
cp
f
1 lw
0 lc
0 lj
395.487 276.473 mo
401.487 276.473 li
401.487 270.473 li
395.487 270.473 li
cp
@
grestore
0 lc
[7.4 3.2 ] 0 dsh
73.8327 295.064 mo
154.996 294.907 li
236.16 286.29 li
317.324 221.998 li
398.487 53.1439 li
.926818 .245335 1 .155612 cmyk
@
gsave
70.3328 298.564 mo
77.3328 298.564 li
77.3328 291.564 li
70.3328 291.564 li
70.3328 298.564 li
clp
73.8327 298.064 mo
74.6283 298.064 75.3915 297.748 75.954 297.185 cv
76.5166 296.623 76.8327 295.86 76.8327 295.064 cv
76.8327 294.268 76.5166 293.505 75.954 292.943 cv
75.3915 292.38 74.6283 292.064 73.8327 292.064 cv
73.0371 292.064 72.274 292.38 71.7114 292.943 cv
71.1488 293.505 70.8327 294.268 70.8327 295.064 cv
70.8327 295.86 71.1488 296.623 71.7114 297.185 cv
72.274 297.748 73.0371 298.064 73.8327 298.064 cv
cp
f
1 lw
[] 0 dsh
73.8327 298.064 mo
74.6283 298.064 75.3915 297.748 75.954 297.185 cv
76.5166 296.623 76.8327 295.86 76.8327 295.064 cv
76.8327 294.268 76.5166 293.505 75.954 292.943 cv
75.3915 292.38 74.6283 292.064 73.8327 292.064 cv
73.0371 292.064 72.274 292.38 71.7114 292.943 cv
71.1488 293.505 70.8327 294.268 70.8327 295.064 cv
70.8327 295.86 71.1488 296.623 71.7114 297.185 cv
72.274 297.748 73.0371 298.064 73.8327 298.064 cv
cp
@
grestore
gsave
151.496 298.407 mo
158.496 298.407 li
158.496 291.407 li
151.496 291.407 li
151.496 298.407 li
clp
154.996 297.907 mo
155.792 297.907 156.555 297.591 157.118 297.028 cv
157.68 296.466 157.996 295.703 157.996 294.907 cv
157.996 294.111 157.68 293.348 157.118 292.786 cv
156.555 292.223 155.792 291.907 154.996 291.907 cv
154.201 291.907 153.438 292.223 152.875 292.786 cv
152.312 293.348 151.996 294.111 151.996 294.907 cv
151.996 295.703 152.312 296.466 152.875 297.028 cv
153.438 297.591 154.201 297.907 154.996 297.907 cv
cp
f
1 lw
[] 0 dsh
154.996 297.907 mo
155.792 297.907 156.555 297.591 157.118 297.028 cv
157.68 296.466 157.996 295.703 157.996 294.907 cv
157.996 294.111 157.68 293.348 157.118 292.786 cv
156.555 292.223 155.792 291.907 154.996 291.907 cv
154.201 291.907 153.438 292.223 152.875 292.786 cv
152.312 293.348 151.996 294.111 151.996 294.907 cv
151.996 295.703 152.312 296.466 152.875 297.028 cv
153.438 297.591 154.201 297.907 154.996 297.907 cv
cp
@
grestore
gsave
232.66 289.79 mo
239.66 289.79 li
239.66 282.79 li
232.66 282.79 li
232.66 289.79 li
clp
236.16 289.29 mo
236.956 289.29 237.719 288.974 238.281 288.412 cv
238.844 287.849 239.16 287.086 239.16 286.29 cv
239.16 285.495 238.844 284.732 238.281 284.169 cv
237.719 283.607 236.956 283.29 236.16 283.29 cv
235.364 283.29 234.601 283.607 234.039 284.169 cv
233.476 284.732 233.16 285.495 233.16 286.29 cv
233.16 287.086 233.476 287.849 234.039 288.412 cv
234.601 288.974 235.364 289.29 236.16 289.29 cv
cp
f
1 lw
[] 0 dsh
236.16 289.29 mo
236.956 289.29 237.719 288.974 238.281 288.412 cv
238.844 287.849 239.16 287.086 239.16 286.29 cv
239.16 285.495 238.844 284.732 238.281 284.169 cv
237.719 283.607 236.956 283.29 236.16 283.29 cv
235.364 283.29 234.601 283.607 234.039 284.169 cv
233.476 284.732 233.16 285.495 233.16 286.29 cv
233.16 287.086 233.476 287.849 234.039 288.412 cv
234.601 288.974 235.364 289.29 236.16 289.29 cv
cp
@
grestore
gsave
313.824 225.498 mo
320.824 225.498 li
320.824 218.498 li
313.824 218.498 li
313.824 225.498 li
clp
317.324 224.998 mo
318.119 224.998 318.882 224.682 319.445 224.119 cv
320.008 223.557 320.324 222.794 320.324 221.998 cv
320.324 221.202 320.008 220.439 319.445 219.877 cv
318.882 219.314 318.119 218.998 317.324 218.998 cv
316.528 218.998 315.765 219.314 315.202 219.877 cv
314.64 220.439 314.324 221.202 314.324 221.998 cv
314.324 222.794 314.64 223.557 315.202 224.119 cv
315.765 224.682 316.528 224.998 317.324 224.998 cv
cp
f
1 lw
[] 0 dsh
317.324 224.998 mo
318.119 224.998 318.882 224.682 319.445 224.119 cv
320.008 223.557 320.324 222.794 320.324 221.998 cv
320.324 221.202 320.008 220.439 319.445 219.877 cv
318.882 219.314 318.119 218.998 317.324 218.998 cv
316.528 218.998 315.765 219.314 315.202 219.877 cv
314.64 220.439 314.324 221.202 314.324 221.998 cv
314.324 222.794 314.64 223.557 315.202 224.119 cv
315.765 224.682 316.528 224.998 317.324 224.998 cv
cp
@
grestore
gsave
394.987 56.644 mo
401.987 56.644 li
401.987 49.644 li
394.987 49.644 li
394.987 56.644 li
clp
398.487 56.144 mo
399.283 56.144 400.046 55.8279 400.609 55.2653 cv
401.171 54.7027 401.487 53.9396 401.487 53.144 cv
401.487 52.3483 401.171 51.5852 400.609 51.0226 cv
400.046 50.46 399.283 50.144 398.487 50.144 cv
397.692 50.144 396.929 50.46 396.366 51.0226 cv
395.803 51.5852 395.487 52.3483 395.487 53.144 cv
395.487 53.9396 395.803 54.7027 396.366 55.2653 cv
396.929 55.8279 397.692 56.144 398.487 56.144 cv
cp
f
1 lw
[] 0 dsh
398.487 56.144 mo
399.283 56.144 400.046 55.8279 400.609 55.2653 cv
401.171 54.7027 401.487 53.9396 401.487 53.144 cv
401.487 52.3483 401.171 51.5852 400.609 51.0226 cv
400.046 50.46 399.283 50.144 398.487 50.144 cv
397.692 50.144 396.929 50.46 396.366 51.0226 cv
395.803 51.5852 395.487 52.3483 395.487 53.144 cv
395.487 53.9396 395.803 54.7027 396.366 55.2653 cv
396.929 55.8279 397.692 56.144 398.487 56.144 cv
cp
@
grestore
.8 lw
2 lc
0 lj
[] 0 dsh
57.6 307.16 mo
57.6 41.0479 li
1 /0 /CSD get_res sepcs
1 sep
@
414.72 307.16 mo
414.72 41.0479 li
@
57.6 307.16 mo
414.72 307.16 li
@
57.6 41.0479 mo
414.72 41.0479 li
@
146.6 75.048 mo
64.6 75.048 li
64.0101 75.0461 63.6627 74.9039 63.4535 74.6943 cv
63.2441 74.4852 63.1018 74.1377 63.1 73.5479 cv
63.1 48.0479 li
63.1018 47.4581 63.2441 47.1107 63.4535 46.9014 cv
63.6627 46.692 64.0101 46.5497 64.6 46.548 cv
146.6 46.548 li
147.19 46.5497 147.537 46.692 147.746 46.9014 cv
147.956 47.1107 148.098 47.4581 148.1 48.0479 cv
148.1 73.5479 li
148.098 74.1377 147.956 74.4852 147.746 74.6943 cv
147.537 74.9039 147.19 75.0461 146.6 75.048 cv
0 0 0 0 cmyk
f
146.611 76.048 mo
146.607 76.048 146.604 76.048 146.6 76.0479 cv
64.6 76.0479 li
64.5964 76.048 64.5928 76.048 64.5893 76.048 cv
63.8503 76.048 63.2018 75.8565 62.7464 75.4014 cv
62.2893 74.944 62.0982 74.2915 62.1 73.5479 cv
62.1 48.0479 li
62.0982 47.3044 62.2893 46.6519 62.7464 46.1944 cv
63.2018 45.7394 63.8503 45.5479 64.5893 45.5479 cv
64.5929 45.5479 64.5964 45.548 64.6 45.548 cv
146.6 45.548 li
146.604 45.548 146.607 45.5479 146.611 45.5479 cv
147.35 45.5479 147.998 45.7394 148.454 46.1944 cv
148.911 46.6519 149.102 47.3044 149.1 48.0479 cv
149.1 73.5479 li
149.102 74.2915 148.911 74.944 148.454 75.4014 cv
147.998 75.8565 147.35 76.048 146.611 76.048 cv
64.6 75.048 mo
146.6 75.048 li
147.19 75.0461 147.537 74.9039 147.746 74.6943 cv
147.956 74.4852 148.098 74.1377 148.1 73.5479 cv
148.1 48.0479 li
148.098 47.4581 147.956 47.1107 147.746 46.9014 cv
147.537 46.692 147.19 46.5497 146.6 46.548 cv
64.6 46.548 li
64.0101 46.5497 63.6627 46.692 63.4535 46.9014 cv
63.2441 47.1107 63.1018 47.4581 63.1 48.0479 cv
63.1 73.5479 li
63.1018 74.1377 63.2441 74.4852 63.4535 74.6943 cv
63.6627 74.9039 64.0101 75.0461 64.6 75.048 cv
64.6 75.048 li
.159121 .120455 .125338 0 cmyk
f
2 lw
1 lj
66.6 53.5479 mo
86.6 53.5479 li
0 1 1 0 cmyk
@
73.6 56.5479 mo
79.6 56.5479 li
79.6 50.5479 li
73.6 50.5479 li
cp
f
1 lw
0 lc
0 lj
73.6 56.5479 mo
79.6 56.5479 li
79.6 50.5479 li
73.6 50.5479 li
cp
@
99.4 56.8479 mo
98.47 56.8479 li
97.92 54.7779 li
96.2 54.7779 li
95.65 56.8479 li
94.72 56.8479 li
96.67 50.0979 li
97.45 50.0979 li
99.4 56.8479 li
97.73 54.0379 mo
97.1 51.6579 li
97.02 51.6579 li
96.4 54.0379 li
97.73 54.0379 li
1 /0 /CSD get_res sepcs
1 sep
f
104.21 53.4979 mo
104.21 54.1179 104.16 54.6479 104.07 55.0779 cv
103.98 55.5079 103.83 55.8479 103.62 56.1079 cv
103.94 56.6979 li
103.31 57.3479 li
102.96 56.6979 li
102.85 56.7779 102.72 56.8379 102.56 56.8779 cv
102.4 56.9179 102.24 56.9279 102.06 56.9279 cv
101.38 56.9279 100.85 56.6679 100.46 56.1279 cv
100.06 55.5979 99.87 54.7179 99.87 53.4979 cv
99.87 52.2779 100.06 51.3979 100.46 50.8779 cv
100.85 50.3579 101.38 50.0979 102.06 50.0979 cv
102.74 50.0979 103.26 50.3579 103.64 50.8779 cv
104.02 51.3979 104.21 52.2779 104.21 53.4979 cv
103.27 53.4979 mo
103.27 52.3979 103.15 51.6879 102.92 51.3479 cv
102.68 51.0079 102.4 50.8379 102.06 50.8379 cv
101.72 50.8379 101.42 51.0079 101.18 51.3479 cv
100.93 51.6879 100.81 52.3979 100.81 53.4979 cv
100.81 54.5979 100.93 55.3179 101.18 55.6679 cv
101.42 56.0179 101.72 56.1879 102.06 56.1879 cv
102.19 56.1879 102.31 56.1679 102.41 56.1279 cv
102.51 56.0879 102.59 56.0479 102.65 55.9979 cv
102.02 54.7779 li
102.57 54.1179 li
103.12 55.1679 li
103.16 54.9079 103.2 54.6779 103.23 54.4679 cv
103.25 54.2679 103.27 53.9379 103.27 53.4979 cv
f
109.17 50.9179 mo
105.97 50.9179 li
105.97 53.0979 li
108.39 53.0979 li
108.39 53.8479 li
105.97 53.8479 li
105.97 56.8479 li
105.07 56.8479 li
105.07 50.1679 li
109.17 50.1679 li
109.17 50.9179 li
f
114.29 56.8479 mo
113.35 56.8479 li
111.94 53.9579 li
110.93 53.9579 li
110.93 56.8479 li
110.03 56.8479 li
110.03 50.1679 li
111.98 50.1679 li
112.6 50.1679 113.11 50.3179 113.5 50.6179 cv
113.89 50.9179 114.09 51.4079 114.09 52.0879 cv
114.09 52.6079 113.96 53.0179 113.7 53.2979 cv
113.44 53.5879 113.14 53.7679 112.8 53.8479 cv
114.29 56.8479 li
113.19 52.0879 mo
113.19 51.7279 113.08 51.4379 112.86 51.2279 cv
112.64 51.0279 112.28 50.9179 111.79 50.9179 cv
110.93 50.9179 li
110.93 53.2179 li
112.02 53.2179 li
112.33 53.2179 112.6 53.1379 112.84 52.9679 cv
113.07 52.7979 113.19 52.5079 113.19 52.0879 cv
f
119.17 54.6679 mo
119.17 55.3479 118.96 55.8879 118.54 56.3079 cv
118.12 56.7279 117.63 56.9279 117.06 56.9279 cv
116.48 56.9279 115.99 56.7279 115.57 56.3079 cv
115.15 55.8879 114.95 55.3479 114.95 54.6679 cv
114.95 53.9879 115.15 53.4479 115.57 53.0279 cv
115.99 52.6079 116.48 52.3979 117.06 52.3979 cv
117.63 52.3979 118.12 52.6079 118.54 53.0279 cv
118.96 53.4479 119.17 53.9879 119.17 54.6679 cv
118.31 54.6679 mo
118.31 54.1479 118.18 53.7579 117.92 53.4979 cv
117.66 53.2379 117.37 53.0979 117.06 53.0979 cv
116.74 53.0979 116.46 53.2379 116.2 53.4979 cv
115.94 53.7579 115.81 54.1479 115.81 54.6679 cv
115.81 55.1879 115.94 55.5779 116.2 55.8379 cv
116.46 56.0979 116.74 56.2279 117.06 56.2279 cv
117.37 56.2279 117.66 56.0979 117.92 55.8379 cv
118.18 55.5779 118.31 55.1879 118.31 54.6679 cv
f
123.98 56.8479 mo
123.19 56.8479 li
123.19 56.0279 li
122.98 56.3179 122.75 56.5379 122.51 56.6979 cv
122.26 56.8579 121.94 56.9279 121.55 56.9279 cv
121.08 56.9279 120.73 56.7979 120.5 56.5379 cv
120.26 56.2779 120.15 55.9579 120.15 55.5679 cv
120.15 52.4779 li
120.93 52.4779 li
120.93 55.2879 li
120.93 55.6079 121 55.8579 121.16 56.0379 cv
121.32 56.2179 121.53 56.3079 121.79 56.3079 cv
122.13 56.3079 122.44 56.1379 122.74 55.7779 cv
123.04 55.4279 123.19 54.9879 123.19 54.4679 cv
123.19 52.4779 li
123.98 52.4779 li
123.98 56.8479 li
f
128.9 56.7379 mo
128.76 56.7979 128.61 56.8379 128.44 56.8779 cv
128.27 56.9179 128.04 56.9279 127.76 56.9279 cv
127.29 56.9279 126.91 56.7979 126.63 56.5379 cv
126.34 56.2779 126.2 55.9179 126.2 55.4479 cv
126.2 53.0979 li
124.87 53.0979 li
124.87 52.4779 li
126.2 52.4779 li
126.2 50.9579 li
126.98 50.9579 li
126.98 52.4779 li
128.58 52.4779 li
128.58 53.0979 li
126.98 53.0979 li
126.98 55.4879 li
126.98 55.6979 127.03 55.8779 127.14 56.0179 cv
127.24 56.1579 127.44 56.2279 127.73 56.2279 cv
128.01 56.2279 128.24 56.2079 128.42 56.1479 cv
128.6 56.0979 128.76 56.0379 128.9 55.9579 cv
128.9 56.7379 li
f
132.41 51.2279 mo
131.63 51.2279 li
131.63 50.2079 li
132.41 50.2079 li
132.41 51.2279 li
132.41 56.8479 mo
131.63 56.8479 li
131.63 52.4779 li
132.41 52.4779 li
132.41 56.8479 li
f
138.98 56.8479 mo
138.19 56.8479 li
138.19 54.0379 li
138.19 53.7279 138.11 53.4779 137.96 53.2979 cv
137.8 53.1179 137.59 53.0279 137.33 53.0279 cv
136.99 53.0279 136.68 53.2079 136.38 53.5579 cv
136.08 53.9079 135.93 54.3379 135.93 54.8579 cv
135.93 56.8479 li
135.15 56.8479 li
135.15 52.4779 li
135.93 52.4779 li
135.93 53.2979 li
136.13 53.0179 136.36 52.7979 136.61 52.6379 cv
136.85 52.4779 137.17 52.3979 137.57 52.3979 cv
138.03 52.3979 138.38 52.5279 138.62 52.7879 cv
138.86 53.0479 138.98 53.3779 138.98 53.7679 cv
138.98 56.8479 li
f
144.25 53.1379 mo
144.07 53.0979 143.89 53.0679 143.72 53.0479 cv
143.55 53.0379 143.37 53.0579 143.19 53.0979 cv
143.27 53.1779 143.33 53.2779 143.39 53.3979 cv
143.44 53.5179 143.47 53.6879 143.47 53.9179 cv
143.47 54.3679 143.32 54.7379 143.02 55.0179 cv
142.72 55.3079 142.34 55.4479 141.9 55.4479 cv
141.8 55.4479 141.66 55.4279 141.49 55.3879 cv
141.32 55.3479 141.18 55.3079 141.08 55.2479 cv
140.93 55.4079 li
140.89 55.5979 li
140.89 55.7379 140.98 55.8379 141.16 55.8979 cv
141.34 55.9679 141.67 55.9979 142.14 55.9979 cv
142.89 55.9979 143.4 56.1079 143.68 56.3079 cv
143.95 56.5179 144.09 56.7779 144.09 57.0779 cv
144.09 57.4879 143.88 57.7879 143.48 57.9879 cv
143.08 58.1879 142.6 58.2879 142.06 58.2879 cv
141.36 58.2879 140.84 58.1879 140.5 58.0079 cv
140.16 57.8279 139.99 57.5779 139.99 57.2679 cv
139.99 57.1179 140.05 56.9779 140.18 56.8179 cv
140.31 56.6579 140.48 56.5279 140.69 56.4179 cv
140.53 56.3479 140.41 56.2579 140.32 56.1379 cv
140.23 56.0179 140.19 55.8679 140.19 55.6779 cv
140.19 55.5279 140.24 55.3979 140.36 55.2779 cv
140.48 55.1579 140.61 55.0579 140.77 54.9779 cv
140.64 54.8479 140.54 54.6879 140.46 54.5079 cv
140.38 54.3279 140.34 54.1379 140.34 53.9179 cv
140.34 53.4779 140.49 53.1179 140.79 52.8279 cv
141.09 52.5479 141.46 52.3979 141.9 52.3979 cv
142.14 52.3979 142.34 52.4379 142.51 52.4979 cv
142.67 52.5679 142.82 52.6679 142.96 52.7879 cv
143.16 52.6379 143.37 52.5279 143.58 52.4579 cv
143.79 52.3979 144.01 52.3779 144.25 52.3979 cv
144.25 53.1379 li
142.69 53.9179 mo
142.69 53.6579 142.62 53.4579 142.49 53.2979 cv
142.36 53.1479 142.16 53.0679 141.9 53.0679 cv
141.64 53.0679 141.44 53.1479 141.31 53.2979 cv
141.18 53.4579 141.12 53.6579 141.12 53.9179 cv
141.12 54.1879 141.18 54.3979 141.31 54.5479 cv
141.44 54.7079 141.64 54.7779 141.9 54.7779 cv
142.16 54.7779 142.36 54.7079 142.49 54.5479 cv
142.62 54.3979 142.69 54.1879 142.69 53.9179 cv
143.35 57.1579 mo
143.35 57.0579 143.29 56.9579 143.17 56.8579 cv
143.05 56.7579 142.76 56.6979 142.3 56.6979 cv
142.19 56.6979 142.04 56.6979 141.86 56.6779 cv
141.68 56.6679 141.47 56.6479 141.24 56.6179 cv
141.03 56.6979 140.89 56.7979 140.81 56.8979 cv
140.73 56.9979 140.69 57.0979 140.69 57.1979 cv
140.69 57.3479 140.79 57.4779 141 57.5779 cv
141.21 57.6779 141.58 57.7379 142.1 57.7379 cv
142.54 57.7379 142.85 57.6779 143.05 57.5579 cv
143.25 57.4379 143.35 57.3079 143.35 57.1579 cv
f
2 lw
1 lj
[7.4 3.2 ] 0 dsh
66.6 66.7979 mo
86.6 66.7979 li
.926818 .245335 1 .155612 cmyk
@
76.6 69.7979 mo
77.3956 69.7979 78.1587 69.4818 78.7213 68.9193 cv
79.2839 68.3567 79.6 67.5935 79.6 66.7979 cv
79.6 66.0023 79.2839 65.2392 78.7213 64.6766 cv
78.1587 64.114 77.3956 63.7979 76.6 63.7979 cv
75.8044 63.7979 75.0413 64.114 74.4787 64.6766 cv
73.9161 65.2392 73.6 66.0023 73.6 66.7979 cv
73.6 67.5935 73.9161 68.3567 74.4787 68.9193 cv
75.0413 69.4818 75.8044 69.7979 76.6 69.7979 cv
cp
f
1 lw
[] 0 dsh
76.6 69.7979 mo
77.3956 69.7979 78.1587 69.4818 78.7213 68.9193 cv
79.2839 68.3567 79.6 67.5935 79.6 66.7979 cv
79.6 66.0023 79.2839 65.2392 78.7213 64.6766 cv
78.1587 64.114 77.3956 63.7979 76.6 63.7979 cv
75.8044 63.7979 75.0413 64.114 74.4787 64.6766 cv
73.9161 65.2392 73.6 66.0023 73.6 66.7979 cv
73.6 67.5935 73.9161 68.3567 74.4787 68.9193 cv
75.0413 69.4818 75.8044 69.7979 76.6 69.7979 cv
cp
@
99.21 68.1079 mo
99.21 68.8679 99 69.3979 98.58 69.6779 cv
98.16 69.9579 97.63 70.0979 96.98 70.0979 cv
95.03 70.0979 li
95.03 63.4179 li
97.06 63.4179 li
97.71 63.4179 98.2 63.5879 98.52 63.9279 cv
98.84 64.2679 99.01 64.6779 99.01 65.1379 cv
99.01 65.6179 98.9 65.9579 98.68 66.1779 cv
98.46 66.3979 98.23 66.5479 98 66.6279 cv
98.31 66.7079 98.59 66.8779 98.84 67.1179 cv
99.08 67.3679 99.21 67.6979 99.21 68.1079 cv
98.12 65.1379 mo
98.12 64.8079 98.02 64.5679 97.82 64.4079 cv
97.62 64.2479 97.38 64.1679 97.1 64.1679 cv
95.93 64.1679 li
95.93 66.2379 li
97.06 66.2379 li
97.34 66.2379 97.59 66.1579 97.8 65.9879 cv
98.01 65.8179 98.12 65.5379 98.12 65.1379 cv
98.27 68.1079 mo
98.27 67.6979 98.13 67.4079 97.86 67.2379 cv
97.58 67.0679 97.28 66.9779 96.94 66.9779 cv
95.93 66.9779 li
95.93 69.3579 li
96.83 69.3579 li
97.29 69.3579 97.65 69.2679 97.9 69.0879 cv
98.14 68.9079 98.27 68.5879 98.27 68.1079 cv
1 /0 /CSD get_res sepcs
1 sep
f
104.17 64.1679 mo
100.97 64.1679 li
100.97 66.3479 li
103.39 66.3479 li
103.39 67.0979 li
100.97 67.0979 li
100.97 70.0979 li
100.07 70.0979 li
100.07 63.4179 li
104.17 63.4179 li
104.17 64.1679 li
f
109.13 68.2279 mo
109.13 68.8279 108.94 69.3079 108.56 69.6579 cv
108.18 70.0079 107.67 70.1779 107.02 70.1779 cv
106.37 70.1779 105.86 69.9979 105.5 69.6379 cv
105.13 69.2779 104.95 68.8179 104.95 68.2679 cv
104.95 67.9979 li
105.85 67.9979 li
105.85 68.2279 li
105.85 68.6279 105.96 68.9279 106.2 69.1279 cv
106.43 69.3379 106.7 69.4379 107.02 69.4379 cv
107.44 69.4379 107.74 69.3279 107.94 69.1079 cv
108.13 68.8879 108.23 68.6279 108.23 68.3079 cv
108.23 68.0479 108.11 67.8079 107.88 67.5879 cv
107.64 67.3679 107.31 67.1579 106.87 66.9779 cv
106.24 66.7479 105.79 66.4879 105.52 66.1979 cv
105.24 65.9179 105.11 65.5779 105.11 65.1779 cv
105.11 64.6379 105.29 64.1979 105.67 63.8579 cv
106.05 63.5179 106.5 63.3479 107.02 63.3479 cv
107.7 63.3479 108.19 63.5579 108.49 63.9579 cv
108.79 64.3579 108.94 64.7979 108.94 65.2579 cv
108.04 65.2579 li
108.06 64.9779 107.98 64.7179 107.8 64.4779 cv
107.62 64.2479 107.36 64.1279 107.02 64.1279 cv
106.7 64.1279 106.46 64.2179 106.28 64.3879 cv
106.1 64.5579 106.01 64.7879 106.01 65.0679 cv
106.01 65.3079 106.08 65.5079 106.22 65.6679 cv
106.36 65.8379 106.73 66.0379 107.33 66.2779 cv
107.9 66.5179 108.34 66.7979 108.66 67.1179 cv
108.97 67.4379 109.13 67.8079 109.13 68.2279 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
