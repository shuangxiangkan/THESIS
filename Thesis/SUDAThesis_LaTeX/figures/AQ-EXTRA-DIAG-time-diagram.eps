%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: AQ-EXTRA-DIAG-time-diagram.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: Kansx
%%CreationDate: 2021/1/11, 17:20:22
%%BoundingBox: 0 0 460 346
%%HiResBoundingBox: 0 0 459.6637 345.1719
%%CropBox: 0 0 459.6637 345.1719
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 571 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2021-01-11T17:18:15+08:00"
   xmp:CreatorTool="matplotlib 3.0.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend 3.0.2"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -345.172 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 345.172 li
459.664 345.172 li
459.664 0 li
cp
clp
gsave
-.424042 345.176 mo
460.576 345.176 li
460.576 -.824118 li
-.424042 -.824118 li
-.424042 345.176 li
clp
-.424042 345.176 mo
460.376 345.176 li
460.376 -.424119 li
-.424042 -.424119 li
-.424042 345.176 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
57.1759 307.16 mo
414.296 307.16 li
414.296 41.0479 li
57.1759 41.0479 li
57.1759 307.16 li
f
73.4087 307.16 mo
73.4087 310.66 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
73.4087 307.16 mo
73.4087 310.66 li
@
62.9387 321.382 mo
58.9587 321.382 li
58.9587 314.702 li
62.7487 314.702 li
62.7487 315.452 li
59.8587 315.452 li
59.8587 317.522 li
62.5087 317.522 li
62.5087 318.262 li
59.8587 318.262 li
59.8587 320.642 li
62.9387 320.642 li
62.9387 321.382 li
f
68.0587 321.882 mo
67.6287 322.312 li
66.9687 321.692 66.4787 321.052 66.1587 320.372 cv
65.8387 319.692 65.6787 318.922 65.6787 318.062 cv
65.6787 317.212 65.8387 316.442 66.1587 315.762 cv
66.4787 315.082 66.9687 314.422 67.6287 313.772 cv
68.0587 314.202 li
67.4587 314.782 67.0087 315.372 66.7087 315.982 cv
66.4087 316.592 66.2587 317.282 66.2587 318.062 cv
66.2587 318.852 66.4087 319.552 66.7087 320.162 cv
67.0087 320.772 67.4587 321.342 68.0587 321.882 cv
f
68.7987 319.672 mo
69.4987 319.552 li
69.5987 319.892 69.7687 320.172 70.0087 320.392 cv
70.2387 320.612 70.5287 320.722 70.8887 320.702 cv
71.2387 320.692 71.5187 320.552 71.7287 320.272 cv
71.9287 320.002 72.0187 319.692 71.9987 319.342 cv
71.9687 318.992 71.8287 318.722 71.5887 318.522 cv
71.3387 318.322 70.9387 318.182 70.3987 318.102 cv
70.3987 317.602 li
70.9387 317.552 71.3387 317.412 71.5887 317.172 cv
71.8287 316.932 71.9387 316.632 71.9187 316.252 cv
71.8987 315.872 71.7287 315.602 71.4187 315.432 cv
71.0987 315.262 70.7687 315.242 70.4187 315.372 cv
70.0587 315.502 69.7787 315.862 69.5787 316.462 cv
68.8787 316.352 li
69.0287 315.882 69.2387 315.492 69.5187 315.172 cv
69.7887 314.862 70.1587 314.682 70.6287 314.632 cv
71.0987 314.582 71.5087 314.642 71.8587 314.812 cv
72.2087 314.982 72.4587 315.242 72.5987 315.592 cv
72.7387 315.942 72.7587 316.322 72.6587 316.742 cv
72.5587 317.162 72.2587 317.522 71.7687 317.832 cv
72.1287 317.992 72.4087 318.222 72.6087 318.532 cv
72.7987 318.852 72.8587 319.262 72.7987 319.772 cv
72.7387 320.282 72.5087 320.692 72.1187 321.002 cv
71.7287 321.312 71.2887 321.462 70.7887 321.442 cv
70.2887 321.432 69.8587 321.282 69.4987 320.982 cv
69.1387 320.682 68.8987 320.252 68.7987 319.672 cv
f
75.1287 321.382 mo
74.6187 322.432 li
74.2287 322.432 li
74.6187 321.382 li
74.2287 321.382 li
74.2287 320.532 li
75.1287 320.532 li
75.1287 321.382 li
f
78.7987 319.672 mo
79.4987 319.552 li
79.5987 319.892 79.7687 320.172 80.0087 320.392 cv
80.2387 320.612 80.5287 320.722 80.8887 320.702 cv
81.2387 320.692 81.5187 320.552 81.7287 320.272 cv
81.9287 320.002 82.0187 319.692 81.9987 319.342 cv
81.9687 318.992 81.8287 318.722 81.5887 318.522 cv
81.3387 318.322 80.9387 318.182 80.3987 318.102 cv
80.3987 317.602 li
80.9387 317.552 81.3387 317.412 81.5887 317.172 cv
81.8287 316.932 81.9387 316.632 81.9187 316.252 cv
81.8987 315.872 81.7287 315.602 81.4187 315.432 cv
81.0987 315.262 80.7687 315.242 80.4187 315.372 cv
80.0587 315.502 79.7787 315.862 79.5787 316.462 cv
78.8787 316.352 li
79.0287 315.882 79.2387 315.492 79.5187 315.172 cv
79.7887 314.862 80.1587 314.682 80.6287 314.632 cv
81.0987 314.582 81.5087 314.642 81.8587 314.812 cv
82.2087 314.982 82.4587 315.242 82.5987 315.592 cv
82.7387 315.942 82.7587 316.322 82.6587 316.742 cv
82.5587 317.162 82.2587 317.522 81.7687 317.832 cv
82.1287 317.992 82.4087 318.222 82.6087 318.532 cv
82.7987 318.852 82.8587 319.262 82.7987 319.772 cv
82.7387 320.282 82.5087 320.692 82.1187 321.002 cv
81.7287 321.312 81.2887 321.462 80.7887 321.442 cv
80.2887 321.432 79.8587 321.282 79.4987 320.982 cv
79.1387 320.682 78.8987 320.252 78.7987 319.672 cv
f
86.0287 318.062 mo
86.0287 318.922 85.8587 319.692 85.5387 320.372 cv
85.2087 321.052 84.7187 321.692 84.0687 322.312 cv
83.6387 321.882 li
84.2387 321.342 84.6887 320.772 84.9887 320.162 cv
85.2887 319.552 85.4387 318.852 85.4387 318.062 cv
85.4387 317.282 85.2887 316.592 84.9887 315.982 cv
84.6887 315.372 84.2387 314.782 83.6387 314.202 cv
84.0687 313.772 li
84.7187 314.422 85.2087 315.082 85.5387 315.762 cv
85.8587 316.442 86.0287 317.212 86.0287 318.062 cv
f
154.572 307.16 mo
154.572 310.66 li
f
154.572 307.16 mo
154.572 310.66 li
@
141.602 321.382 mo
137.622 321.382 li
137.622 314.702 li
141.412 314.702 li
141.412 315.452 li
138.522 315.452 li
138.522 317.522 li
141.172 317.522 li
141.172 318.262 li
138.522 318.262 li
138.522 320.642 li
141.602 320.642 li
141.602 321.382 li
f
146.722 321.882 mo
146.292 322.312 li
145.632 321.692 145.142 321.052 144.822 320.372 cv
144.502 319.692 144.342 318.922 144.342 318.062 cv
144.342 317.212 144.502 316.442 144.822 315.762 cv
145.142 315.082 145.632 314.422 146.292 313.772 cv
146.722 314.202 li
146.122 314.782 145.672 315.372 145.372 315.982 cv
145.072 316.592 144.922 317.282 144.922 318.062 cv
144.922 318.852 145.072 319.552 145.372 320.162 cv
145.672 320.772 146.122 321.342 146.722 321.882 cv
f
147.932 319.512 mo
148.112 320.212 148.422 320.602 148.862 320.682 cv
149.302 320.762 149.662 320.722 149.942 320.552 cv
150.212 320.382 150.402 320.162 150.522 319.882 cv
150.642 319.612 150.692 319.302 150.682 318.962 cv
150.662 318.622 150.572 318.342 150.412 318.102 cv
150.242 317.872 150.022 317.722 149.762 317.642 cv
149.502 317.562 149.202 317.562 148.882 317.642 cv
148.562 317.722 148.292 317.902 148.092 318.182 cv
147.422 318.102 li
147.472 317.952 147.722 316.832 148.162 314.742 cv
151.252 314.742 li
151.252 315.452 li
148.752 315.452 li
148.612 316.152 148.482 316.712 148.362 317.132 cv
148.752 316.952 149.112 316.862 149.452 316.872 cv
149.792 316.892 150.112 316.972 150.432 317.112 cv
150.742 317.252 150.972 317.452 151.112 317.692 cv
151.252 317.942 151.362 318.192 151.422 318.442 cv
151.482 318.692 151.512 318.962 151.502 319.242 cv
151.482 319.532 151.422 319.822 151.322 320.122 cv
151.222 320.422 151.062 320.662 150.862 320.862 cv
150.652 321.062 150.402 321.212 150.102 321.332 cv
149.802 321.452 149.452 321.492 149.062 321.462 cv
148.672 321.442 148.302 321.292 147.952 321.032 cv
147.592 320.772 147.352 320.332 147.232 319.702 cv
147.932 319.512 li
f
153.792 321.382 mo
153.282 322.432 li
152.892 322.432 li
153.282 321.382 li
152.892 321.382 li
152.892 320.532 li
153.792 320.532 li
153.792 321.382 li
f
159.262 315.952 mo
158.922 316.292 158.492 316.622 157.972 316.932 cv
157.972 316.192 li
158.622 315.752 159.152 315.232 159.572 314.632 cv
160.042 314.632 li
160.042 321.352 li
159.262 321.352 li
159.262 315.952 li
f
162.932 319.512 mo
163.112 320.212 163.422 320.602 163.862 320.682 cv
164.302 320.762 164.662 320.722 164.942 320.552 cv
165.212 320.382 165.402 320.162 165.522 319.882 cv
165.642 319.612 165.692 319.302 165.682 318.962 cv
165.662 318.622 165.572 318.342 165.412 318.102 cv
165.242 317.872 165.022 317.722 164.762 317.642 cv
164.502 317.562 164.202 317.562 163.882 317.642 cv
163.562 317.722 163.292 317.902 163.092 318.182 cv
162.422 318.102 li
162.472 317.952 162.722 316.832 163.162 314.742 cv
166.252 314.742 li
166.252 315.452 li
163.752 315.452 li
163.612 316.152 163.482 316.712 163.362 317.132 cv
163.752 316.952 164.112 316.862 164.452 316.872 cv
164.792 316.892 165.112 316.972 165.432 317.112 cv
165.742 317.252 165.972 317.452 166.112 317.692 cv
166.252 317.942 166.362 318.192 166.422 318.442 cv
166.482 318.692 166.512 318.962 166.502 319.242 cv
166.482 319.532 166.422 319.822 166.322 320.122 cv
166.222 320.422 166.062 320.662 165.862 320.862 cv
165.652 321.062 165.402 321.212 165.102 321.332 cv
164.802 321.452 164.452 321.492 164.062 321.462 cv
163.672 321.442 163.302 321.292 162.952 321.032 cv
162.592 320.772 162.352 320.332 162.232 319.702 cv
162.932 319.512 li
f
169.692 318.062 mo
169.692 318.922 169.522 319.692 169.202 320.372 cv
168.872 321.052 168.382 321.692 167.732 322.312 cv
167.302 321.882 li
167.902 321.342 168.352 320.772 168.652 320.162 cv
168.952 319.552 169.102 318.852 169.102 318.062 cv
169.102 317.282 168.952 316.592 168.652 315.982 cv
168.352 315.372 167.902 314.782 167.302 314.202 cv
167.732 313.772 li
168.382 314.422 168.872 315.082 169.202 315.762 cv
169.522 316.442 169.692 317.212 169.692 318.062 cv
f
235.736 307.16 mo
235.736 310.66 li
f
235.736 307.16 mo
235.736 310.66 li
@
222.766 321.382 mo
218.786 321.382 li
218.786 314.702 li
222.576 314.702 li
222.576 315.452 li
219.686 315.452 li
219.686 317.522 li
222.336 317.522 li
222.336 318.262 li
219.686 318.262 li
219.686 320.642 li
222.766 320.642 li
222.766 321.382 li
f
227.886 321.882 mo
227.456 322.312 li
226.796 321.692 226.306 321.052 225.986 320.372 cv
225.666 319.692 225.506 318.922 225.506 318.062 cv
225.506 317.212 225.666 316.442 225.986 315.762 cv
226.306 315.082 226.796 314.422 227.456 313.772 cv
227.886 314.202 li
227.286 314.782 226.836 315.372 226.536 315.982 cv
226.236 316.592 226.086 317.282 226.086 318.062 cv
226.086 318.852 226.236 319.552 226.536 320.162 cv
226.836 320.772 227.286 321.342 227.886 321.882 cv
f
229.566 321.352 mo
230.026 319.372 230.846 317.412 232.026 315.452 cv
228.666 315.452 li
228.666 314.742 li
232.846 314.742 li
232.846 315.412 li
231.616 317.392 230.806 319.372 230.426 321.352 cv
229.566 321.352 li
f
234.956 321.382 mo
234.446 322.432 li
234.056 322.432 li
234.446 321.382 li
234.056 321.382 li
234.056 320.532 li
234.956 320.532 li
234.956 321.382 li
f
238.706 321.192 mo
238.726 320.802 238.906 320.452 239.246 320.142 cv
239.586 319.832 240.016 319.342 240.536 318.672 cv
241.056 318.012 241.396 317.492 241.556 317.132 cv
241.706 316.772 241.766 316.452 241.726 316.192 cv
241.686 315.932 241.566 315.722 241.356 315.552 cv
241.146 315.382 240.906 315.312 240.636 315.332 cv
240.356 315.362 240.096 315.472 239.856 315.652 cv
239.606 315.832 239.416 316.102 239.286 316.462 cv
238.546 316.352 li
238.756 315.752 239.026 315.322 239.346 315.042 cv
239.666 314.772 240.056 314.622 240.506 314.592 cv
240.766 314.572 240.996 314.572 241.206 314.612 cv
241.406 314.652 241.626 314.752 241.846 314.892 cv
242.066 315.032 242.256 315.252 242.396 315.532 cv
242.536 315.812 242.596 316.162 242.556 316.562 cv
242.516 316.972 242.306 317.452 241.946 318.012 cv
241.576 318.572 240.876 319.452 239.836 320.642 cv
242.646 320.642 li
242.646 321.352 li
238.706 321.352 li
238.706 321.192 li
f
244.566 321.352 mo
245.026 319.372 245.846 317.412 247.026 315.452 cv
243.666 315.452 li
243.666 314.742 li
247.846 314.742 li
247.846 315.412 li
246.616 317.392 245.806 319.372 245.426 321.352 cv
244.566 321.352 li
f
250.856 318.062 mo
250.856 318.922 250.686 319.692 250.366 320.372 cv
250.036 321.052 249.546 321.692 248.896 322.312 cv
248.466 321.882 li
249.066 321.342 249.516 320.772 249.816 320.162 cv
250.116 319.552 250.266 318.852 250.266 318.062 cv
250.266 317.282 250.116 316.592 249.816 315.982 cv
249.516 315.372 249.066 314.782 248.466 314.202 cv
248.896 313.772 li
249.546 314.422 250.036 315.082 250.366 315.762 cv
250.686 316.442 250.856 317.212 250.856 318.062 cv
f
316.9 307.16 mo
316.9 310.66 li
f
316.9 307.16 mo
316.9 310.66 li
@
303.93 321.382 mo
299.95 321.382 li
299.95 314.702 li
303.74 314.702 li
303.74 315.452 li
300.85 315.452 li
300.85 317.522 li
303.5 317.522 li
303.5 318.262 li
300.85 318.262 li
300.85 320.642 li
303.93 320.642 li
303.93 321.382 li
f
309.05 321.882 mo
308.62 322.312 li
307.96 321.692 307.47 321.052 307.15 320.372 cv
306.83 319.692 306.67 318.922 306.67 318.062 cv
306.67 317.212 306.83 316.442 307.15 315.762 cv
307.47 315.082 307.96 314.422 308.62 313.772 cv
309.05 314.202 li
308.45 314.782 308 315.372 307.7 315.982 cv
307.4 316.592 307.25 317.282 307.25 318.062 cv
307.25 318.852 307.4 319.552 307.7 320.162 cv
308 320.772 308.45 321.342 309.05 321.882 cv
f
310.65 321.462 mo
311.22 320.502 311.69 319.632 312.06 318.852 cv
311.4 318.952 310.86 318.872 310.43 318.592 cv
310 318.322 309.74 317.952 309.65 317.482 cv
309.56 317.022 309.57 316.592 309.67 316.212 cv
309.77 315.832 309.94 315.522 310.16 315.272 cv
310.38 315.032 310.64 314.852 310.96 314.752 cv
311.27 314.652 311.55 314.592 311.8 314.592 cv
312.04 314.592 312.3 314.652 312.56 314.752 cv
312.82 314.852 313.05 315.012 313.26 315.222 cv
313.47 315.432 313.61 315.642 313.69 315.862 cv
313.77 316.082 313.81 316.372 313.81 316.722 cv
313.81 317.072 313.68 317.522 313.42 318.062 cv
313.16 318.612 312.52 319.742 311.51 321.462 cv
310.65 321.462 li
310.43 317.092 mo
310.47 317.432 310.61 317.712 310.86 317.932 cv
311.11 318.152 311.38 318.252 311.67 318.222 cv
311.95 318.202 312.18 318.122 312.35 317.992 cv
312.51 317.862 312.68 317.642 312.84 317.322 cv
312.94 316.942 312.96 316.612 312.91 316.332 cv
312.86 316.062 312.72 315.832 312.5 315.652 cv
312.28 315.472 312.04 315.372 311.78 315.372 cv
311.62 315.352 311.42 315.392 311.18 315.492 cv
310.93 315.592 310.73 315.802 310.59 316.112 cv
310.45 316.432 310.39 316.752 310.43 317.092 cv
f
316.12 321.382 mo
315.61 322.432 li
315.22 322.432 li
315.61 321.382 li
315.22 321.382 li
315.22 320.532 li
316.12 320.532 li
316.12 321.382 li
f
319.79 319.672 mo
320.49 319.552 li
320.59 319.892 320.76 320.172 321 320.392 cv
321.23 320.612 321.52 320.722 321.88 320.702 cv
322.23 320.692 322.51 320.552 322.72 320.272 cv
322.92 320.002 323.01 319.692 322.99 319.342 cv
322.96 318.992 322.82 318.722 322.58 318.522 cv
322.33 318.322 321.93 318.182 321.39 318.102 cv
321.39 317.602 li
321.93 317.552 322.33 317.412 322.58 317.172 cv
322.82 316.932 322.93 316.632 322.91 316.252 cv
322.89 315.872 322.72 315.602 322.41 315.432 cv
322.09 315.262 321.76 315.242 321.41 315.372 cv
321.05 315.502 320.77 315.862 320.57 316.462 cv
319.87 316.352 li
320.02 315.882 320.23 315.492 320.51 315.172 cv
320.78 314.862 321.15 314.682 321.62 314.632 cv
322.09 314.582 322.5 314.642 322.85 314.812 cv
323.2 314.982 323.45 315.242 323.59 315.592 cv
323.73 315.942 323.75 316.322 323.65 316.742 cv
323.55 317.162 323.25 317.522 322.76 317.832 cv
323.12 317.992 323.4 318.222 323.6 318.532 cv
323.79 318.852 323.85 319.262 323.79 319.772 cv
323.73 320.282 323.5 320.692 323.11 321.002 cv
322.72 321.312 322.28 321.462 321.78 321.442 cv
321.28 321.432 320.85 321.282 320.49 320.982 cv
320.13 320.682 319.89 320.252 319.79 319.672 cv
f
325.65 321.462 mo
326.22 320.502 326.69 319.632 327.06 318.852 cv
326.4 318.952 325.86 318.872 325.43 318.592 cv
325 318.322 324.74 317.952 324.65 317.482 cv
324.56 317.022 324.57 316.592 324.67 316.212 cv
324.77 315.832 324.94 315.522 325.16 315.272 cv
325.38 315.032 325.64 314.852 325.96 314.752 cv
326.27 314.652 326.55 314.592 326.8 314.592 cv
327.04 314.592 327.3 314.652 327.56 314.752 cv
327.82 314.852 328.05 315.012 328.26 315.222 cv
328.47 315.432 328.61 315.642 328.69 315.862 cv
328.77 316.082 328.81 316.372 328.81 316.722 cv
328.81 317.072 328.68 317.522 328.42 318.062 cv
328.16 318.612 327.52 319.742 326.51 321.462 cv
325.65 321.462 li
325.43 317.092 mo
325.47 317.432 325.61 317.712 325.86 317.932 cv
326.11 318.152 326.38 318.252 326.67 318.222 cv
326.95 318.202 327.18 318.122 327.35 317.992 cv
327.51 317.862 327.68 317.642 327.84 317.322 cv
327.94 316.942 327.96 316.612 327.91 316.332 cv
327.86 316.062 327.72 315.832 327.5 315.652 cv
327.28 315.472 327.04 315.372 326.78 315.372 cv
326.62 315.352 326.42 315.392 326.18 315.492 cv
325.93 315.592 325.73 315.802 325.59 316.112 cv
325.45 316.432 325.39 316.752 325.43 317.092 cv
f
332.02 318.062 mo
332.02 318.922 331.85 319.692 331.53 320.372 cv
331.2 321.052 330.71 321.692 330.06 322.312 cv
329.63 321.882 li
330.23 321.342 330.68 320.772 330.98 320.162 cv
331.28 319.552 331.43 318.852 331.43 318.062 cv
331.43 317.282 331.28 316.592 330.98 315.982 cv
330.68 315.372 330.23 314.782 329.63 314.202 cv
330.06 313.772 li
330.71 314.422 331.2 315.082 331.53 315.762 cv
331.85 316.442 332.02 317.212 332.02 318.062 cv
f
398.063 307.16 mo
398.063 310.66 li
f
398.063 307.16 mo
398.063 310.66 li
@
382.593 321.382 mo
378.613 321.382 li
378.613 314.702 li
382.403 314.702 li
382.403 315.452 li
379.513 315.452 li
379.513 317.522 li
382.163 317.522 li
382.163 318.262 li
379.513 318.262 li
379.513 320.642 li
382.593 320.642 li
382.593 321.382 li
f
387.713 321.882 mo
387.283 322.312 li
386.623 321.692 386.133 321.052 385.813 320.372 cv
385.493 319.692 385.333 318.922 385.333 318.062 cv
385.333 317.212 385.493 316.442 385.813 315.762 cv
386.133 315.082 386.623 314.422 387.283 313.772 cv
387.713 314.202 li
387.113 314.782 386.663 315.372 386.363 315.982 cv
386.063 316.592 385.913 317.282 385.913 318.062 cv
385.913 318.852 386.063 319.552 386.363 320.162 cv
386.663 320.772 387.113 321.342 387.713 321.882 cv
f
390.253 315.952 mo
389.913 316.292 389.483 316.622 388.963 316.932 cv
388.963 316.192 li
389.613 315.752 390.143 315.232 390.563 314.632 cv
391.033 314.632 li
391.033 321.352 li
390.253 321.352 li
390.253 315.952 li
f
393.413 317.622 mo
393.433 316.932 393.533 316.382 393.703 315.982 cv
393.873 315.582 394.113 315.242 394.433 314.982 cv
394.743 314.722 395.123 314.592 395.583 314.592 cv
396.033 314.592 396.433 314.782 396.773 315.162 cv
397.113 315.542 397.333 316.012 397.433 316.582 cv
397.533 317.162 397.573 317.822 397.533 318.562 cv
397.493 319.302 397.363 319.912 397.143 320.372 cv
396.923 320.842 396.583 321.162 396.143 321.342 cv
395.703 321.522 395.253 321.502 394.813 321.282 cv
394.373 321.062 394.063 320.772 393.883 320.412 cv
393.703 320.052 393.573 319.662 393.493 319.262 cv
393.413 318.862 393.383 318.312 393.413 317.622 cv
394.233 317.382 mo
394.153 318.102 394.173 318.732 394.313 319.292 cv
394.443 319.852 394.653 320.252 394.953 320.492 cv
395.253 320.732 395.553 320.772 395.873 320.632 cv
396.183 320.492 396.413 320.202 396.553 319.772 cv
396.693 319.342 396.773 318.872 396.773 318.362 cv
396.773 317.862 396.753 317.402 396.713 316.982 cv
396.673 316.562 396.553 316.182 396.363 315.842 cv
396.163 315.502 395.903 315.332 395.583 315.312 cv
395.253 315.302 394.963 315.462 394.723 315.802 cv
394.473 316.142 394.313 316.672 394.233 317.382 cv
f
399.783 321.382 mo
399.273 322.432 li
398.883 322.432 li
399.273 321.382 li
398.883 321.382 li
398.883 320.532 li
399.783 320.532 li
399.783 321.382 li
f
406.193 319.862 mo
403.183 319.862 li
403.183 319.202 li
406.343 314.632 li
406.933 314.632 li
406.933 319.202 li
407.863 319.202 li
407.863 319.862 li
406.933 319.862 li
406.933 321.352 li
406.193 321.352 li
406.193 319.862 li
406.193 319.202 mo
406.193 316.112 li
404.003 319.202 li
406.193 319.202 li
f
408.923 319.512 mo
409.103 320.212 409.413 320.602 409.853 320.682 cv
410.293 320.762 410.653 320.722 410.933 320.552 cv
411.203 320.382 411.393 320.162 411.513 319.882 cv
411.633 319.612 411.683 319.302 411.673 318.962 cv
411.653 318.622 411.563 318.342 411.403 318.102 cv
411.233 317.872 411.013 317.722 410.753 317.642 cv
410.493 317.562 410.193 317.562 409.873 317.642 cv
409.553 317.722 409.283 317.902 409.083 318.182 cv
408.413 318.102 li
408.463 317.952 408.713 316.832 409.153 314.742 cv
412.243 314.742 li
412.243 315.452 li
409.743 315.452 li
409.603 316.152 409.473 316.712 409.353 317.132 cv
409.743 316.952 410.103 316.862 410.443 316.872 cv
410.783 316.892 411.103 316.972 411.423 317.112 cv
411.733 317.252 411.963 317.452 412.103 317.692 cv
412.243 317.942 412.353 318.192 412.413 318.442 cv
412.473 318.692 412.503 318.962 412.493 319.242 cv
412.473 319.532 412.413 319.822 412.313 320.122 cv
412.213 320.422 412.053 320.662 411.853 320.862 cv
411.643 321.062 411.393 321.212 411.093 321.332 cv
410.793 321.452 410.443 321.492 410.053 321.462 cv
409.663 321.442 409.293 321.292 408.943 321.032 cv
408.583 320.772 408.343 320.332 408.223 319.702 cv
408.923 319.512 li
f
415.683 318.062 mo
415.683 318.922 415.513 319.692 415.193 320.372 cv
414.863 321.052 414.373 321.692 413.723 322.312 cv
413.293 321.882 li
413.893 321.342 414.343 320.772 414.643 320.162 cv
414.943 319.552 415.093 318.852 415.093 318.062 cv
415.093 317.282 414.943 316.592 414.643 315.982 cv
414.343 315.372 413.893 314.782 413.293 314.202 cv
413.723 313.772 li
414.373 314.422 414.863 315.082 415.193 315.762 cv
415.513 316.442 415.683 317.212 415.683 318.062 cv
f
215.076 327.897 mo
214.596 327.877 214.196 327.857 213.866 327.857 cv
211.556 327.857 li
211.376 328.217 211.156 328.627 210.896 329.067 cv
210.896 333.947 li
210.896 334.467 210.906 335.047 210.936 335.697 cv
210.076 335.697 li
210.096 335.077 210.116 334.497 210.116 333.947 cv
210.116 330.117 li
209.296 331.237 208.206 332.267 206.826 333.207 cv
206.616 332.897 206.426 332.677 206.246 332.547 cv
206.766 332.307 207.456 331.807 208.316 331.037 cv
209.176 330.277 209.966 329.217 210.696 327.857 cv
208.116 327.857 li
207.616 327.857 207.096 327.877 206.556 327.897 cv
206.556 327.117 li
207.336 327.137 207.936 327.147 208.356 327.147 cv
213.826 327.147 li
214.156 327.147 214.576 327.137 215.076 327.117 cv
215.076 327.897 li
214.256 333.087 mo
213.756 332.467 212.866 331.497 211.596 330.197 cv
211.796 330.017 211.966 329.837 212.106 329.647 cv
212.726 330.227 213.256 330.727 213.696 331.157 cv
214.136 331.587 214.556 332.007 214.956 332.427 cv
214.696 332.637 214.456 332.857 214.256 333.087 cv
f
224.836 327.147 mo
224.776 327.547 224.756 328.037 224.756 328.637 cv
224.756 334.917 li
224.756 335.277 224.626 335.507 224.366 335.597 cv
224.106 335.687 223.686 335.757 223.116 335.817 cv
223.116 335.577 223.006 335.277 222.806 334.917 cv
223.226 334.917 223.526 334.897 223.706 334.857 cv
223.886 334.827 223.976 334.717 223.976 334.537 cv
223.976 327.897 li
217.536 327.897 li
217.536 335.777 li
216.636 335.777 li
216.656 335.407 216.686 334.997 216.716 334.537 cv
216.716 328.637 li
216.716 328.017 216.696 327.517 216.676 327.147 cv
224.836 327.147 li
222.576 330.867 mo
222.516 331.157 222.496 331.597 222.496 332.187 cv
222.496 332.767 222.516 333.277 222.576 333.717 cv
218.896 333.717 li
218.916 333.247 218.936 332.717 218.936 332.117 cv
218.936 331.517 218.916 331.107 218.896 330.867 cv
222.576 330.867 li
222.146 328.987 mo
222.666 328.987 223.036 328.977 223.276 328.947 cv
223.276 329.727 li
223.016 329.707 222.626 329.687 222.106 329.687 cv
219.566 329.687 li
218.936 329.687 218.496 329.707 218.236 329.727 cv
218.236 328.947 li
218.516 328.977 218.976 328.987 219.606 328.987 cv
222.146 328.987 li
221.786 333.047 mo
221.786 331.487 li
219.686 331.487 li
219.686 333.047 li
221.786 333.047 li
f
232.186 329.377 mo
232.106 329.697 232.036 330.127 231.986 330.667 cv
231.926 331.217 231.856 331.807 231.756 332.427 cv
233.586 332.427 li
234.046 332.427 234.546 332.417 235.076 332.387 cv
235.076 333.127 li
234.526 333.107 234.016 333.087 233.546 333.087 cv
231.556 333.087 li
231.316 333.607 230.966 334.067 230.496 334.457 cv
230.026 334.847 229.476 335.147 228.856 335.367 cv
228.236 335.587 227.676 335.757 227.186 335.887 cv
227.076 335.577 226.856 335.327 226.516 335.147 cv
227.266 335.067 228.076 334.857 228.936 334.517 cv
229.796 334.167 230.396 333.687 230.736 333.087 cv
227.966 333.087 li
227.486 333.087 226.966 333.107 226.396 333.127 cv
226.396 332.387 li
226.996 332.417 227.516 332.427 227.966 332.427 cv
231.006 332.427 li
231.086 331.987 231.146 331.507 231.186 330.997 cv
231.226 330.497 231.226 329.877 231.206 329.147 cv
231.516 329.247 231.846 329.327 232.186 329.377 cv
230.816 326.647 mo
231.016 327.067 231.206 327.517 231.366 328.007 cv
234.756 328.007 li
234.726 328.297 234.716 328.587 234.716 328.867 cv
234.716 329.127 234.726 329.417 234.756 329.727 cv
233.866 329.727 li
233.866 328.637 li
227.646 328.637 li
227.646 329.807 li
226.786 329.807 li
226.806 329.497 226.826 329.197 226.826 328.907 cv
226.826 328.597 226.806 328.297 226.786 328.007 cv
230.386 328.007 li
230.306 327.707 230.156 327.337 229.956 326.917 cv
230.156 326.837 230.446 326.747 230.816 326.647 cv
231.986 333.557 mo
232.556 333.877 233.106 334.167 233.626 334.437 cv
234.146 334.717 234.596 334.957 234.996 335.187 cv
234.806 335.387 234.606 335.617 234.406 335.857 cv
233.936 335.517 233.426 335.197 232.886 334.897 cv
232.336 334.607 231.866 334.377 231.476 334.217 cv
231.676 333.957 231.846 333.737 231.986 333.557 cv
227.576 330.547 mo
228.016 330.767 228.626 331.127 229.406 331.647 cv
229.306 331.807 229.146 332.007 228.936 332.267 cv
228.206 331.727 227.626 331.357 227.186 331.177 cv
227.336 331.017 227.466 330.807 227.576 330.547 cv
230.656 330.437 mo
230.476 330.647 230.316 330.857 230.186 331.057 cv
229.346 330.457 228.736 330.097 228.356 329.967 cv
228.476 329.787 228.626 329.577 228.786 329.337 cv
230.656 330.437 li
f
239.326 327.467 mo
239.276 327.707 239.236 328.037 239.216 328.477 cv
238.936 331.527 li
239.686 331.527 li
239.656 331.737 239.626 332.087 239.606 332.577 cv
239.446 334.727 li
239.446 335.267 239.286 335.577 238.976 335.657 cv
238.656 335.737 238.226 335.807 237.686 335.887 cv
237.606 335.527 237.506 335.227 237.376 334.997 cv
237.916 334.997 238.276 334.987 238.446 334.977 cv
238.616 334.957 238.726 334.847 238.786 334.617 cv
238.896 332.187 li
236.596 332.187 li
236.616 331.697 236.636 331.157 236.656 330.567 cv
236.666 329.987 236.676 329.427 236.676 328.907 cv
237.456 328.907 li
237.396 329.197 237.356 329.567 237.336 330.027 cv
237.306 330.487 237.296 330.987 237.296 331.527 cv
238.276 331.527 li
238.546 328.087 li
237.496 328.087 li
237.076 328.087 236.666 328.107 236.286 328.127 cv
236.286 327.427 li
236.666 327.457 237.076 327.467 237.496 327.467 cv
239.326 327.467 li
242.496 327.227 mo
242.906 328.007 243.336 328.587 243.776 328.947 cv
244.216 329.317 244.746 329.607 245.346 329.807 cv
245.106 330.017 244.926 330.277 244.796 330.587 cv
244.436 330.387 244.086 330.137 243.746 329.847 cv
243.746 330.507 li
243.406 330.487 242.916 330.467 242.296 330.467 cv
241.676 330.467 241.166 330.487 240.776 330.507 cv
240.776 329.887 li
240.616 330.097 240.396 330.367 240.116 330.707 cv
239.876 330.477 239.626 330.297 239.366 330.157 cv
239.786 329.877 240.106 329.587 240.326 329.297 cv
240.546 329.017 240.736 328.717 240.906 328.407 cv
241.076 328.097 241.216 327.807 241.336 327.547 cv
241.456 327.287 241.556 326.997 241.636 326.687 cv
241.976 326.767 242.326 326.837 242.686 326.917 cv
242.496 327.227 li
244.486 331.487 mo
244.346 331.647 244.246 331.857 244.166 332.137 cv
244.086 332.417 243.966 332.847 243.796 333.427 cv
243.626 334.007 243.496 334.467 243.396 334.807 cv
243.936 334.807 li
244.116 334.807 244.406 334.797 244.796 334.767 cv
244.796 335.467 li
244.456 335.437 244.166 335.427 243.936 335.427 cv
240.936 335.427 li
240.456 335.427 240.116 335.437 239.916 335.467 cv
239.916 334.767 li
240.226 334.797 240.576 334.807 240.966 334.807 cv
242.726 334.807 li
242.926 334.237 243.096 333.647 243.236 333.047 cv
243.626 331.257 li
243.826 331.337 244.116 331.407 244.486 331.487 cv
243.706 329.807 mo
243.386 329.577 243.106 329.287 242.846 328.947 cv
242.586 328.607 242.326 328.177 242.066 327.657 cv
241.856 328.077 241.666 328.437 241.496 328.737 cv
241.326 329.037 241.096 329.397 240.816 329.807 cv
243.706 329.807 li
240.816 331.447 mo
240.916 331.817 241.026 332.237 241.146 332.697 cv
241.266 333.167 241.376 333.597 241.476 333.987 cv
241.236 334.017 241.016 334.087 240.816 334.187 cv
240.736 333.687 240.646 333.277 240.556 332.937 cv
240.466 332.597 240.346 332.167 240.186 331.647 cv
240.396 331.567 240.606 331.507 240.816 331.447 cv
238.506 333.087 mo
238.476 333.277 238.456 333.497 238.436 333.757 cv
238.036 333.837 237.716 333.897 237.476 333.947 cv
237.226 334.007 236.846 334.107 236.326 334.257 cv
236.246 333.977 236.146 333.687 236.046 333.397 cv
236.406 333.377 236.786 333.347 237.176 333.287 cv
237.566 333.237 238.006 333.167 238.506 333.087 cv
242.456 332.267 mo
242.506 332.607 242.566 333.037 242.646 333.557 cv
242.026 333.717 li
241.916 333.147 241.836 332.707 241.786 332.407 cv
241.736 332.107 241.676 331.767 241.596 331.367 cv
241.826 331.327 242.056 331.287 242.296 331.257 cv
242.456 332.267 li
f
252.806 327.147 mo
252.746 327.287 252.686 327.457 252.606 327.677 cv
252.526 327.897 252.416 328.297 252.256 328.867 cv
254.056 328.867 li
254.316 328.867 254.626 328.857 254.996 328.827 cv
254.996 329.537 li
254.706 329.517 254.486 329.497 254.326 329.497 cv
254.326 329.917 254.246 330.567 254.106 331.467 cv
253.966 332.367 253.716 333.147 253.356 333.797 cv
253.616 334.107 253.906 334.387 254.226 334.627 cv
254.546 334.867 254.856 335.047 255.146 335.147 cv
254.836 335.377 254.626 335.597 254.526 335.817 cv
254.206 335.627 253.926 335.417 253.666 335.187 cv
253.406 334.957 253.146 334.677 252.886 334.337 cv
252.596 334.657 252.286 334.917 251.966 335.137 cv
251.636 335.357 251.226 335.597 250.736 335.857 cv
250.596 335.617 250.416 335.427 250.186 335.307 cv
250.576 335.147 250.996 334.927 251.436 334.647 cv
251.876 334.367 252.216 334.077 252.456 333.797 cv
252.276 333.437 252.096 333.047 251.926 332.627 cv
251.756 332.207 251.606 331.657 251.476 330.977 cv
251.396 331.197 251.266 331.467 251.086 331.797 cv
250.906 331.697 250.686 331.597 250.426 331.487 cv
250.836 330.767 251.176 329.967 251.436 329.107 cv
251.696 328.247 251.866 327.507 251.946 326.877 cv
252.256 327.017 252.546 327.107 252.806 327.147 cv
249.016 331.327 mo
248.916 331.437 248.796 331.607 248.666 331.837 cv
250.816 331.837 li
250.656 332.497 250.376 333.147 249.996 333.797 cv
250.406 333.957 250.726 334.097 250.966 334.217 cv
250.836 334.407 250.716 334.607 250.616 334.807 cv
250.376 334.657 250.026 334.497 249.566 334.337 cv
249.046 334.897 248.146 335.407 246.866 335.857 cv
246.736 335.567 246.566 335.367 246.366 335.267 cv
247.586 334.987 248.416 334.607 248.866 334.107 cv
248.126 333.927 247.526 333.767 247.066 333.637 cv
247.216 333.407 247.426 333.017 247.686 332.467 cv
247.426 332.467 246.996 332.487 246.396 332.507 cv
246.396 331.797 li
246.896 331.827 247.406 331.837 247.926 331.837 cv
248.026 331.607 248.096 331.347 248.156 331.057 cv
248.436 331.167 248.726 331.257 249.016 331.327 cv
248.506 328.677 mo
248.506 328.057 248.486 327.457 248.466 326.877 cv
249.256 326.877 li
249.226 327.427 249.216 328.027 249.216 328.677 cv
250.096 328.677 250.716 328.667 251.086 328.637 cv
251.086 329.337 li
250.716 329.317 250.096 329.297 249.216 329.297 cv
249.216 330.057 249.226 330.647 249.256 331.057 cv
248.466 331.057 li
248.486 330.697 248.506 330.237 248.506 329.687 cv
248.376 329.907 248.126 330.177 247.766 330.497 cv
247.396 330.817 247.056 331.077 246.756 331.257 cv
246.616 331.017 246.426 330.847 246.166 330.747 cv
246.396 330.667 246.706 330.487 247.096 330.197 cv
247.486 329.917 247.786 329.617 248.006 329.297 cv
247.476 329.297 246.976 329.317 246.516 329.337 cv
246.516 328.637 li
246.956 328.667 247.626 328.677 248.506 328.677 cv
251.946 329.887 mo
252.176 331.427 252.506 332.487 252.926 333.087 cv
253.186 332.487 253.356 331.887 253.446 331.277 cv
253.536 330.667 253.596 330.077 253.626 329.497 cv
252.106 329.497 li
251.946 329.887 li
248.006 333.287 mo
248.306 333.367 248.736 333.467 249.286 333.597 cv
249.496 333.337 249.696 332.967 249.876 332.467 cv
248.436 332.467 li
248.296 332.727 248.156 333.007 248.006 333.287 cv
250.936 327.307 mo
250.796 327.517 250.696 327.717 250.616 327.897 cv
250.536 328.077 250.436 328.297 250.306 328.557 cv
250.096 328.457 249.886 328.377 249.686 328.327 cv
249.886 327.987 250.086 327.557 250.266 327.037 cv
250.526 327.167 250.746 327.257 250.936 327.307 cv
249.756 329.577 mo
250.096 329.917 250.416 330.247 250.736 330.587 cv
250.576 330.727 250.406 330.877 250.226 331.057 cv
249.866 330.617 249.566 330.267 249.326 330.007 cv
249.486 329.877 249.626 329.737 249.756 329.577 cv
247.186 327.037 mo
247.546 327.397 247.836 327.767 248.076 328.127 cv
247.496 328.477 li
247.306 328.117 247.036 327.787 246.676 327.467 cv
246.906 327.307 247.076 327.167 247.186 327.037 cv
f
264.716 327.387 mo
264.696 327.627 264.686 327.907 264.686 328.247 cv
264.686 328.757 li
264.686 329.227 264.696 329.567 264.716 329.767 cv
260.576 329.767 li
260.576 330.937 li
262.376 330.937 li
262.376 330.707 262.356 330.357 262.336 329.887 cv
263.076 329.887 li
263.046 330.307 263.036 330.657 263.036 330.937 cv
264.096 330.937 li
264.556 330.937 264.946 330.927 265.266 330.897 cv
265.266 331.607 li
264.946 331.587 264.576 331.567 264.136 331.567 cv
263.036 331.567 li
263.036 332.617 li
264.756 332.617 li
264.726 333.117 264.716 333.447 264.716 333.597 cv
264.716 334.577 li
264.716 334.977 264.726 335.367 264.756 335.737 cv
264.056 335.737 li
264.056 335.187 li
261.476 335.187 li
261.476 335.777 li
260.776 335.777 li
260.796 335.487 260.816 335.127 260.816 334.687 cv
260.816 333.557 li
260.816 333.297 260.796 332.987 260.776 332.617 cv
262.376 332.617 li
262.376 331.567 li
260.536 331.567 li
260.516 332.327 260.416 333.037 260.246 333.697 cv
260.076 334.357 259.836 334.977 259.526 335.577 cv
259.286 335.417 259.046 335.307 258.786 335.227 cv
259.096 334.827 259.326 334.387 259.466 333.917 cv
259.606 333.447 259.716 332.947 259.796 332.407 cv
259.876 331.877 259.916 331.327 259.916 330.747 cv
259.916 329.257 li
259.916 328.847 259.896 328.227 259.876 327.387 cv
264.716 327.387 li
257.726 327.937 mo
257.726 327.577 257.706 327.237 257.686 326.917 cv
258.466 326.917 li
258.446 327.207 258.436 327.547 258.436 327.937 cv
258.436 328.947 li
258.696 328.947 259.096 328.937 259.646 328.907 cv
259.646 329.577 li
259.096 329.557 258.696 329.537 258.436 329.537 cv
258.436 331.017 li
258.766 330.837 259.116 330.637 259.486 330.397 cv
259.506 330.607 259.576 330.797 259.686 330.977 cv
259.186 331.267 258.766 331.517 258.436 331.717 cv
258.436 334.577 li
258.436 335.057 258.306 335.357 258.056 335.457 cv
257.806 335.557 257.436 335.657 256.946 335.737 cv
256.886 335.477 256.796 335.197 256.676 334.917 cv
257.116 334.917 257.396 334.897 257.526 334.857 cv
257.656 334.827 257.726 334.657 257.726 334.337 cv
257.726 332.037 li
257.336 332.247 256.946 332.497 256.556 332.777 cv
256.476 332.577 256.346 332.327 256.166 332.037 cv
256.686 331.857 257.206 331.617 257.726 331.327 cv
257.726 329.537 li
257.226 329.537 256.746 329.557 256.286 329.577 cv
256.286 328.907 li
256.746 328.937 257.226 328.947 257.726 328.947 cv
257.726 327.937 li
264.016 329.187 mo
264.016 327.967 li
260.576 327.967 li
260.576 329.187 li
264.016 329.187 li
264.056 334.617 mo
264.056 333.167 li
261.476 333.167 li
261.476 334.617 li
264.056 334.617 li
f
57.176 295.673 mo
53.676 295.673 li
f
57.176 295.673 mo
53.676 295.673 li
@
30.526 295.151 mo
30.546 294.461 30.646 293.911 30.816 293.511 cv
30.986 293.111 31.226 292.771 31.546 292.511 cv
31.856 292.251 32.236 292.121 32.696 292.121 cv
33.146 292.121 33.546 292.311 33.886 292.691 cv
34.226 293.071 34.446 293.541 34.546 294.111 cv
34.646 294.691 34.686 295.351 34.646 296.091 cv
34.606 296.831 34.476 297.441 34.256 297.901 cv
34.036 298.371 33.696 298.691 33.256 298.871 cv
32.816 299.051 32.366 299.031 31.926 298.811 cv
31.486 298.591 31.176 298.301 30.996 297.941 cv
30.816 297.581 30.686 297.191 30.606 296.791 cv
30.526 296.391 30.496 295.841 30.526 295.151 cv
31.346 294.911 mo
31.266 295.631 31.286 296.261 31.426 296.821 cv
31.556 297.381 31.766 297.781 32.066 298.021 cv
32.366 298.261 32.666 298.301 32.986 298.161 cv
33.296 298.021 33.526 297.731 33.666 297.301 cv
33.806 296.871 33.886 296.401 33.886 295.891 cv
33.886 295.391 33.866 294.931 33.826 294.511 cv
33.786 294.091 33.666 293.711 33.476 293.371 cv
33.276 293.031 33.016 292.861 32.696 292.841 cv
32.366 292.831 32.076 292.991 31.836 293.331 cv
31.586 293.671 31.426 294.201 31.346 294.911 cv
f
36.856 298.911 mo
35.956 298.911 li
35.956 298.061 li
36.856 298.061 li
36.856 298.911 li
f
40.526 295.151 mo
40.546 294.461 40.646 293.911 40.816 293.511 cv
40.986 293.111 41.226 292.771 41.546 292.511 cv
41.856 292.251 42.236 292.121 42.696 292.121 cv
43.146 292.121 43.546 292.311 43.886 292.691 cv
44.226 293.071 44.446 293.541 44.546 294.111 cv
44.646 294.691 44.686 295.351 44.646 296.091 cv
44.606 296.831 44.476 297.441 44.256 297.901 cv
44.036 298.371 43.696 298.691 43.256 298.871 cv
42.816 299.051 42.366 299.031 41.926 298.811 cv
41.486 298.591 41.176 298.301 40.996 297.941 cv
40.816 297.581 40.686 297.191 40.606 296.791 cv
40.526 296.391 40.496 295.841 40.526 295.151 cv
41.346 294.911 mo
41.266 295.631 41.286 296.261 41.426 296.821 cv
41.556 297.381 41.766 297.781 42.066 298.021 cv
42.366 298.261 42.666 298.301 42.986 298.161 cv
43.296 298.021 43.526 297.731 43.666 297.301 cv
43.806 296.871 43.886 296.401 43.886 295.891 cv
43.886 295.391 43.866 294.931 43.826 294.511 cv
43.786 294.091 43.666 293.711 43.476 293.371 cv
43.276 293.031 43.016 292.861 42.696 292.841 cv
42.366 292.831 42.076 292.991 41.836 293.331 cv
41.586 293.671 41.426 294.201 41.346 294.911 cv
f
45.526 295.151 mo
45.546 294.461 45.646 293.911 45.816 293.511 cv
45.986 293.111 46.226 292.771 46.546 292.511 cv
46.856 292.251 47.236 292.121 47.696 292.121 cv
48.146 292.121 48.546 292.311 48.886 292.691 cv
49.226 293.071 49.446 293.541 49.546 294.111 cv
49.646 294.691 49.686 295.351 49.646 296.091 cv
49.606 296.831 49.476 297.441 49.256 297.901 cv
49.036 298.371 48.696 298.691 48.256 298.871 cv
47.816 299.051 47.366 299.031 46.926 298.811 cv
46.486 298.591 46.176 298.301 45.996 297.941 cv
45.816 297.581 45.686 297.191 45.606 296.791 cv
45.526 296.391 45.496 295.841 45.526 295.151 cv
46.346 294.911 mo
46.266 295.631 46.286 296.261 46.426 296.821 cv
46.556 297.381 46.766 297.781 47.066 298.021 cv
47.366 298.261 47.666 298.301 47.986 298.161 cv
48.296 298.021 48.526 297.731 48.666 297.301 cv
48.806 296.871 48.886 296.401 48.886 295.891 cv
48.886 295.391 48.866 294.931 48.826 294.511 cv
48.786 294.091 48.666 293.711 48.476 293.371 cv
48.276 293.031 48.016 292.861 47.696 292.841 cv
47.366 292.831 47.076 292.991 46.836 293.331 cv
46.586 293.671 46.426 294.201 46.346 294.911 cv
f
57.176 265.205 mo
53.676 265.205 li
f
57.176 265.205 mo
53.676 265.205 li
@
30.526 264.682 mo
30.546 263.992 30.646 263.442 30.816 263.042 cv
30.986 262.642 31.226 262.302 31.546 262.042 cv
31.856 261.782 32.236 261.652 32.696 261.652 cv
33.146 261.652 33.546 261.842 33.886 262.222 cv
34.226 262.602 34.446 263.072 34.546 263.642 cv
34.646 264.222 34.686 264.882 34.646 265.622 cv
34.606 266.362 34.476 266.972 34.256 267.432 cv
34.036 267.902 33.696 268.222 33.256 268.402 cv
32.816 268.582 32.366 268.562 31.926 268.342 cv
31.486 268.122 31.176 267.832 30.996 267.472 cv
30.816 267.112 30.686 266.722 30.606 266.322 cv
30.526 265.922 30.496 265.372 30.526 264.682 cv
31.346 264.442 mo
31.266 265.162 31.286 265.792 31.426 266.352 cv
31.556 266.912 31.766 267.312 32.066 267.552 cv
32.366 267.792 32.666 267.832 32.986 267.692 cv
33.296 267.552 33.526 267.262 33.666 266.832 cv
33.806 266.402 33.886 265.932 33.886 265.422 cv
33.886 264.922 33.866 264.462 33.826 264.042 cv
33.786 263.622 33.666 263.242 33.476 262.902 cv
33.276 262.562 33.016 262.392 32.696 262.372 cv
32.366 262.362 32.076 262.522 31.836 262.862 cv
31.586 263.202 31.426 263.732 31.346 264.442 cv
f
36.856 268.442 mo
35.956 268.442 li
35.956 267.592 li
36.856 267.592 li
36.856 268.442 li
f
40.526 264.682 mo
40.546 263.992 40.646 263.442 40.816 263.042 cv
40.986 262.642 41.226 262.302 41.546 262.042 cv
41.856 261.782 42.236 261.652 42.696 261.652 cv
43.146 261.652 43.546 261.842 43.886 262.222 cv
44.226 262.602 44.446 263.072 44.546 263.642 cv
44.646 264.222 44.686 264.882 44.646 265.622 cv
44.606 266.362 44.476 266.972 44.256 267.432 cv
44.036 267.902 43.696 268.222 43.256 268.402 cv
42.816 268.582 42.366 268.562 41.926 268.342 cv
41.486 268.122 41.176 267.832 40.996 267.472 cv
40.816 267.112 40.686 266.722 40.606 266.322 cv
40.526 265.922 40.496 265.372 40.526 264.682 cv
41.346 264.442 mo
41.266 265.162 41.286 265.792 41.426 266.352 cv
41.556 266.912 41.766 267.312 42.066 267.552 cv
42.366 267.792 42.666 267.832 42.986 267.692 cv
43.296 267.552 43.526 267.262 43.666 266.832 cv
43.806 266.402 43.886 265.932 43.886 265.422 cv
43.886 264.922 43.866 264.462 43.826 264.042 cv
43.786 263.622 43.666 263.242 43.476 262.902 cv
43.276 262.562 43.016 262.392 42.696 262.372 cv
42.366 262.362 42.076 262.522 41.836 262.862 cv
41.586 263.202 41.426 263.732 41.346 264.442 cv
f
47.366 263.012 mo
47.026 263.352 46.596 263.682 46.076 263.992 cv
46.076 263.252 li
46.726 262.812 47.256 262.292 47.676 261.692 cv
48.146 261.692 li
48.146 268.412 li
47.366 268.412 li
47.366 263.012 li
f
57.176 234.736 mo
53.676 234.736 li
f
57.176 234.736 mo
53.676 234.736 li
@
30.526 234.214 mo
30.546 233.524 30.646 232.974 30.816 232.574 cv
30.986 232.174 31.226 231.834 31.546 231.574 cv
31.856 231.314 32.236 231.184 32.696 231.184 cv
33.146 231.184 33.546 231.374 33.886 231.754 cv
34.226 232.134 34.446 232.604 34.546 233.174 cv
34.646 233.754 34.686 234.414 34.646 235.154 cv
34.606 235.894 34.476 236.504 34.256 236.964 cv
34.036 237.434 33.696 237.754 33.256 237.934 cv
32.816 238.114 32.366 238.094 31.926 237.874 cv
31.486 237.654 31.176 237.364 30.996 237.004 cv
30.816 236.644 30.686 236.254 30.606 235.854 cv
30.526 235.454 30.496 234.904 30.526 234.214 cv
31.346 233.974 mo
31.266 234.694 31.286 235.324 31.426 235.884 cv
31.556 236.444 31.766 236.844 32.066 237.084 cv
32.366 237.324 32.666 237.364 32.986 237.224 cv
33.296 237.084 33.526 236.794 33.666 236.364 cv
33.806 235.934 33.886 235.464 33.886 234.954 cv
33.886 234.454 33.866 233.994 33.826 233.574 cv
33.786 233.154 33.666 232.774 33.476 232.434 cv
33.276 232.094 33.016 231.924 32.696 231.904 cv
32.366 231.894 32.076 232.054 31.836 232.394 cv
31.586 232.734 31.426 233.264 31.346 233.974 cv
f
36.856 237.974 mo
35.956 237.974 li
35.956 237.124 li
36.856 237.124 li
36.856 237.974 li
f
40.526 234.214 mo
40.546 233.524 40.646 232.974 40.816 232.574 cv
40.986 232.174 41.226 231.834 41.546 231.574 cv
41.856 231.314 42.236 231.184 42.696 231.184 cv
43.146 231.184 43.546 231.374 43.886 231.754 cv
44.226 232.134 44.446 232.604 44.546 233.174 cv
44.646 233.754 44.686 234.414 44.646 235.154 cv
44.606 235.894 44.476 236.504 44.256 236.964 cv
44.036 237.434 43.696 237.754 43.256 237.934 cv
42.816 238.114 42.366 238.094 41.926 237.874 cv
41.486 237.654 41.176 237.364 40.996 237.004 cv
40.816 236.644 40.686 236.254 40.606 235.854 cv
40.526 235.454 40.496 234.904 40.526 234.214 cv
41.346 233.974 mo
41.266 234.694 41.286 235.324 41.426 235.884 cv
41.556 236.444 41.766 236.844 42.066 237.084 cv
42.366 237.324 42.666 237.364 42.986 237.224 cv
43.296 237.084 43.526 236.794 43.666 236.364 cv
43.806 235.934 43.886 235.464 43.886 234.954 cv
43.886 234.454 43.866 233.994 43.826 233.574 cv
43.786 233.154 43.666 232.774 43.476 232.434 cv
43.276 232.094 43.016 231.924 42.696 231.904 cv
42.366 231.894 42.076 232.054 41.836 232.394 cv
41.586 232.734 41.426 233.264 41.346 233.974 cv
f
45.646 237.784 mo
45.666 237.394 45.846 237.044 46.186 236.734 cv
46.526 236.424 46.956 235.934 47.476 235.264 cv
47.996 234.604 48.336 234.084 48.496 233.724 cv
48.646 233.364 48.706 233.044 48.666 232.784 cv
48.626 232.524 48.506 232.314 48.296 232.144 cv
48.086 231.974 47.846 231.904 47.576 231.924 cv
47.296 231.954 47.036 232.064 46.796 232.244 cv
46.546 232.424 46.356 232.694 46.226 233.054 cv
45.486 232.944 li
45.696 232.344 45.966 231.914 46.286 231.634 cv
46.606 231.364 46.996 231.214 47.446 231.184 cv
47.706 231.164 47.936 231.164 48.146 231.204 cv
48.346 231.244 48.566 231.344 48.786 231.484 cv
49.006 231.624 49.196 231.844 49.336 232.124 cv
49.476 232.404 49.536 232.754 49.496 233.154 cv
49.456 233.564 49.246 234.044 48.886 234.604 cv
48.516 235.164 47.816 236.044 46.776 237.234 cv
49.586 237.234 li
49.586 237.944 li
45.646 237.944 li
45.646 237.784 li
f
57.176 204.268 mo
53.676 204.268 li
f
57.176 204.268 mo
53.676 204.268 li
@
30.526 203.745 mo
30.546 203.055 30.646 202.505 30.816 202.105 cv
30.986 201.705 31.226 201.365 31.546 201.105 cv
31.856 200.845 32.236 200.715 32.696 200.715 cv
33.146 200.715 33.546 200.905 33.886 201.285 cv
34.226 201.665 34.446 202.135 34.546 202.705 cv
34.646 203.285 34.686 203.945 34.646 204.685 cv
34.606 205.425 34.476 206.035 34.256 206.495 cv
34.036 206.965 33.696 207.285 33.256 207.465 cv
32.816 207.645 32.366 207.625 31.926 207.405 cv
31.486 207.185 31.176 206.895 30.996 206.535 cv
30.816 206.175 30.686 205.785 30.606 205.385 cv
30.526 204.985 30.496 204.435 30.526 203.745 cv
31.346 203.505 mo
31.266 204.225 31.286 204.855 31.426 205.415 cv
31.556 205.975 31.766 206.375 32.066 206.615 cv
32.366 206.855 32.666 206.895 32.986 206.755 cv
33.296 206.615 33.526 206.325 33.666 205.895 cv
33.806 205.465 33.886 204.995 33.886 204.485 cv
33.886 203.985 33.866 203.525 33.826 203.105 cv
33.786 202.685 33.666 202.305 33.476 201.965 cv
33.276 201.625 33.016 201.455 32.696 201.435 cv
32.366 201.425 32.076 201.585 31.836 201.925 cv
31.586 202.265 31.426 202.795 31.346 203.505 cv
f
36.856 207.505 mo
35.956 207.505 li
35.956 206.655 li
36.856 206.655 li
36.856 207.505 li
f
40.526 203.745 mo
40.546 203.055 40.646 202.505 40.816 202.105 cv
40.986 201.705 41.226 201.365 41.546 201.105 cv
41.856 200.845 42.236 200.715 42.696 200.715 cv
43.146 200.715 43.546 200.905 43.886 201.285 cv
44.226 201.665 44.446 202.135 44.546 202.705 cv
44.646 203.285 44.686 203.945 44.646 204.685 cv
44.606 205.425 44.476 206.035 44.256 206.495 cv
44.036 206.965 43.696 207.285 43.256 207.465 cv
42.816 207.645 42.366 207.625 41.926 207.405 cv
41.486 207.185 41.176 206.895 40.996 206.535 cv
40.816 206.175 40.686 205.785 40.606 205.385 cv
40.526 204.985 40.496 204.435 40.526 203.745 cv
41.346 203.505 mo
41.266 204.225 41.286 204.855 41.426 205.415 cv
41.556 205.975 41.766 206.375 42.066 206.615 cv
42.366 206.855 42.666 206.895 42.986 206.755 cv
43.296 206.615 43.526 206.325 43.666 205.895 cv
43.806 205.465 43.886 204.995 43.886 204.485 cv
43.886 203.985 43.866 203.525 43.826 203.105 cv
43.786 202.685 43.666 202.305 43.476 201.965 cv
43.276 201.625 43.016 201.455 42.696 201.435 cv
42.366 201.425 42.076 201.585 41.836 201.925 cv
41.586 202.265 41.426 202.795 41.346 203.505 cv
f
45.566 205.795 mo
46.266 205.675 li
46.366 206.015 46.536 206.295 46.776 206.515 cv
47.006 206.735 47.296 206.845 47.656 206.825 cv
48.006 206.815 48.286 206.675 48.496 206.395 cv
48.696 206.125 48.786 205.815 48.766 205.465 cv
48.736 205.115 48.596 204.845 48.356 204.645 cv
48.106 204.445 47.706 204.305 47.166 204.225 cv
47.166 203.725 li
47.706 203.675 48.106 203.535 48.356 203.295 cv
48.596 203.055 48.706 202.755 48.686 202.375 cv
48.666 201.995 48.496 201.725 48.186 201.555 cv
47.866 201.385 47.536 201.365 47.186 201.495 cv
46.826 201.625 46.546 201.985 46.346 202.585 cv
45.646 202.475 li
45.796 202.005 46.006 201.615 46.286 201.295 cv
46.556 200.985 46.926 200.805 47.396 200.755 cv
47.866 200.705 48.276 200.765 48.626 200.935 cv
48.976 201.105 49.226 201.365 49.366 201.715 cv
49.506 202.065 49.526 202.445 49.426 202.865 cv
49.326 203.285 49.026 203.645 48.536 203.955 cv
48.896 204.115 49.176 204.345 49.376 204.655 cv
49.566 204.975 49.626 205.385 49.566 205.895 cv
49.506 206.405 49.276 206.815 48.886 207.125 cv
48.496 207.435 48.056 207.585 47.556 207.565 cv
47.056 207.555 46.626 207.405 46.266 207.105 cv
45.906 206.805 45.666 206.375 45.566 205.795 cv
f
57.176 173.799 mo
53.676 173.799 li
f
57.176 173.799 mo
53.676 173.799 li
@
30.526 173.277 mo
30.546 172.587 30.646 172.037 30.816 171.637 cv
30.986 171.237 31.226 170.897 31.546 170.637 cv
31.856 170.377 32.236 170.247 32.696 170.247 cv
33.146 170.247 33.546 170.437 33.886 170.817 cv
34.226 171.197 34.446 171.667 34.546 172.237 cv
34.646 172.817 34.686 173.477 34.646 174.217 cv
34.606 174.957 34.476 175.567 34.256 176.027 cv
34.036 176.497 33.696 176.817 33.256 176.997 cv
32.816 177.177 32.366 177.157 31.926 176.937 cv
31.486 176.717 31.176 176.427 30.996 176.067 cv
30.816 175.707 30.686 175.317 30.606 174.917 cv
30.526 174.517 30.496 173.967 30.526 173.277 cv
31.346 173.037 mo
31.266 173.757 31.286 174.387 31.426 174.947 cv
31.556 175.507 31.766 175.907 32.066 176.147 cv
32.366 176.387 32.666 176.427 32.986 176.287 cv
33.296 176.147 33.526 175.857 33.666 175.427 cv
33.806 174.997 33.886 174.527 33.886 174.017 cv
33.886 173.517 33.866 173.057 33.826 172.637 cv
33.786 172.217 33.666 171.837 33.476 171.497 cv
33.276 171.157 33.016 170.987 32.696 170.967 cv
32.366 170.957 32.076 171.117 31.836 171.457 cv
31.586 171.797 31.426 172.327 31.346 173.037 cv
f
36.856 177.037 mo
35.956 177.037 li
35.956 176.187 li
36.856 176.187 li
36.856 177.037 li
f
40.526 173.277 mo
40.546 172.587 40.646 172.037 40.816 171.637 cv
40.986 171.237 41.226 170.897 41.546 170.637 cv
41.856 170.377 42.236 170.247 42.696 170.247 cv
43.146 170.247 43.546 170.437 43.886 170.817 cv
44.226 171.197 44.446 171.667 44.546 172.237 cv
44.646 172.817 44.686 173.477 44.646 174.217 cv
44.606 174.957 44.476 175.567 44.256 176.027 cv
44.036 176.497 43.696 176.817 43.256 176.997 cv
42.816 177.177 42.366 177.157 41.926 176.937 cv
41.486 176.717 41.176 176.427 40.996 176.067 cv
40.816 175.707 40.686 175.317 40.606 174.917 cv
40.526 174.517 40.496 173.967 40.526 173.277 cv
41.346 173.037 mo
41.266 173.757 41.286 174.387 41.426 174.947 cv
41.556 175.507 41.766 175.907 42.066 176.147 cv
42.366 176.387 42.666 176.427 42.986 176.287 cv
43.296 176.147 43.526 175.857 43.666 175.427 cv
43.806 174.997 43.886 174.527 43.886 174.017 cv
43.886 173.517 43.866 173.057 43.826 172.637 cv
43.786 172.217 43.666 171.837 43.476 171.497 cv
43.276 171.157 43.016 170.987 42.696 170.967 cv
42.366 170.957 42.076 171.117 41.836 171.457 cv
41.586 171.797 41.426 172.327 41.346 173.037 cv
f
48.306 175.517 mo
45.296 175.517 li
45.296 174.857 li
48.456 170.287 li
49.046 170.287 li
49.046 174.857 li
49.976 174.857 li
49.976 175.517 li
49.046 175.517 li
49.046 177.007 li
48.306 177.007 li
48.306 175.517 li
48.306 174.857 mo
48.306 171.767 li
46.116 174.857 li
48.306 174.857 li
f
57.176 143.331 mo
53.676 143.331 li
f
57.176 143.331 mo
53.676 143.331 li
@
30.526 142.808 mo
30.546 142.118 30.646 141.568 30.816 141.168 cv
30.986 140.768 31.226 140.428 31.546 140.168 cv
31.856 139.908 32.236 139.778 32.696 139.778 cv
33.146 139.778 33.546 139.968 33.886 140.348 cv
34.226 140.728 34.446 141.198 34.546 141.768 cv
34.646 142.348 34.686 143.008 34.646 143.748 cv
34.606 144.488 34.476 145.098 34.256 145.558 cv
34.036 146.028 33.696 146.348 33.256 146.528 cv
32.816 146.708 32.366 146.688 31.926 146.468 cv
31.486 146.248 31.176 145.958 30.996 145.598 cv
30.816 145.238 30.686 144.848 30.606 144.448 cv
30.526 144.048 30.496 143.498 30.526 142.808 cv
31.346 142.568 mo
31.266 143.288 31.286 143.918 31.426 144.478 cv
31.556 145.038 31.766 145.438 32.066 145.678 cv
32.366 145.918 32.666 145.958 32.986 145.818 cv
33.296 145.678 33.526 145.388 33.666 144.958 cv
33.806 144.528 33.886 144.058 33.886 143.548 cv
33.886 143.048 33.866 142.588 33.826 142.168 cv
33.786 141.748 33.666 141.368 33.476 141.028 cv
33.276 140.688 33.016 140.518 32.696 140.498 cv
32.366 140.488 32.076 140.648 31.836 140.988 cv
31.586 141.328 31.426 141.858 31.346 142.568 cv
f
36.856 146.568 mo
35.956 146.568 li
35.956 145.718 li
36.856 145.718 li
36.856 146.568 li
f
40.526 142.808 mo
40.546 142.118 40.646 141.568 40.816 141.168 cv
40.986 140.768 41.226 140.428 41.546 140.168 cv
41.856 139.908 42.236 139.778 42.696 139.778 cv
43.146 139.778 43.546 139.968 43.886 140.348 cv
44.226 140.728 44.446 141.198 44.546 141.768 cv
44.646 142.348 44.686 143.008 44.646 143.748 cv
44.606 144.488 44.476 145.098 44.256 145.558 cv
44.036 146.028 43.696 146.348 43.256 146.528 cv
42.816 146.708 42.366 146.688 41.926 146.468 cv
41.486 146.248 41.176 145.958 40.996 145.598 cv
40.816 145.238 40.686 144.848 40.606 144.448 cv
40.526 144.048 40.496 143.498 40.526 142.808 cv
41.346 142.568 mo
41.266 143.288 41.286 143.918 41.426 144.478 cv
41.556 145.038 41.766 145.438 42.066 145.678 cv
42.366 145.918 42.666 145.958 42.986 145.818 cv
43.296 145.678 43.526 145.388 43.666 144.958 cv
43.806 144.528 43.886 144.058 43.886 143.548 cv
43.886 143.048 43.866 142.588 43.826 142.168 cv
43.786 141.748 43.666 141.368 43.476 141.028 cv
43.276 140.688 43.016 140.518 42.696 140.498 cv
42.366 140.488 42.076 140.648 41.836 140.988 cv
41.586 141.328 41.426 141.858 41.346 142.568 cv
f
46.036 144.698 mo
46.216 145.398 46.526 145.788 46.966 145.868 cv
47.406 145.948 47.766 145.908 48.046 145.738 cv
48.316 145.568 48.506 145.348 48.626 145.068 cv
48.746 144.798 48.796 144.488 48.786 144.148 cv
48.766 143.808 48.676 143.528 48.516 143.288 cv
48.346 143.058 48.126 142.908 47.866 142.828 cv
47.606 142.748 47.306 142.748 46.986 142.828 cv
46.666 142.908 46.396 143.088 46.196 143.368 cv
45.526 143.288 li
45.576 143.138 45.826 142.018 46.266 139.928 cv
49.356 139.928 li
49.356 140.638 li
46.856 140.638 li
46.716 141.338 46.586 141.898 46.466 142.318 cv
46.856 142.138 47.216 142.048 47.556 142.058 cv
47.896 142.078 48.216 142.158 48.536 142.298 cv
48.846 142.438 49.076 142.638 49.216 142.878 cv
49.356 143.128 49.466 143.378 49.526 143.628 cv
49.586 143.878 49.616 144.148 49.606 144.428 cv
49.586 144.718 49.526 145.008 49.426 145.308 cv
49.326 145.608 49.166 145.848 48.966 146.048 cv
48.756 146.248 48.506 146.398 48.206 146.518 cv
47.906 146.638 47.556 146.678 47.166 146.648 cv
46.776 146.628 46.406 146.478 46.056 146.218 cv
45.696 145.958 45.456 145.518 45.336 144.888 cv
46.036 144.698 li
f
57.176 112.862 mo
53.676 112.862 li
f
57.176 112.862 mo
53.676 112.862 li
@
30.526 112.34 mo
30.546 111.65 30.646 111.1 30.816 110.7 cv
30.986 110.3 31.226 109.96 31.546 109.7 cv
31.856 109.44 32.236 109.31 32.696 109.31 cv
33.146 109.31 33.546 109.5 33.886 109.88 cv
34.226 110.26 34.446 110.73 34.546 111.3 cv
34.646 111.88 34.686 112.54 34.646 113.28 cv
34.606 114.02 34.476 114.63 34.256 115.09 cv
34.036 115.56 33.696 115.88 33.256 116.06 cv
32.816 116.24 32.366 116.22 31.926 116 cv
31.486 115.78 31.176 115.49 30.996 115.13 cv
30.816 114.77 30.686 114.38 30.606 113.98 cv
30.526 113.58 30.496 113.03 30.526 112.34 cv
31.346 112.1 mo
31.266 112.82 31.286 113.45 31.426 114.01 cv
31.556 114.57 31.766 114.97 32.066 115.21 cv
32.366 115.45 32.666 115.49 32.986 115.35 cv
33.296 115.21 33.526 114.92 33.666 114.49 cv
33.806 114.06 33.886 113.59 33.886 113.08 cv
33.886 112.58 33.866 112.12 33.826 111.7 cv
33.786 111.28 33.666 110.9 33.476 110.56 cv
33.276 110.22 33.016 110.05 32.696 110.03 cv
32.366 110.02 32.076 110.18 31.836 110.52 cv
31.586 110.86 31.426 111.39 31.346 112.1 cv
f
36.856 116.1 mo
35.956 116.1 li
35.956 115.25 li
36.856 115.25 li
36.856 116.1 li
f
40.526 112.34 mo
40.546 111.65 40.646 111.1 40.816 110.7 cv
40.986 110.3 41.226 109.96 41.546 109.7 cv
41.856 109.44 42.236 109.31 42.696 109.31 cv
43.146 109.31 43.546 109.5 43.886 109.88 cv
44.226 110.26 44.446 110.73 44.546 111.3 cv
44.646 111.88 44.686 112.54 44.646 113.28 cv
44.606 114.02 44.476 114.63 44.256 115.09 cv
44.036 115.56 43.696 115.88 43.256 116.06 cv
42.816 116.24 42.366 116.22 41.926 116 cv
41.486 115.78 41.176 115.49 40.996 115.13 cv
40.816 114.77 40.686 114.38 40.606 113.98 cv
40.526 113.58 40.496 113.03 40.526 112.34 cv
41.346 112.1 mo
41.266 112.82 41.286 113.45 41.426 114.01 cv
41.556 114.57 41.766 114.97 42.066 115.21 cv
42.366 115.45 42.666 115.49 42.986 115.35 cv
43.296 115.21 43.526 114.92 43.666 114.49 cv
43.806 114.06 43.886 113.59 43.886 113.08 cv
43.886 112.58 43.866 112.12 43.826 111.7 cv
43.786 111.28 43.666 110.9 43.476 110.56 cv
43.276 110.22 43.016 110.05 42.696 110.03 cv
42.366 110.02 42.076 110.18 41.836 110.52 cv
41.586 110.86 41.426 111.39 41.346 112.1 cv
f
45.566 113.78 mo
45.586 113.4 45.656 113.08 45.776 112.82 cv
45.896 112.56 46.066 112.24 46.306 111.85 cv
47.906 109.35 li
48.806 109.35 li
47.166 111.92 li
47.866 111.74 48.426 111.77 48.846 112 cv
49.266 112.24 49.546 112.5 49.686 112.8 cv
49.826 113.1 49.906 113.43 49.926 113.78 cv
49.936 114.14 49.886 114.48 49.766 114.82 cv
49.646 115.16 49.436 115.46 49.136 115.73 cv
48.836 116.01 48.426 116.16 47.886 116.18 cv
47.346 116.21 46.896 116.11 46.516 115.89 cv
46.136 115.67 45.876 115.36 45.736 114.96 cv
45.596 114.56 45.536 114.16 45.566 113.78 cv
46.776 115.07 mo
47.006 115.32 47.316 115.46 47.716 115.48 cv
48.106 115.51 48.436 115.38 48.696 115.09 cv
48.956 114.81 49.086 114.39 49.086 113.84 cv
49.086 113.3 48.916 112.92 48.596 112.71 cv
48.266 112.5 47.896 112.42 47.496 112.47 cv
47.096 112.53 46.796 112.72 46.616 113.06 cv
46.436 113.4 46.356 113.76 46.386 114.14 cv
46.406 114.52 46.536 114.83 46.776 115.07 cv
f
57.176 82.3937 mo
53.676 82.3937 li
f
57.176 82.3937 mo
53.676 82.3937 li
@
30.526 81.8712 mo
30.546 81.1812 30.646 80.6312 30.816 80.2312 cv
30.986 79.8312 31.226 79.4912 31.546 79.2312 cv
31.856 78.9712 32.236 78.8412 32.696 78.8412 cv
33.146 78.8412 33.546 79.0312 33.886 79.4112 cv
34.226 79.7912 34.446 80.2612 34.546 80.8312 cv
34.646 81.4112 34.686 82.0712 34.646 82.8112 cv
34.606 83.5512 34.476 84.1612 34.256 84.6212 cv
34.036 85.0912 33.696 85.4112 33.256 85.5912 cv
32.816 85.7712 32.366 85.7512 31.926 85.5312 cv
31.486 85.3112 31.176 85.0212 30.996 84.6612 cv
30.816 84.3012 30.686 83.9112 30.606 83.5112 cv
30.526 83.1112 30.496 82.5612 30.526 81.8712 cv
31.346 81.6312 mo
31.266 82.3512 31.286 82.9812 31.426 83.5412 cv
31.556 84.1012 31.766 84.5012 32.066 84.7412 cv
32.366 84.9812 32.666 85.0212 32.986 84.8812 cv
33.296 84.7412 33.526 84.4512 33.666 84.0212 cv
33.806 83.5912 33.886 83.1212 33.886 82.6112 cv
33.886 82.1112 33.866 81.6512 33.826 81.2312 cv
33.786 80.8112 33.666 80.4312 33.476 80.0912 cv
33.276 79.7512 33.016 79.5812 32.696 79.5612 cv
32.366 79.5512 32.076 79.7112 31.836 80.0512 cv
31.586 80.3912 31.426 80.9212 31.346 81.6312 cv
f
36.856 85.6312 mo
35.956 85.6312 li
35.956 84.7812 li
36.856 84.7812 li
36.856 85.6312 li
f
40.526 81.8712 mo
40.546 81.1812 40.646 80.6312 40.816 80.2312 cv
40.986 79.8312 41.226 79.4912 41.546 79.2312 cv
41.856 78.9712 42.236 78.8412 42.696 78.8412 cv
43.146 78.8412 43.546 79.0312 43.886 79.4112 cv
44.226 79.7912 44.446 80.2612 44.546 80.8312 cv
44.646 81.4112 44.686 82.0712 44.646 82.8112 cv
44.606 83.5512 44.476 84.1612 44.256 84.6212 cv
44.036 85.0912 43.696 85.4112 43.256 85.5912 cv
42.816 85.7712 42.366 85.7512 41.926 85.5312 cv
41.486 85.3112 41.176 85.0212 40.996 84.6612 cv
40.816 84.3012 40.686 83.9112 40.606 83.5112 cv
40.526 83.1112 40.496 82.5612 40.526 81.8712 cv
41.346 81.6312 mo
41.266 82.3512 41.286 82.9812 41.426 83.5412 cv
41.556 84.1012 41.766 84.5012 42.066 84.7412 cv
42.366 84.9812 42.666 85.0212 42.986 84.8812 cv
43.296 84.7412 43.526 84.4512 43.666 84.0212 cv
43.806 83.5912 43.886 83.1212 43.886 82.6112 cv
43.886 82.1112 43.866 81.6512 43.826 81.2312 cv
43.786 80.8112 43.666 80.4312 43.476 80.0912 cv
43.276 79.7512 43.016 79.5812 42.696 79.5612 cv
42.366 79.5512 42.076 79.7112 41.836 80.0512 cv
41.586 80.3912 41.426 80.9212 41.346 81.6312 cv
f
46.506 85.6012 mo
46.966 83.6212 47.786 81.6612 48.966 79.7012 cv
45.606 79.7012 li
45.606 78.9912 li
49.786 78.9912 li
49.786 79.6612 li
48.556 81.6412 47.746 83.6212 47.366 85.6012 cv
46.506 85.6012 li
f
57.176 51.9252 mo
53.676 51.9252 li
f
57.176 51.9252 mo
53.676 51.9252 li
@
30.526 51.4027 mo
30.546 50.7127 30.646 50.1627 30.816 49.7627 cv
30.986 49.3627 31.226 49.0227 31.546 48.7627 cv
31.856 48.5027 32.236 48.3727 32.696 48.3727 cv
33.146 48.3727 33.546 48.5627 33.886 48.9427 cv
34.226 49.3227 34.446 49.7927 34.546 50.3627 cv
34.646 50.9427 34.686 51.6027 34.646 52.3427 cv
34.606 53.0827 34.476 53.6927 34.256 54.1527 cv
34.036 54.6227 33.696 54.9427 33.256 55.1227 cv
32.816 55.3027 32.366 55.2827 31.926 55.0627 cv
31.486 54.8427 31.176 54.5527 30.996 54.1927 cv
30.816 53.8327 30.686 53.4427 30.606 53.0427 cv
30.526 52.6427 30.496 52.0927 30.526 51.4027 cv
31.346 51.1627 mo
31.266 51.8827 31.286 52.5127 31.426 53.0727 cv
31.556 53.6327 31.766 54.0327 32.066 54.2727 cv
32.366 54.5127 32.666 54.5527 32.986 54.4127 cv
33.296 54.2727 33.526 53.9827 33.666 53.5527 cv
33.806 53.1227 33.886 52.6527 33.886 52.1427 cv
33.886 51.6427 33.866 51.1827 33.826 50.7627 cv
33.786 50.3427 33.666 49.9627 33.476 49.6227 cv
33.276 49.2827 33.016 49.1127 32.696 49.0927 cv
32.366 49.0827 32.076 49.2427 31.836 49.5827 cv
31.586 49.9227 31.426 50.4527 31.346 51.1627 cv
f
36.856 55.1627 mo
35.956 55.1627 li
35.956 54.3127 li
36.856 54.3127 li
36.856 55.1627 li
f
40.526 51.4027 mo
40.546 50.7127 40.646 50.1627 40.816 49.7627 cv
40.986 49.3627 41.226 49.0227 41.546 48.7627 cv
41.856 48.5027 42.236 48.3727 42.696 48.3727 cv
43.146 48.3727 43.546 48.5627 43.886 48.9427 cv
44.226 49.3227 44.446 49.7927 44.546 50.3627 cv
44.646 50.9427 44.686 51.6027 44.646 52.3427 cv
44.606 53.0827 44.476 53.6927 44.256 54.1527 cv
44.036 54.6227 43.696 54.9427 43.256 55.1227 cv
42.816 55.3027 42.366 55.2827 41.926 55.0627 cv
41.486 54.8427 41.176 54.5527 40.996 54.1927 cv
40.816 53.8327 40.686 53.4427 40.606 53.0427 cv
40.526 52.6427 40.496 52.0927 40.526 51.4027 cv
41.346 51.1627 mo
41.266 51.8827 41.286 52.5127 41.426 53.0727 cv
41.556 53.6327 41.766 54.0327 42.066 54.2727 cv
42.366 54.5127 42.666 54.5527 42.986 54.4127 cv
43.296 54.2727 43.526 53.9827 43.666 53.5527 cv
43.806 53.1227 43.886 52.6527 43.886 52.1427 cv
43.886 51.6427 43.866 51.1827 43.826 50.7627 cv
43.786 50.3427 43.666 49.9627 43.476 49.6227 cv
43.276 49.2827 43.016 49.1127 42.696 49.0927 cv
42.366 49.0827 42.076 49.2427 41.836 49.5827 cv
41.586 49.9227 41.426 50.4527 41.346 51.1627 cv
f
45.446 53.2127 mo
45.446 52.9027 45.516 52.5927 45.676 52.2927 cv
45.836 51.9927 46.096 51.7527 46.466 51.5727 cv
46.146 51.3927 45.936 51.1927 45.836 50.9727 cv
45.736 50.7527 45.676 50.4927 45.666 50.2027 cv
45.646 49.9227 45.686 49.6727 45.776 49.4627 cv
45.866 49.2627 46.006 49.0627 46.186 48.8827 cv
46.366 48.7027 46.576 48.5727 46.796 48.5127 cv
47.016 48.4527 47.256 48.4127 47.516 48.4127 cv
47.776 48.4127 48.006 48.4427 48.216 48.4927 cv
48.426 48.5427 48.646 48.6527 48.886 48.8227 cv
49.116 48.9927 49.286 49.2327 49.396 49.5427 cv
49.496 49.8627 49.496 50.2227 49.376 50.6427 cv
49.256 51.0627 48.946 51.3827 48.456 51.6127 cv
48.896 51.7527 49.216 51.9527 49.396 52.2227 cv
49.576 52.5027 49.666 52.8327 49.666 53.2227 cv
49.666 53.6127 49.606 53.9227 49.486 54.1527 cv
49.366 54.3927 49.236 54.5827 49.096 54.7427 cv
48.956 54.9027 48.756 55.0227 48.516 55.1127 cv
48.266 55.2027 47.956 55.2427 47.576 55.2427 cv
47.196 55.2427 46.876 55.2027 46.606 55.1127 cv
46.326 55.0227 46.096 54.8827 45.916 54.7027 cv
45.736 54.5227 45.606 54.3027 45.546 54.0527 cv
45.476 53.8127 45.446 53.5327 45.446 53.2127 cv
46.246 53.1727 mo
46.226 53.4927 46.286 53.7627 46.406 53.9927 cv
46.526 54.2327 46.736 54.3827 47.046 54.4427 cv
47.356 54.5127 47.686 54.5127 48.026 54.4327 cv
48.366 54.3527 48.596 54.1727 48.726 53.8827 cv
48.856 53.6027 48.906 53.3127 48.866 53.0227 cv
48.826 52.7427 48.656 52.5027 48.376 52.3027 cv
48.086 52.1027 47.776 52.0227 47.436 52.0427 cv
47.096 52.0727 46.816 52.1927 46.596 52.3927 cv
46.376 52.6027 46.256 52.8627 46.246 53.1727 cv
46.386 50.1327 mo
46.386 50.3927 46.476 50.6427 46.656 50.8727 cv
46.836 51.1127 47.126 51.2227 47.516 51.2227 cv
47.906 51.2227 48.196 51.1127 48.396 50.8727 cv
48.596 50.6427 48.686 50.3627 48.676 50.0327 cv
48.656 49.7127 48.536 49.4727 48.316 49.3127 cv
48.096 49.1527 47.796 49.0927 47.416 49.1127 cv
47.036 49.1427 46.776 49.2527 46.616 49.4427 cv
46.456 49.6427 46.386 49.8727 46.386 50.1327 cv
f
25.226 156.954 mo
25.656 157.384 li
25.036 158.044 24.396 158.534 23.716 158.854 cv
23.036 159.174 22.266 159.334 21.406 159.334 cv
20.556 159.334 19.786 159.174 19.106 158.854 cv
18.426 158.534 17.766 158.044 17.116 157.384 cv
17.546 156.954 li
18.126 157.554 18.716 158.004 19.326 158.304 cv
19.936 158.604 20.626 158.754 21.406 158.754 cv
22.196 158.754 22.896 158.604 23.506 158.304 cv
24.116 158.004 24.686 157.554 25.226 156.954 cv
f
22.856 152.074 mo
23.456 152.074 23.936 152.264 24.286 152.644 cv
24.636 153.024 24.806 153.534 24.806 154.184 cv
24.806 154.834 24.626 155.344 24.266 155.704 cv
23.906 156.074 23.446 156.254 22.896 156.254 cv
22.626 156.254 li
22.626 155.354 li
22.856 155.354 li
23.256 155.354 23.556 155.244 23.756 155.004 cv
23.966 154.774 24.066 154.504 24.066 154.184 cv
24.066 153.764 23.956 153.464 23.736 153.264 cv
23.516 153.074 23.256 152.974 22.936 152.974 cv
22.676 152.974 22.436 153.094 22.216 153.324 cv
21.996 153.564 21.786 153.894 21.606 154.334 cv
21.376 154.964 21.116 155.414 20.826 155.684 cv
20.546 155.964 20.206 156.094 19.806 156.094 cv
19.266 156.094 18.826 155.914 18.486 155.534 cv
18.146 155.154 17.976 154.704 17.976 154.184 cv
17.976 153.504 18.186 153.014 18.586 152.714 cv
18.986 152.414 19.426 152.264 19.886 152.264 cv
19.886 153.164 li
19.606 153.144 19.346 153.224 19.106 153.404 cv
18.876 153.584 18.756 153.844 18.756 154.184 cv
18.756 154.504 18.846 154.744 19.016 154.924 cv
19.186 155.104 19.416 155.194 19.696 155.194 cv
19.936 155.194 20.136 155.124 20.296 154.984 cv
20.466 154.844 20.666 154.474 20.906 153.874 cv
21.146 153.304 21.426 152.864 21.746 152.544 cv
22.066 152.234 22.436 152.074 22.856 152.074 cv
f
21.406 148.984 mo
22.266 148.984 23.036 149.154 23.716 149.474 cv
24.396 149.804 25.036 150.294 25.656 150.944 cv
25.226 151.374 li
24.686 150.774 24.116 150.324 23.506 150.024 cv
22.896 149.724 22.196 149.574 21.406 149.574 cv
20.626 149.574 19.936 149.724 19.326 150.024 cv
18.716 150.324 18.126 150.774 17.546 151.374 cv
17.116 150.944 li
17.766 150.294 18.426 149.804 19.106 149.474 cv
19.786 149.154 20.556 148.984 21.406 148.984 cv
f
23.246 193.714 mo
23.406 195.074 23.516 195.994 23.576 196.484 cv
23.646 196.984 23.736 197.324 23.836 197.504 cv
23.016 197.894 li
22.916 197.634 22.626 197.364 22.156 197.074 cv
21.686 196.794 21.086 196.564 20.356 196.404 cv
20.356 197.294 20.376 197.974 20.396 198.444 cv
19.656 198.444 li
19.686 197.944 19.696 196.944 19.696 195.434 cv
19.696 193.924 19.686 192.944 19.656 192.504 cv
20.396 192.504 li
20.376 192.944 20.356 193.964 20.356 195.554 cv
20.646 195.634 21.026 195.784 21.496 196.004 cv
21.966 196.224 22.446 196.494 22.936 196.804 cv
22.856 195.844 22.776 194.914 22.696 194.024 cv
22.366 194.214 21.986 194.474 21.566 194.804 cv
21.466 194.604 21.316 194.404 21.136 194.224 cv
21.766 193.724 22.546 193.194 23.476 192.624 cv
23.616 192.864 23.756 193.094 23.906 193.324 cv
23.676 193.454 23.456 193.584 23.246 193.714 cv
24.926 201.094 mo
24.406 200.294 24.096 199.754 23.986 199.494 cv
20.866 199.494 li
20.866 199.964 20.886 200.424 20.906 200.864 cv
20.156 200.864 li
20.186 200.374 20.196 199.894 20.196 199.414 cv
20.196 198.754 li
20.696 198.784 21.096 198.794 21.376 198.794 cv
23.836 198.794 li
24.516 198.254 24.856 197.214 24.866 195.694 cv
24.886 194.174 24.826 192.994 24.696 192.154 cv
25.016 192.334 25.326 192.454 25.616 192.504 cv
25.616 195.044 li
25.616 195.724 25.576 196.284 25.516 196.744 cv
25.456 197.204 25.366 197.584 25.246 197.894 cv
25.126 198.214 24.966 198.494 24.746 198.754 cv
24.526 199.014 24.576 199.324 24.886 199.674 cv
25.186 200.024 25.446 200.294 25.656 200.474 cv
25.446 200.654 25.206 200.864 24.926 201.094 cv
18.246 193.164 mo
18.226 193.664 18.206 194.404 18.206 195.394 cv
18.206 196.354 18.226 197.114 18.246 197.654 cv
17.506 197.654 li
17.536 197.194 17.546 196.454 17.546 195.434 cv
17.546 194.414 17.536 193.664 17.506 193.164 cv
18.246 193.164 li
19.026 199.304 mo
18.506 199.614 18.016 200.004 17.546 200.474 cv
17.076 199.924 li
17.806 199.244 18.296 198.834 18.556 198.674 cv
19.026 199.304 li
f
20.086 183.324 mo
20.086 182.834 20.076 182.374 20.046 181.954 cv
20.826 181.954 li
20.806 182.374 20.786 182.824 20.786 183.284 cv
20.786 183.834 li
25.036 183.834 li
25.346 183.814 25.556 183.904 25.676 184.124 cv
25.796 184.344 25.886 184.784 25.966 185.434 cv
25.656 185.494 25.346 185.634 25.036 185.864 cv
25.086 185.424 25.106 185.104 25.096 184.924 cv
25.076 184.744 24.946 184.644 24.696 184.614 cv
20.786 184.614 li
20.786 186.174 li
20.786 186.674 20.806 187.144 20.826 187.584 cv
20.046 187.584 li
20.076 187.114 20.086 186.644 20.086 186.174 cv
20.086 183.324 li
19.616 188.014 mo
19.746 188.254 19.916 188.424 20.126 188.544 cv
20.336 188.664 20.596 188.824 20.906 189.024 cv
24.416 189.024 li
24.756 189.024 25.266 189.014 25.966 188.984 cv
25.966 189.804 li
25.186 189.784 24.616 189.764 24.226 189.764 cv
21.726 189.764 li
22.116 190.004 22.506 190.324 22.896 190.704 cv
22.636 190.884 22.416 191.054 22.226 191.214 cv
21.666 190.614 21.116 190.154 20.596 189.814 cv
20.076 189.474 19.576 189.174 19.106 188.904 cv
19.266 188.644 19.436 188.354 19.616 188.014 cv
17.426 183.984 mo
17.426 183.544 17.416 183.094 17.386 182.624 cv
18.126 182.624 li
18.106 183.094 18.086 183.574 18.086 184.064 cv
18.086 185.514 li
18.086 186.094 18.106 186.584 18.126 186.994 cv
17.386 186.994 li
17.416 186.584 17.426 186.094 17.426 185.514 cv
17.426 183.984 li
17.226 188.364 mo
17.256 188.574 17.536 188.844 18.076 189.184 cv
18.616 189.524 19.206 189.994 19.846 190.584 cv
19.646 190.744 19.446 190.914 19.266 191.094 cv
18.846 190.684 18.396 190.304 17.916 189.964 cv
17.436 189.624 17.016 189.384 16.646 189.224 cv
16.806 188.964 16.996 188.684 17.226 188.364 cv
f
17.776 177.654 mo
18.716 177.684 19.856 177.694 21.176 177.694 cv
22.506 177.694 23.546 177.684 24.296 177.654 cv
24.296 178.474 li
23.556 178.474 li
23.556 180.044 li
24.846 180.044 li
24.846 180.864 li
23.646 180.844 22.456 180.824 21.256 180.824 cv
20.036 180.824 18.876 180.844 17.776 180.864 cv
17.776 177.654 li
18.946 173.984 mo
18.166 173.984 17.446 174.004 16.766 174.024 cv
16.766 173.164 li
17.446 173.194 18.166 173.204 18.946 173.204 cv
18.946 172.824 18.936 172.404 18.906 171.954 cv
19.656 171.954 li
19.636 172.404 19.616 172.824 19.616 173.204 cv
24.846 173.204 li
25.226 173.204 25.476 173.364 25.576 173.674 cv
25.676 173.994 25.756 174.394 25.816 174.884 cv
25.496 174.884 25.206 175.034 24.926 175.314 cv
24.966 174.824 24.976 174.484 24.956 174.284 cv
24.936 174.084 24.776 173.984 24.456 173.984 cv
19.616 173.984 li
19.616 175.294 19.636 176.384 19.656 177.264 cv
18.906 177.264 li
18.936 176.434 18.946 175.344 18.946 173.984 cv
22.896 178.474 mo
20.946 178.474 li
20.946 180.044 li
22.896 180.044 li
22.896 178.474 li
20.276 178.474 mo
18.446 178.474 li
18.446 180.044 li
20.276 180.044 li
20.276 178.474 li
20.666 176.054 mo
21.216 175.724 21.806 175.404 22.426 175.084 cv
22.506 175.344 22.626 175.624 22.776 175.904 cv
22.156 176.114 21.566 176.414 21.016 176.804 cv
20.916 176.564 20.806 176.314 20.666 176.054 cv
f
19.376 164.654 mo
19.876 164.684 20.306 164.694 20.666 164.694 cv
22.736 164.694 li
23.076 164.694 23.486 164.684 23.946 164.654 cv
23.946 168.594 li
23.486 168.574 23.066 168.554 22.696 168.554 cv
20.666 168.554 li
20.306 168.554 19.876 168.574 19.376 168.594 cv
19.376 164.654 li
17.306 162.544 mo
17.806 162.574 18.296 162.584 18.796 162.584 cv
24.536 162.584 li
25.126 162.564 25.486 162.724 25.616 163.074 cv
25.746 163.424 25.836 163.804 25.896 164.224 cv
25.576 164.254 25.266 164.354 24.956 164.534 cv
24.976 164.044 24.956 163.724 24.886 163.584 cv
24.806 163.444 24.636 163.364 24.376 163.364 cv
17.976 163.364 li
17.976 165.704 li
17.976 166.334 17.996 166.924 18.016 167.464 cv
17.266 167.464 li
17.296 166.924 17.306 166.334 17.306 165.704 cv
17.306 162.544 li
25.736 170.744 mo
25.216 170.694 24.676 170.664 24.106 170.664 cv
20.006 170.664 li
19.466 170.664 19.006 170.694 18.636 170.744 cv
18.636 169.844 li
19.036 169.874 19.406 169.884 19.766 169.884 cv
24.146 169.884 li
24.666 169.884 25.196 169.874 25.736 169.844 cv
25.736 170.744 li
23.326 165.434 mo
21.876 165.434 li
21.876 167.814 li
23.326 167.814 li
23.326 165.434 li
21.256 165.434 mo
20.006 165.434 li
20.006 167.814 li
21.256 167.814 li
21.256 165.434 li
16.646 169.224 mo
16.966 168.994 17.456 168.624 18.126 168.124 cv
18.266 168.414 18.406 168.684 18.556 168.944 cv
18.036 169.204 17.546 169.534 17.076 169.924 cv
16.876 169.644 16.726 169.404 16.646 169.224 cv
f
2 lw
2 lc
73.4087 295.064 mo
154.572 292.657 li
235.736 285.923 li
316.9 222.092 li
398.063 53.1439 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
gsave
69.9087 298.564 mo
76.9087 298.564 li
76.9087 291.564 li
69.9087 291.564 li
69.9087 298.564 li
clp
70.4087 298.064 mo
76.4087 298.064 li
76.4087 292.064 li
70.4087 292.064 li
cp
f
1 lw
0 lc
0 lj
70.4087 298.064 mo
76.4087 298.064 li
76.4087 292.064 li
70.4087 292.064 li
cp
@
grestore
gsave
151.072 296.157 mo
158.072 296.157 li
158.072 289.157 li
151.072 289.157 li
151.072 296.157 li
clp
151.572 295.657 mo
157.572 295.657 li
157.572 289.657 li
151.572 289.657 li
cp
f
1 lw
0 lc
0 lj
151.572 295.657 mo
157.572 295.657 li
157.572 289.657 li
151.572 289.657 li
cp
@
grestore
gsave
232.236 289.423 mo
239.236 289.423 li
239.236 282.423 li
232.236 282.423 li
232.236 289.423 li
clp
232.736 288.923 mo
238.736 288.923 li
238.736 282.923 li
232.736 282.923 li
cp
f
1 lw
0 lc
0 lj
232.736 288.923 mo
238.736 288.923 li
238.736 282.923 li
232.736 282.923 li
cp
@
grestore
gsave
313.4 225.592 mo
320.4 225.592 li
320.4 218.592 li
313.4 218.592 li
313.4 225.592 li
clp
313.9 225.092 mo
319.9 225.092 li
319.9 219.092 li
313.9 219.092 li
cp
f
1 lw
0 lc
0 lj
313.9 225.092 mo
319.9 225.092 li
319.9 219.092 li
313.9 219.092 li
cp
@
grestore
gsave
394.563 56.644 mo
401.563 56.644 li
401.563 49.644 li
394.563 49.644 li
394.563 56.644 li
clp
395.063 56.144 mo
401.063 56.144 li
401.063 50.144 li
395.063 50.144 li
cp
f
1 lw
0 lc
0 lj
395.063 56.144 mo
401.063 56.144 li
401.063 50.144 li
395.063 50.144 li
cp
@
grestore
.8 lw
0 lj
57.176 307.16 mo
57.176 41.0479 li
1 /0 /CSD get_res sepcs
1 sep
@
414.296 307.16 mo
414.296 41.0479 li
@
57.176 307.16 mo
414.296 307.16 li
@
57.176 41.0479 mo
414.296 41.0479 li
@
161.176 61.7979 mo
64.1759 61.7979 li
63.5861 61.7962 63.2387 61.6539 63.0295 61.4444 cv
62.82 61.2353 62.6777 60.8878 62.676 60.298 cv
62.676 48.0479 li
62.6777 47.4581 62.82 47.1107 63.0295 46.9014 cv
63.2387 46.692 63.5861 46.5497 64.1759 46.548 cv
161.176 46.548 li
161.766 46.5497 162.113 46.692 162.322 46.9014 cv
162.532 47.1107 162.674 47.4581 162.676 48.0479 cv
162.676 60.298 li
162.674 60.8878 162.532 61.2353 162.322 61.4444 cv
162.113 61.6539 161.766 61.7962 161.176 61.7979 cv
0 0 0 0 cmyk
f
161.187 62.7979 mo
161.183 62.7979 161.18 62.7979 161.176 62.7979 cv
64.1759 62.7979 li
64.1724 62.7979 64.1688 62.7979 64.1653 62.7979 cv
63.4262 62.7979 62.7778 62.6064 62.3224 62.1515 cv
61.8652 61.694 61.6741 61.0414 61.676 60.298 cv
61.676 48.0479 li
61.6741 47.3044 61.8652 46.6519 62.3224 46.1944 cv
62.7778 45.7394 63.4263 45.5479 64.1653 45.5479 cv
64.1688 45.5479 64.1723 45.548 64.1759 45.548 cv
161.176 45.548 li
161.179 45.548 161.183 45.5479 161.187 45.5479 cv
161.926 45.5479 162.574 45.7394 163.029 46.1944 cv
163.487 46.6519 163.678 47.3044 163.676 48.0479 cv
163.676 60.298 li
163.678 61.0414 163.487 61.694 163.029 62.1515 cv
162.574 62.6064 161.926 62.7979 161.187 62.7979 cv
64.1759 61.7979 mo
161.176 61.7979 li
161.766 61.7962 162.113 61.6539 162.322 61.4444 cv
162.532 61.2353 162.674 60.8878 162.676 60.298 cv
162.676 48.0479 li
162.674 47.4581 162.532 47.1107 162.322 46.9014 cv
162.113 46.692 161.766 46.5497 161.176 46.548 cv
64.1759 46.548 li
63.5861 46.5497 63.2387 46.692 63.0295 46.9014 cv
62.82 47.1107 62.6777 47.4581 62.676 48.0479 cv
62.676 60.298 li
62.6777 60.8878 62.82 61.2353 63.0295 61.4444 cv
63.2387 61.6539 63.5861 61.7962 64.1759 61.7979 cv
64.1759 61.7979 li
.159121 .120455 .125338 0 cmyk
f
2 lw
1 lj
66.176 53.5479 mo
86.176 53.5479 li
0 1 1 0 cmyk
@
73.176 56.5479 mo
79.176 56.5479 li
79.176 50.5479 li
73.176 50.5479 li
cp
f
1 lw
0 lc
0 lj
73.176 56.5479 mo
79.176 56.5479 li
79.176 50.5479 li
73.176 50.5479 li
cp
@
98.976 56.8479 mo
98.046 56.8479 li
97.496 54.7779 li
95.776 54.7779 li
95.226 56.8479 li
94.296 56.8479 li
96.246 50.0979 li
97.026 50.0979 li
98.976 56.8479 li
97.306 54.0379 mo
96.676 51.6579 li
96.596 51.6579 li
95.976 54.0379 li
97.306 54.0379 li
1 /0 /CSD get_res sepcs
1 sep
f
103.786 53.4979 mo
103.786 54.1179 103.736 54.6479 103.646 55.0779 cv
103.556 55.5079 103.406 55.8479 103.196 56.1079 cv
103.516 56.6979 li
102.886 57.3479 li
102.536 56.6979 li
102.426 56.7779 102.296 56.8379 102.136 56.8779 cv
101.976 56.9179 101.816 56.9279 101.636 56.9279 cv
100.956 56.9279 100.426 56.6679 100.036 56.1279 cv
99.636 55.5979 99.446 54.7179 99.446 53.4979 cv
99.446 52.2779 99.636 51.3979 100.036 50.8779 cv
100.426 50.3579 100.956 50.0979 101.636 50.0979 cv
102.316 50.0979 102.836 50.3579 103.216 50.8779 cv
103.596 51.3979 103.786 52.2779 103.786 53.4979 cv
102.846 53.4979 mo
102.846 52.3979 102.726 51.6879 102.496 51.3479 cv
102.256 51.0079 101.976 50.8379 101.636 50.8379 cv
101.296 50.8379 100.996 51.0079 100.756 51.3479 cv
100.506 51.6879 100.386 52.3979 100.386 53.4979 cv
100.386 54.5979 100.506 55.3179 100.756 55.6679 cv
100.996 56.0179 101.296 56.1879 101.636 56.1879 cv
101.766 56.1879 101.886 56.1679 101.986 56.1279 cv
102.086 56.0879 102.166 56.0479 102.226 55.9979 cv
101.596 54.7779 li
102.146 54.1179 li
102.696 55.1679 li
102.736 54.9079 102.776 54.6779 102.806 54.4679 cv
102.826 54.2679 102.846 53.9379 102.846 53.4979 cv
f
108.826 53.7279 mo
104.376 53.7279 li
104.376 53.0979 li
108.826 53.0979 li
108.826 53.7279 li
f
113.706 56.8479 mo
109.726 56.8479 li
109.726 50.1679 li
113.516 50.1679 li
113.516 50.9179 li
110.626 50.9179 li
110.626 52.9879 li
113.276 52.9879 li
113.276 53.7279 li
110.626 53.7279 li
110.626 56.1079 li
113.706 56.1079 li
113.706 56.8479 li
f
118.866 56.8479 mo
117.926 56.8479 li
116.596 54.1179 li
115.266 56.8479 li
114.336 56.8479 li
116.166 53.3379 li
114.526 50.1679 li
115.466 50.1679 li
116.596 52.5979 li
117.726 50.1679 li
118.666 50.1679 li
117.026 53.3379 li
118.866 56.8479 li
f
123.626 50.9179 mo
122.066 50.9179 li
122.066 56.8479 li
121.166 56.8479 li
121.166 50.9179 li
119.606 50.9179 li
119.606 50.1679 li
123.626 50.1679 li
123.626 50.9179 li
f
128.866 56.8479 mo
127.926 56.8479 li
126.516 53.9579 li
125.506 53.9579 li
125.506 56.8479 li
124.606 56.8479 li
124.606 50.1679 li
126.556 50.1679 li
127.176 50.1679 127.686 50.3179 128.076 50.6179 cv
128.466 50.9179 128.666 51.4079 128.666 52.0879 cv
128.666 52.6079 128.536 53.0179 128.276 53.2979 cv
128.016 53.5879 127.716 53.7679 127.376 53.8479 cv
128.866 56.8479 li
127.766 52.0879 mo
127.766 51.7279 127.656 51.4379 127.436 51.2279 cv
127.216 51.0279 126.856 50.9179 126.366 50.9179 cv
125.506 50.9179 li
125.506 53.2179 li
126.596 53.2179 li
126.906 53.2179 127.176 53.1379 127.416 52.9679 cv
127.646 52.7979 127.766 52.5079 127.766 52.0879 cv
f
133.976 56.8479 mo
133.046 56.8479 li
132.496 54.7779 li
130.776 54.7779 li
130.226 56.8479 li
129.296 56.8479 li
131.246 50.0979 li
132.026 50.0979 li
133.976 56.8479 li
132.306 54.0379 mo
131.676 51.6579 li
131.596 51.6579 li
130.976 54.0379 li
132.306 54.0379 li
f
138.826 53.7279 mo
134.376 53.7279 li
134.376 53.0979 li
138.826 53.0979 li
138.826 53.7279 li
f
143.746 53.5279 mo
143.746 54.7279 143.486 55.5879 142.986 56.0879 cv
142.476 56.5979 141.796 56.8479 140.936 56.8479 cv
139.606 56.8479 li
139.606 50.1679 li
140.936 50.1679 li
141.896 50.1679 142.596 50.4379 143.056 50.9579 cv
143.516 51.4779 143.746 52.3379 143.746 53.5279 cv
142.806 53.5279 mo
142.806 52.5679 142.646 51.8979 142.336 51.5079 cv
142.026 51.1179 141.556 50.9179 140.936 50.9179 cv
140.506 50.9179 li
140.506 56.1079 li
140.936 56.1079 li
141.556 56.1079 142.026 55.9279 142.336 55.5479 cv
142.646 55.1679 142.806 54.4979 142.806 53.5279 cv
f
147.066 56.8479 mo
146.166 56.8479 li
146.166 50.1679 li
147.066 50.1679 li
147.066 56.8479 li
f
153.976 56.8479 mo
153.046 56.8479 li
152.496 54.7779 li
150.776 54.7779 li
150.226 56.8479 li
149.296 56.8479 li
151.246 50.0979 li
152.026 50.0979 li
153.976 56.8479 li
152.306 54.0379 mo
151.676 51.6579 li
151.596 51.6579 li
150.976 54.0379 li
152.306 54.0379 li
f
158.626 56.9279 mo
157.966 56.9279 li
157.846 56.3879 li
157.746 56.5479 157.576 56.6779 157.356 56.7779 cv
157.136 56.8779 156.896 56.9279 156.636 56.9279 cv
156.086 56.9279 155.596 56.6779 155.166 56.1679 cv
154.736 55.6679 154.526 54.8479 154.526 53.7279 cv
154.526 52.5079 154.716 51.5979 155.106 50.9979 cv
155.496 50.3979 156.036 50.0979 156.716 50.0979 cv
157.316 50.0979 157.776 50.3179 158.116 50.7579 cv
158.456 51.1979 158.626 51.7779 158.626 52.4779 cv
157.766 52.4779 li
157.766 51.9379 157.676 51.5279 157.496 51.2479 cv
157.316 50.9779 157.056 50.8379 156.716 50.8379 cv
156.296 50.8379 155.976 51.0579 155.776 51.4879 cv
155.566 51.9179 155.466 52.6379 155.466 53.6479 cv
155.466 54.6179 155.596 55.2879 155.856 55.6479 cv
156.116 56.0079 156.416 56.1879 156.756 56.1879 cv
157.096 56.1879 157.356 56.0679 157.556 55.8179 cv
157.746 55.5779 157.846 55.1879 157.846 54.6679 cv
157.846 54.2379 li
156.636 54.2379 li
156.636 53.4979 li
158.626 53.4979 li
158.626 56.9279 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
