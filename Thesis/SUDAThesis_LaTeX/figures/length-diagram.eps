%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: length-diagram.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: Kansx
%%CreationDate: 2021/1/10, 17:02:36
%%BoundingBox: 0 0 461 344
%%HiResBoundingBox: 0 0 460.8000 343.4757
%%CropBox: 0 0 460.8000 343.4757
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 571 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2021-01-10T17:01:26+08:00"
   xmp:CreatorTool="matplotlib 3.0.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend 3.0.2"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -343.476 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 343.476 li
460.8 343.476 li
460.8 0 li
cp
clp
gsave
0 343.752 mo
461 343.752 li
461 -.248124 li
0 -.248124 li
0 343.752 li
clp
0 344.752 mo
460.8 344.752 li
460.8 -.848123 li
0 -.848123 li
0 344.752 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
57.6 306.736 mo
414.72 306.736 li
414.72 40.6239 li
57.6 40.6239 li
57.6 306.736 li
f
73.8327 306.736 mo
73.8327 310.236 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
73.8327 306.736 mo
73.8327 310.236 li
@
43.3627 320.958 mo
39.3827 320.958 li
39.3827 314.278 li
43.1727 314.278 li
43.1727 315.028 li
40.2827 315.028 li
40.2827 317.098 li
42.9327 317.098 li
42.9327 317.838 li
40.2827 317.838 li
40.2827 320.218 li
43.3627 320.218 li
43.3627 320.958 li
f
48.4827 321.458 mo
48.0527 321.888 li
47.3927 321.268 46.9027 320.628 46.5827 319.948 cv
46.2627 319.268 46.1027 318.498 46.1027 317.638 cv
46.1027 316.788 46.2627 316.018 46.5827 315.338 cv
46.9027 314.658 47.3927 313.998 48.0527 313.348 cv
48.4827 313.778 li
47.8827 314.358 47.4327 314.948 47.1327 315.558 cv
46.8327 316.168 46.6827 316.858 46.6827 317.638 cv
46.6827 318.428 46.8327 319.128 47.1327 319.738 cv
47.4327 320.348 47.8827 320.918 48.4827 321.458 cv
f
51.0227 315.528 mo
50.6827 315.868 50.2527 316.198 49.7327 316.508 cv
49.7327 315.768 li
50.3827 315.328 50.9127 314.808 51.3327 314.208 cv
51.8027 314.208 li
51.8027 320.928 li
51.0227 320.928 li
51.0227 315.528 li
f
55.5527 320.958 mo
55.0427 322.008 li
54.6527 322.008 li
55.0427 320.958 li
54.6527 320.958 li
54.6527 320.108 li
55.5527 320.108 li
55.5527 320.958 li
f
59.6927 319.088 mo
59.8727 319.788 60.1827 320.178 60.6227 320.258 cv
61.0627 320.338 61.4227 320.298 61.7027 320.128 cv
61.9727 319.958 62.1627 319.738 62.2827 319.458 cv
62.4027 319.188 62.4527 318.878 62.4427 318.538 cv
62.4227 318.198 62.3327 317.918 62.1727 317.678 cv
62.0027 317.448 61.7827 317.298 61.5227 317.218 cv
61.2627 317.138 60.9627 317.138 60.6427 317.218 cv
60.3227 317.298 60.0527 317.478 59.8527 317.758 cv
59.1827 317.678 li
59.2327 317.528 59.4827 316.408 59.9227 314.318 cv
63.0127 314.318 li
63.0127 315.028 li
60.5127 315.028 li
60.3727 315.728 60.2427 316.288 60.1227 316.708 cv
60.5127 316.528 60.8727 316.438 61.2127 316.448 cv
61.5527 316.468 61.8727 316.548 62.1927 316.688 cv
62.5027 316.828 62.7327 317.028 62.8727 317.268 cv
63.0127 317.518 63.1227 317.768 63.1827 318.018 cv
63.2427 318.268 63.2727 318.538 63.2627 318.818 cv
63.2427 319.108 63.1827 319.398 63.0827 319.698 cv
62.9827 319.998 62.8227 320.238 62.6227 320.438 cv
62.4127 320.638 62.1627 320.788 61.8627 320.908 cv
61.5627 321.028 61.2127 321.068 60.8227 321.038 cv
60.4327 321.018 60.0627 320.868 59.7127 320.608 cv
59.3527 320.348 59.1127 319.908 58.9927 319.278 cv
59.6927 319.088 li
f
65.5527 320.958 mo
65.0427 322.008 li
64.6527 322.008 li
65.0427 320.958 li
64.6527 320.958 li
64.6527 320.108 li
65.5527 320.108 li
65.5527 320.958 li
f
69.1827 317.198 mo
69.2027 316.508 69.3027 315.958 69.4727 315.558 cv
69.6427 315.158 69.8827 314.818 70.2027 314.558 cv
70.5127 314.298 70.8927 314.168 71.3527 314.168 cv
71.8027 314.168 72.2027 314.358 72.5427 314.738 cv
72.8827 315.118 73.1027 315.588 73.2027 316.158 cv
73.3027 316.738 73.3427 317.398 73.3027 318.138 cv
73.2627 318.878 73.1327 319.488 72.9127 319.948 cv
72.6927 320.418 72.3527 320.738 71.9127 320.918 cv
71.4727 321.098 71.0227 321.078 70.5827 320.858 cv
70.1427 320.638 69.8327 320.348 69.6527 319.988 cv
69.4727 319.628 69.3427 319.238 69.2627 318.838 cv
69.1827 318.438 69.1527 317.888 69.1827 317.198 cv
70.0027 316.958 mo
69.9227 317.678 69.9427 318.308 70.0827 318.868 cv
70.2127 319.428 70.4227 319.828 70.7227 320.068 cv
71.0227 320.308 71.3227 320.348 71.6427 320.208 cv
71.9527 320.068 72.1827 319.778 72.3227 319.348 cv
72.4627 318.918 72.5427 318.448 72.5427 317.938 cv
72.5427 317.438 72.5227 316.978 72.4827 316.558 cv
72.4427 316.138 72.3227 315.758 72.1327 315.418 cv
71.9327 315.078 71.6727 314.908 71.3527 314.888 cv
71.0227 314.878 70.7327 315.038 70.4927 315.378 cv
70.2427 315.718 70.0827 316.248 70.0027 316.958 cv
f
75.5527 320.958 mo
75.0427 322.008 li
74.6527 322.008 li
75.0427 320.958 li
74.6527 320.958 li
74.6527 320.108 li
75.5527 320.108 li
75.5527 320.958 li
f
81.0227 315.528 mo
80.6827 315.868 80.2527 316.198 79.7327 316.508 cv
79.7327 315.768 li
80.3827 315.328 80.9127 314.808 81.3327 314.208 cv
81.8027 314.208 li
81.8027 320.928 li
81.0227 320.928 li
81.0227 315.528 li
f
85.1627 320.928 mo
85.6227 318.948 86.4427 316.988 87.6227 315.028 cv
84.2627 315.028 li
84.2627 314.318 li
88.4427 314.318 li
88.4427 314.988 li
87.2127 316.968 86.4027 318.948 86.0227 320.928 cv
85.1627 320.928 li
f
90.5527 320.958 mo
90.0427 322.008 li
89.6527 322.008 li
90.0427 320.958 li
89.6527 320.958 li
89.6527 320.108 li
90.5527 320.108 li
90.5527 320.958 li
f
96.0227 315.528 mo
95.6827 315.868 95.2527 316.198 94.7327 316.508 cv
94.7327 315.768 li
95.3827 315.328 95.9127 314.808 96.3327 314.208 cv
96.8027 314.208 li
96.8027 320.928 li
96.0227 320.928 li
96.0227 315.528 li
f
99.1827 317.198 mo
99.2027 316.508 99.3027 315.958 99.4727 315.558 cv
99.6427 315.158 99.8827 314.818 100.203 314.558 cv
100.513 314.298 100.893 314.168 101.353 314.168 cv
101.803 314.168 102.203 314.358 102.543 314.738 cv
102.883 315.118 103.103 315.588 103.203 316.158 cv
103.303 316.738 103.343 317.398 103.303 318.138 cv
103.263 318.878 103.133 319.488 102.913 319.948 cv
102.693 320.418 102.353 320.738 101.913 320.918 cv
101.473 321.098 101.023 321.078 100.583 320.858 cv
100.143 320.638 99.8327 320.348 99.6527 319.988 cv
99.4727 319.628 99.3427 319.238 99.2627 318.838 cv
99.1827 318.438 99.1527 317.888 99.1827 317.198 cv
100.003 316.958 mo
99.9227 317.678 99.9427 318.308 100.083 318.868 cv
100.213 319.428 100.423 319.828 100.723 320.068 cv
101.023 320.308 101.323 320.348 101.643 320.208 cv
101.953 320.068 102.183 319.778 102.323 319.348 cv
102.463 318.918 102.543 318.448 102.543 317.938 cv
102.543 317.438 102.523 316.978 102.483 316.558 cv
102.443 316.138 102.323 315.758 102.133 315.418 cv
101.933 315.078 101.673 314.908 101.353 314.888 cv
101.023 314.878 100.733 315.038 100.493 315.378 cv
100.243 315.718 100.083 316.248 100.003 316.958 cv
f
106.453 317.638 mo
106.453 318.498 106.283 319.268 105.963 319.948 cv
105.633 320.628 105.143 321.268 104.493 321.888 cv
104.063 321.458 li
104.663 320.918 105.113 320.348 105.413 319.738 cv
105.713 319.128 105.863 318.428 105.863 317.638 cv
105.863 316.858 105.713 316.168 105.413 315.558 cv
105.113 314.948 104.663 314.358 104.063 313.778 cv
104.493 313.348 li
105.143 313.998 105.633 314.658 105.963 315.338 cv
106.283 316.018 106.453 316.788 106.453 317.638 cv
f
154.996 306.736 mo
154.996 310.236 li
f
154.996 306.736 mo
154.996 310.236 li
@
124.526 320.958 mo
120.546 320.958 li
120.546 314.278 li
124.336 314.278 li
124.336 315.028 li
121.446 315.028 li
121.446 317.098 li
124.096 317.098 li
124.096 317.838 li
121.446 317.838 li
121.446 320.218 li
124.526 320.218 li
124.526 320.958 li
f
129.646 321.458 mo
129.216 321.888 li
128.556 321.268 128.066 320.628 127.746 319.948 cv
127.426 319.268 127.266 318.498 127.266 317.638 cv
127.266 316.788 127.426 316.018 127.746 315.338 cv
128.066 314.658 128.556 313.998 129.216 313.348 cv
129.646 313.778 li
129.046 314.358 128.596 314.948 128.296 315.558 cv
127.996 316.168 127.846 316.858 127.846 317.638 cv
127.846 318.428 127.996 319.128 128.296 319.738 cv
128.596 320.348 129.046 320.918 129.646 321.458 cv
f
130.466 320.768 mo
130.486 320.378 130.666 320.028 131.006 319.718 cv
131.346 319.408 131.776 318.918 132.296 318.248 cv
132.816 317.588 133.156 317.068 133.316 316.708 cv
133.466 316.348 133.526 316.028 133.486 315.768 cv
133.446 315.508 133.326 315.298 133.116 315.128 cv
132.906 314.958 132.666 314.888 132.396 314.908 cv
132.116 314.938 131.856 315.048 131.616 315.228 cv
131.366 315.408 131.176 315.678 131.046 316.038 cv
130.306 315.928 li
130.516 315.328 130.786 314.898 131.106 314.618 cv
131.426 314.348 131.816 314.198 132.266 314.168 cv
132.526 314.148 132.756 314.148 132.966 314.188 cv
133.166 314.228 133.386 314.328 133.606 314.468 cv
133.826 314.608 134.016 314.828 134.156 315.108 cv
134.296 315.388 134.356 315.738 134.316 316.138 cv
134.276 316.548 134.066 317.028 133.706 317.588 cv
133.336 318.148 132.636 319.028 131.596 320.218 cv
134.406 320.218 li
134.406 320.928 li
130.466 320.928 li
130.466 320.768 li
f
136.716 320.958 mo
136.206 322.008 li
135.816 322.008 li
136.206 320.958 li
135.816 320.958 li
135.816 320.108 li
136.716 320.108 li
136.716 320.958 li
f
141.326 320.928 mo
141.786 318.948 142.606 316.988 143.786 315.028 cv
140.426 315.028 li
140.426 314.318 li
144.606 314.318 li
144.606 314.988 li
143.376 316.968 142.566 318.948 142.186 320.928 cv
141.326 320.928 li
f
146.716 320.958 mo
146.206 322.008 li
145.816 322.008 li
146.206 320.958 li
145.816 320.958 li
145.816 320.108 li
146.716 320.108 li
146.716 320.958 li
f
150.346 317.198 mo
150.366 316.508 150.466 315.958 150.636 315.558 cv
150.806 315.158 151.046 314.818 151.366 314.558 cv
151.676 314.298 152.056 314.168 152.516 314.168 cv
152.966 314.168 153.366 314.358 153.706 314.738 cv
154.046 315.118 154.266 315.588 154.366 316.158 cv
154.466 316.738 154.506 317.398 154.466 318.138 cv
154.426 318.878 154.296 319.488 154.076 319.948 cv
153.856 320.418 153.516 320.738 153.076 320.918 cv
152.636 321.098 152.186 321.078 151.746 320.858 cv
151.306 320.638 150.996 320.348 150.816 319.988 cv
150.636 319.628 150.506 319.238 150.426 318.838 cv
150.346 318.438 150.316 317.888 150.346 317.198 cv
151.166 316.958 mo
151.086 317.678 151.106 318.308 151.246 318.868 cv
151.376 319.428 151.586 319.828 151.886 320.068 cv
152.186 320.308 152.486 320.348 152.806 320.208 cv
153.116 320.068 153.346 319.778 153.486 319.348 cv
153.626 318.918 153.706 318.448 153.706 317.938 cv
153.706 317.438 153.686 316.978 153.646 316.558 cv
153.606 316.138 153.486 315.758 153.296 315.418 cv
153.096 315.078 152.836 314.908 152.516 314.888 cv
152.186 314.878 151.896 315.038 151.656 315.378 cv
151.406 315.718 151.246 316.248 151.166 316.958 cv
f
156.716 320.958 mo
156.206 322.008 li
155.816 322.008 li
156.206 320.958 li
155.816 320.958 li
155.816 320.108 li
156.716 320.108 li
156.716 320.958 li
f
160.466 320.768 mo
160.486 320.378 160.666 320.028 161.006 319.718 cv
161.346 319.408 161.776 318.918 162.296 318.248 cv
162.816 317.588 163.156 317.068 163.316 316.708 cv
163.466 316.348 163.526 316.028 163.486 315.768 cv
163.446 315.508 163.326 315.298 163.116 315.128 cv
162.906 314.958 162.666 314.888 162.396 314.908 cv
162.116 314.938 161.856 315.048 161.616 315.228 cv
161.366 315.408 161.176 315.678 161.046 316.038 cv
160.306 315.928 li
160.516 315.328 160.786 314.898 161.106 314.618 cv
161.426 314.348 161.816 314.198 162.266 314.168 cv
162.526 314.148 162.756 314.148 162.966 314.188 cv
163.166 314.228 163.386 314.328 163.606 314.468 cv
163.826 314.608 164.016 314.828 164.156 315.108 cv
164.296 315.388 164.356 315.738 164.316 316.138 cv
164.276 316.548 164.066 317.028 163.706 317.588 cv
163.336 318.148 162.636 319.028 161.596 320.218 cv
164.406 320.218 li
164.406 320.928 li
160.466 320.928 li
160.466 320.768 li
f
165.346 317.198 mo
165.366 316.508 165.466 315.958 165.636 315.558 cv
165.806 315.158 166.046 314.818 166.366 314.558 cv
166.676 314.298 167.056 314.168 167.516 314.168 cv
167.966 314.168 168.366 314.358 168.706 314.738 cv
169.046 315.118 169.266 315.588 169.366 316.158 cv
169.466 316.738 169.506 317.398 169.466 318.138 cv
169.426 318.878 169.296 319.488 169.076 319.948 cv
168.856 320.418 168.516 320.738 168.076 320.918 cv
167.636 321.098 167.186 321.078 166.746 320.858 cv
166.306 320.638 165.996 320.348 165.816 319.988 cv
165.636 319.628 165.506 319.238 165.426 318.838 cv
165.346 318.438 165.316 317.888 165.346 317.198 cv
166.166 316.958 mo
166.086 317.678 166.106 318.308 166.246 318.868 cv
166.376 319.428 166.586 319.828 166.886 320.068 cv
167.186 320.308 167.486 320.348 167.806 320.208 cv
168.116 320.068 168.346 319.778 168.486 319.348 cv
168.626 318.918 168.706 318.448 168.706 317.938 cv
168.706 317.438 168.686 316.978 168.646 316.558 cv
168.606 316.138 168.486 315.758 168.296 315.418 cv
168.096 315.078 167.836 314.908 167.516 314.888 cv
167.186 314.878 166.896 315.038 166.656 315.378 cv
166.406 315.718 166.246 316.248 166.166 316.958 cv
f
171.716 320.958 mo
171.206 322.008 li
170.816 322.008 li
171.206 320.958 li
170.816 320.958 li
170.816 320.108 li
171.716 320.108 li
171.716 320.958 li
f
177.186 315.528 mo
176.846 315.868 176.416 316.198 175.896 316.508 cv
175.896 315.768 li
176.546 315.328 177.076 314.808 177.496 314.208 cv
177.966 314.208 li
177.966 320.928 li
177.186 320.928 li
177.186 315.528 li
f
183.126 319.438 mo
180.116 319.438 li
180.116 318.778 li
183.276 314.208 li
183.866 314.208 li
183.866 318.778 li
184.796 318.778 li
184.796 319.438 li
183.866 319.438 li
183.866 320.928 li
183.126 320.928 li
183.126 319.438 li
183.126 318.778 mo
183.126 315.688 li
180.936 318.778 li
183.126 318.778 li
f
187.616 317.638 mo
187.616 318.498 187.446 319.268 187.126 319.948 cv
186.796 320.628 186.306 321.268 185.656 321.888 cv
185.226 321.458 li
185.826 320.918 186.276 320.348 186.576 319.738 cv
186.876 319.128 187.026 318.428 187.026 317.638 cv
187.026 316.858 186.876 316.168 186.576 315.558 cv
186.276 314.948 185.826 314.358 185.226 313.778 cv
185.656 313.348 li
186.306 313.998 186.796 314.658 187.126 315.338 cv
187.446 316.018 187.616 316.788 187.616 317.638 cv
f
236.16 306.736 mo
236.16 310.236 li
f
236.16 306.736 mo
236.16 310.236 li
@
203.19 320.958 mo
199.21 320.958 li
199.21 314.278 li
203 314.278 li
203 315.028 li
200.11 315.028 li
200.11 317.098 li
202.76 317.098 li
202.76 317.838 li
200.11 317.838 li
200.11 320.218 li
203.19 320.218 li
203.19 320.958 li
f
208.31 321.458 mo
207.88 321.888 li
207.22 321.268 206.73 320.628 206.41 319.948 cv
206.09 319.268 205.93 318.498 205.93 317.638 cv
205.93 316.788 206.09 316.018 206.41 315.338 cv
206.73 314.658 207.22 313.998 207.88 313.348 cv
208.31 313.778 li
207.71 314.358 207.26 314.948 206.96 315.558 cv
206.66 316.168 206.51 316.858 206.51 317.638 cv
206.51 318.428 206.66 319.128 206.96 319.738 cv
207.26 320.348 207.71 320.918 208.31 321.458 cv
f
209.05 319.248 mo
209.75 319.128 li
209.85 319.468 210.02 319.748 210.26 319.968 cv
210.49 320.188 210.78 320.298 211.14 320.278 cv
211.49 320.268 211.77 320.128 211.98 319.848 cv
212.18 319.578 212.27 319.268 212.25 318.918 cv
212.22 318.568 212.08 318.298 211.84 318.098 cv
211.59 317.898 211.19 317.758 210.65 317.678 cv
210.65 317.178 li
211.19 317.128 211.59 316.988 211.84 316.748 cv
212.08 316.508 212.19 316.208 212.17 315.828 cv
212.15 315.448 211.98 315.178 211.67 315.008 cv
211.35 314.838 211.02 314.818 210.67 314.948 cv
210.31 315.078 210.03 315.438 209.83 316.038 cv
209.13 315.928 li
209.28 315.458 209.49 315.068 209.77 314.748 cv
210.04 314.438 210.41 314.258 210.88 314.208 cv
211.35 314.158 211.76 314.218 212.11 314.388 cv
212.46 314.558 212.71 314.818 212.85 315.168 cv
212.99 315.518 213.01 315.898 212.91 316.318 cv
212.81 316.738 212.51 317.098 212.02 317.408 cv
212.38 317.568 212.66 317.798 212.86 318.108 cv
213.05 318.428 213.11 318.838 213.05 319.348 cv
212.99 319.858 212.76 320.268 212.37 320.578 cv
211.98 320.888 211.54 321.038 211.04 321.018 cv
210.54 321.008 210.11 320.858 209.75 320.558 cv
209.39 320.258 209.15 319.828 209.05 319.248 cv
f
215.38 320.958 mo
214.87 322.008 li
214.48 322.008 li
214.87 320.958 li
214.48 320.958 li
214.48 320.108 li
215.38 320.108 li
215.38 320.958 li
f
219.91 321.038 mo
220.48 320.078 220.95 319.208 221.32 318.428 cv
220.66 318.528 220.12 318.448 219.69 318.168 cv
219.26 317.898 219 317.528 218.91 317.058 cv
218.82 316.598 218.83 316.168 218.93 315.788 cv
219.03 315.408 219.2 315.098 219.42 314.848 cv
219.64 314.608 219.9 314.428 220.22 314.328 cv
220.53 314.228 220.81 314.168 221.06 314.168 cv
221.3 314.168 221.56 314.228 221.82 314.328 cv
222.08 314.428 222.31 314.588 222.52 314.798 cv
222.73 315.008 222.87 315.218 222.95 315.438 cv
223.03 315.658 223.07 315.948 223.07 316.298 cv
223.07 316.648 222.94 317.098 222.68 317.638 cv
222.42 318.188 221.78 319.318 220.77 321.038 cv
219.91 321.038 li
219.69 316.668 mo
219.73 317.008 219.87 317.288 220.12 317.508 cv
220.37 317.728 220.64 317.828 220.93 317.798 cv
221.21 317.778 221.44 317.698 221.61 317.568 cv
221.77 317.438 221.94 317.218 222.1 316.898 cv
222.2 316.518 222.22 316.188 222.17 315.908 cv
222.12 315.638 221.98 315.408 221.76 315.228 cv
221.54 315.048 221.3 314.948 221.04 314.948 cv
220.88 314.928 220.68 314.968 220.44 315.068 cv
220.19 315.168 219.99 315.378 219.85 315.688 cv
219.71 316.008 219.65 316.328 219.69 316.668 cv
f
225.38 320.958 mo
224.87 322.008 li
224.48 322.008 li
224.87 320.958 li
224.48 320.958 li
224.48 320.108 li
225.38 320.108 li
225.38 320.958 li
f
229.01 317.198 mo
229.03 316.508 229.13 315.958 229.3 315.558 cv
229.47 315.158 229.71 314.818 230.03 314.558 cv
230.34 314.298 230.72 314.168 231.18 314.168 cv
231.63 314.168 232.03 314.358 232.37 314.738 cv
232.71 315.118 232.93 315.588 233.03 316.158 cv
233.13 316.738 233.17 317.398 233.13 318.138 cv
233.09 318.878 232.96 319.488 232.74 319.948 cv
232.52 320.418 232.18 320.738 231.74 320.918 cv
231.3 321.098 230.85 321.078 230.41 320.858 cv
229.97 320.638 229.66 320.348 229.48 319.988 cv
229.3 319.628 229.17 319.238 229.09 318.838 cv
229.01 318.438 228.98 317.888 229.01 317.198 cv
229.83 316.958 mo
229.75 317.678 229.77 318.308 229.91 318.868 cv
230.04 319.428 230.25 319.828 230.55 320.068 cv
230.85 320.308 231.15 320.348 231.47 320.208 cv
231.78 320.068 232.01 319.778 232.15 319.348 cv
232.29 318.918 232.37 318.448 232.37 317.938 cv
232.37 317.438 232.35 316.978 232.31 316.558 cv
232.27 316.138 232.15 315.758 231.96 315.418 cv
231.76 315.078 231.5 314.908 231.18 314.888 cv
230.85 314.878 230.56 315.038 230.32 315.378 cv
230.07 315.718 229.91 316.248 229.83 316.958 cv
f
235.38 320.958 mo
234.87 322.008 li
234.48 322.008 li
234.87 320.958 li
234.48 320.958 li
234.48 320.108 li
235.38 320.108 li
235.38 320.958 li
f
239.05 319.248 mo
239.75 319.128 li
239.85 319.468 240.02 319.748 240.26 319.968 cv
240.49 320.188 240.78 320.298 241.14 320.278 cv
241.49 320.268 241.77 320.128 241.98 319.848 cv
242.18 319.578 242.27 319.268 242.25 318.918 cv
242.22 318.568 242.08 318.298 241.84 318.098 cv
241.59 317.898 241.19 317.758 240.65 317.678 cv
240.65 317.178 li
241.19 317.128 241.59 316.988 241.84 316.748 cv
242.08 316.508 242.19 316.208 242.17 315.828 cv
242.15 315.448 241.98 315.178 241.67 315.008 cv
241.35 314.838 241.02 314.818 240.67 314.948 cv
240.31 315.078 240.03 315.438 239.83 316.038 cv
239.13 315.928 li
239.28 315.458 239.49 315.068 239.77 314.748 cv
240.04 314.438 240.41 314.258 240.88 314.208 cv
241.35 314.158 241.76 314.218 242.11 314.388 cv
242.46 314.558 242.71 314.818 242.85 315.168 cv
242.99 315.518 243.01 315.898 242.91 316.318 cv
242.81 316.738 242.51 317.098 242.02 317.408 cv
242.38 317.568 242.66 317.798 242.86 318.108 cv
243.05 318.428 243.11 318.838 243.05 319.348 cv
242.99 319.858 242.76 320.268 242.37 320.578 cv
241.98 320.888 241.54 321.038 241.04 321.018 cv
240.54 321.008 240.11 320.858 239.75 320.558 cv
239.39 320.258 239.15 319.828 239.05 319.248 cv
f
244.05 319.248 mo
244.75 319.128 li
244.85 319.468 245.02 319.748 245.26 319.968 cv
245.49 320.188 245.78 320.298 246.14 320.278 cv
246.49 320.268 246.77 320.128 246.98 319.848 cv
247.18 319.578 247.27 319.268 247.25 318.918 cv
247.22 318.568 247.08 318.298 246.84 318.098 cv
246.59 317.898 246.19 317.758 245.65 317.678 cv
245.65 317.178 li
246.19 317.128 246.59 316.988 246.84 316.748 cv
247.08 316.508 247.19 316.208 247.17 315.828 cv
247.15 315.448 246.98 315.178 246.67 315.008 cv
246.35 314.838 246.02 314.818 245.67 314.948 cv
245.31 315.078 245.03 315.438 244.83 316.038 cv
244.13 315.928 li
244.28 315.458 244.49 315.068 244.77 314.748 cv
245.04 314.438 245.41 314.258 245.88 314.208 cv
246.35 314.158 246.76 314.218 247.11 314.388 cv
247.46 314.558 247.71 314.818 247.85 315.168 cv
247.99 315.518 248.01 315.898 247.91 316.318 cv
247.81 316.738 247.51 317.098 247.02 317.408 cv
247.38 317.568 247.66 317.798 247.86 318.108 cv
248.05 318.428 248.11 318.838 248.05 319.348 cv
247.99 319.858 247.76 320.268 247.37 320.578 cv
246.98 320.888 246.54 321.038 246.04 321.018 cv
245.54 321.008 245.11 320.858 244.75 320.558 cv
244.39 320.258 244.15 319.828 244.05 319.248 cv
f
249.13 320.768 mo
249.15 320.378 249.33 320.028 249.67 319.718 cv
250.01 319.408 250.44 318.918 250.96 318.248 cv
251.48 317.588 251.82 317.068 251.98 316.708 cv
252.13 316.348 252.19 316.028 252.15 315.768 cv
252.11 315.508 251.99 315.298 251.78 315.128 cv
251.57 314.958 251.33 314.888 251.06 314.908 cv
250.78 314.938 250.52 315.048 250.28 315.228 cv
250.03 315.408 249.84 315.678 249.71 316.038 cv
248.97 315.928 li
249.18 315.328 249.45 314.898 249.77 314.618 cv
250.09 314.348 250.48 314.198 250.93 314.168 cv
251.19 314.148 251.42 314.148 251.63 314.188 cv
251.83 314.228 252.05 314.328 252.27 314.468 cv
252.49 314.608 252.68 314.828 252.82 315.108 cv
252.96 315.388 253.02 315.738 252.98 316.138 cv
252.94 316.548 252.73 317.028 252.37 317.588 cv
252 318.148 251.3 319.028 250.26 320.218 cv
253.07 320.218 li
253.07 320.928 li
249.13 320.928 li
249.13 320.768 li
f
255.38 320.958 mo
254.87 322.008 li
254.48 322.008 li
254.87 320.958 li
254.48 320.958 li
254.48 320.108 li
255.38 320.108 li
255.38 320.958 li
f
259.13 320.768 mo
259.15 320.378 259.33 320.028 259.67 319.718 cv
260.01 319.408 260.44 318.918 260.96 318.248 cv
261.48 317.588 261.82 317.068 261.98 316.708 cv
262.13 316.348 262.19 316.028 262.15 315.768 cv
262.11 315.508 261.99 315.298 261.78 315.128 cv
261.57 314.958 261.33 314.888 261.06 314.908 cv
260.78 314.938 260.52 315.048 260.28 315.228 cv
260.03 315.408 259.84 315.678 259.71 316.038 cv
258.97 315.928 li
259.18 315.328 259.45 314.898 259.77 314.618 cv
260.09 314.348 260.48 314.198 260.93 314.168 cv
261.19 314.148 261.42 314.148 261.63 314.188 cv
261.83 314.228 262.05 314.328 262.27 314.468 cv
262.49 314.608 262.68 314.828 262.82 315.108 cv
262.96 315.388 263.02 315.738 262.98 316.138 cv
262.94 316.548 262.73 317.028 262.37 317.588 cv
262 318.148 261.3 319.028 260.26 320.218 cv
263.07 320.218 li
263.07 320.928 li
259.13 320.928 li
259.13 320.768 li
f
264.99 320.928 mo
265.45 318.948 266.27 316.988 267.45 315.028 cv
264.09 315.028 li
264.09 314.318 li
268.27 314.318 li
268.27 314.988 li
267.04 316.968 266.23 318.948 265.85 320.928 cv
264.99 320.928 li
f
271.28 317.638 mo
271.28 318.498 271.11 319.268 270.79 319.948 cv
270.46 320.628 269.97 321.268 269.32 321.888 cv
268.89 321.458 li
269.49 320.918 269.94 320.348 270.24 319.738 cv
270.54 319.128 270.69 318.428 270.69 317.638 cv
270.69 316.858 270.54 316.168 270.24 315.558 cv
269.94 314.948 269.49 314.358 268.89 313.778 cv
269.32 313.348 li
269.97 313.998 270.46 314.658 270.79 315.338 cv
271.11 316.018 271.28 316.788 271.28 317.638 cv
f
317.324 306.736 mo
317.324 310.236 li
f
317.324 306.736 mo
317.324 310.236 li
@
281.854 320.958 mo
277.874 320.958 li
277.874 314.278 li
281.664 314.278 li
281.664 315.028 li
278.774 315.028 li
278.774 317.098 li
281.424 317.098 li
281.424 317.838 li
278.774 317.838 li
278.774 320.218 li
281.854 320.218 li
281.854 320.958 li
f
286.974 321.458 mo
286.544 321.888 li
285.884 321.268 285.394 320.628 285.074 319.948 cv
284.754 319.268 284.594 318.498 284.594 317.638 cv
284.594 316.788 284.754 316.018 285.074 315.338 cv
285.394 314.658 285.884 313.998 286.544 313.348 cv
286.974 313.778 li
286.374 314.358 285.924 314.948 285.624 315.558 cv
285.324 316.168 285.174 316.858 285.174 317.638 cv
285.174 318.428 285.324 319.128 285.624 319.738 cv
285.924 320.348 286.374 320.918 286.974 321.458 cv
f
290.454 319.438 mo
287.444 319.438 li
287.444 318.778 li
290.604 314.208 li
291.194 314.208 li
291.194 318.778 li
292.124 318.778 li
292.124 319.438 li
291.194 319.438 li
291.194 320.928 li
290.454 320.928 li
290.454 319.438 li
290.454 318.778 mo
290.454 315.688 li
288.264 318.778 li
290.454 318.778 li
f
294.044 320.958 mo
293.534 322.008 li
293.144 322.008 li
293.534 320.958 li
293.144 320.958 li
293.144 320.108 li
294.044 320.108 li
294.044 320.958 li
f
299.514 315.528 mo
299.174 315.868 298.744 316.198 298.224 316.508 cv
298.224 315.768 li
298.874 315.328 299.404 314.808 299.824 314.208 cv
300.294 314.208 li
300.294 320.928 li
299.514 320.928 li
299.514 315.528 li
f
302.674 317.198 mo
302.694 316.508 302.794 315.958 302.964 315.558 cv
303.134 315.158 303.374 314.818 303.694 314.558 cv
304.004 314.298 304.384 314.168 304.844 314.168 cv
305.294 314.168 305.694 314.358 306.034 314.738 cv
306.374 315.118 306.594 315.588 306.694 316.158 cv
306.794 316.738 306.834 317.398 306.794 318.138 cv
306.754 318.878 306.624 319.488 306.404 319.948 cv
306.184 320.418 305.844 320.738 305.404 320.918 cv
304.964 321.098 304.514 321.078 304.074 320.858 cv
303.634 320.638 303.324 320.348 303.144 319.988 cv
302.964 319.628 302.834 319.238 302.754 318.838 cv
302.674 318.438 302.644 317.888 302.674 317.198 cv
303.494 316.958 mo
303.414 317.678 303.434 318.308 303.574 318.868 cv
303.704 319.428 303.914 319.828 304.214 320.068 cv
304.514 320.308 304.814 320.348 305.134 320.208 cv
305.444 320.068 305.674 319.778 305.814 319.348 cv
305.954 318.918 306.034 318.448 306.034 317.938 cv
306.034 317.438 306.014 316.978 305.974 316.558 cv
305.934 316.138 305.814 315.758 305.624 315.418 cv
305.424 315.078 305.164 314.908 304.844 314.888 cv
304.514 314.878 304.224 315.038 303.984 315.378 cv
303.734 315.718 303.574 316.248 303.494 316.958 cv
f
309.044 320.958 mo
308.534 322.008 li
308.144 322.008 li
308.534 320.958 li
308.144 320.958 li
308.144 320.108 li
309.044 320.108 li
309.044 320.958 li
f
312.674 317.198 mo
312.694 316.508 312.794 315.958 312.964 315.558 cv
313.134 315.158 313.374 314.818 313.694 314.558 cv
314.004 314.298 314.384 314.168 314.844 314.168 cv
315.294 314.168 315.694 314.358 316.034 314.738 cv
316.374 315.118 316.594 315.588 316.694 316.158 cv
316.794 316.738 316.834 317.398 316.794 318.138 cv
316.754 318.878 316.624 319.488 316.404 319.948 cv
316.184 320.418 315.844 320.738 315.404 320.918 cv
314.964 321.098 314.514 321.078 314.074 320.858 cv
313.634 320.638 313.324 320.348 313.144 319.988 cv
312.964 319.628 312.834 319.238 312.754 318.838 cv
312.674 318.438 312.644 317.888 312.674 317.198 cv
313.494 316.958 mo
313.414 317.678 313.434 318.308 313.574 318.868 cv
313.704 319.428 313.914 319.828 314.214 320.068 cv
314.514 320.308 314.814 320.348 315.134 320.208 cv
315.444 320.068 315.674 319.778 315.814 319.348 cv
315.954 318.918 316.034 318.448 316.034 317.938 cv
316.034 317.438 316.014 316.978 315.974 316.558 cv
315.934 316.138 315.814 315.758 315.624 315.418 cv
315.424 315.078 315.164 314.908 314.844 314.888 cv
314.514 314.878 314.224 315.038 313.984 315.378 cv
313.734 315.718 313.574 316.248 313.494 316.958 cv
f
319.044 320.958 mo
318.534 322.008 li
318.144 322.008 li
318.534 320.958 li
318.144 320.958 li
318.144 320.108 li
319.044 320.108 li
319.044 320.958 li
f
323.654 320.928 mo
324.114 318.948 324.934 316.988 326.114 315.028 cv
322.754 315.028 li
322.754 314.318 li
326.934 314.318 li
326.934 314.988 li
325.704 316.968 324.894 318.948 324.514 320.928 cv
323.654 320.928 li
f
329.514 315.528 mo
329.174 315.868 328.744 316.198 328.224 316.508 cv
328.224 315.768 li
328.874 315.328 329.404 314.808 329.824 314.208 cv
330.294 314.208 li
330.294 320.928 li
329.514 320.928 li
329.514 315.528 li
f
332.794 320.768 mo
332.814 320.378 332.994 320.028 333.334 319.718 cv
333.674 319.408 334.104 318.918 334.624 318.248 cv
335.144 317.588 335.484 317.068 335.644 316.708 cv
335.794 316.348 335.854 316.028 335.814 315.768 cv
335.774 315.508 335.654 315.298 335.444 315.128 cv
335.234 314.958 334.994 314.888 334.724 314.908 cv
334.444 314.938 334.184 315.048 333.944 315.228 cv
333.694 315.408 333.504 315.678 333.374 316.038 cv
332.634 315.928 li
332.844 315.328 333.114 314.898 333.434 314.618 cv
333.754 314.348 334.144 314.198 334.594 314.168 cv
334.854 314.148 335.084 314.148 335.294 314.188 cv
335.494 314.228 335.714 314.328 335.934 314.468 cv
336.154 314.608 336.344 314.828 336.484 315.108 cv
336.624 315.388 336.684 315.738 336.644 316.138 cv
336.604 316.548 336.394 317.028 336.034 317.588 cv
335.664 318.148 334.964 319.028 333.924 320.218 cv
336.734 320.218 li
336.734 320.928 li
332.794 320.928 li
332.794 320.768 li
f
339.044 320.958 mo
338.534 322.008 li
338.144 322.008 li
338.534 320.958 li
338.144 320.958 li
338.144 320.108 li
339.044 320.108 li
339.044 320.958 li
f
342.714 319.248 mo
343.414 319.128 li
343.514 319.468 343.684 319.748 343.924 319.968 cv
344.154 320.188 344.444 320.298 344.804 320.278 cv
345.154 320.268 345.434 320.128 345.644 319.848 cv
345.844 319.578 345.934 319.268 345.914 318.918 cv
345.884 318.568 345.744 318.298 345.504 318.098 cv
345.254 317.898 344.854 317.758 344.314 317.678 cv
344.314 317.178 li
344.854 317.128 345.254 316.988 345.504 316.748 cv
345.744 316.508 345.854 316.208 345.834 315.828 cv
345.814 315.448 345.644 315.178 345.334 315.008 cv
345.014 314.838 344.684 314.818 344.334 314.948 cv
343.974 315.078 343.694 315.438 343.494 316.038 cv
342.794 315.928 li
342.944 315.458 343.154 315.068 343.434 314.748 cv
343.704 314.438 344.074 314.258 344.544 314.208 cv
345.014 314.158 345.424 314.218 345.774 314.388 cv
346.124 314.558 346.374 314.818 346.514 315.168 cv
346.654 315.518 346.674 315.898 346.574 316.318 cv
346.474 316.738 346.174 317.098 345.684 317.408 cv
346.044 317.568 346.324 317.798 346.524 318.108 cv
346.714 318.428 346.774 318.838 346.714 319.348 cv
346.654 319.858 346.424 320.268 346.034 320.578 cv
345.644 320.888 345.204 321.038 344.704 321.018 cv
344.204 321.008 343.774 320.858 343.414 320.558 cv
343.054 320.258 342.814 319.828 342.714 319.248 cv
f
347.674 317.198 mo
347.694 316.508 347.794 315.958 347.964 315.558 cv
348.134 315.158 348.374 314.818 348.694 314.558 cv
349.004 314.298 349.384 314.168 349.844 314.168 cv
350.294 314.168 350.694 314.358 351.034 314.738 cv
351.374 315.118 351.594 315.588 351.694 316.158 cv
351.794 316.738 351.834 317.398 351.794 318.138 cv
351.754 318.878 351.624 319.488 351.404 319.948 cv
351.184 320.418 350.844 320.738 350.404 320.918 cv
349.964 321.098 349.514 321.078 349.074 320.858 cv
348.634 320.638 348.324 320.348 348.144 319.988 cv
347.964 319.628 347.834 319.238 347.754 318.838 cv
347.674 318.438 347.644 317.888 347.674 317.198 cv
348.494 316.958 mo
348.414 317.678 348.434 318.308 348.574 318.868 cv
348.704 319.428 348.914 319.828 349.214 320.068 cv
349.514 320.308 349.814 320.348 350.134 320.208 cv
350.444 320.068 350.674 319.778 350.814 319.348 cv
350.954 318.918 351.034 318.448 351.034 317.938 cv
351.034 317.438 351.014 316.978 350.974 316.558 cv
350.934 316.138 350.814 315.758 350.624 315.418 cv
350.424 315.078 350.164 314.908 349.844 314.888 cv
349.514 314.878 349.224 315.038 348.984 315.378 cv
348.734 315.718 348.574 316.248 348.494 316.958 cv
f
354.944 317.638 mo
354.944 318.498 354.774 319.268 354.454 319.948 cv
354.124 320.628 353.634 321.268 352.984 321.888 cv
352.554 321.458 li
353.154 320.918 353.604 320.348 353.904 319.738 cv
354.204 319.128 354.354 318.428 354.354 317.638 cv
354.354 316.858 354.204 316.168 353.904 315.558 cv
353.604 314.948 353.154 314.358 352.554 313.778 cv
352.984 313.348 li
353.634 313.998 354.124 314.658 354.454 315.338 cv
354.774 316.018 354.944 316.788 354.944 317.638 cv
f
398.487 306.736 mo
398.487 310.236 li
f
398.487 306.736 mo
398.487 310.236 li
@
363.017 320.958 mo
359.037 320.958 li
359.037 314.278 li
362.827 314.278 li
362.827 315.028 li
359.937 315.028 li
359.937 317.098 li
362.587 317.098 li
362.587 317.838 li
359.937 317.838 li
359.937 320.218 li
363.017 320.218 li
363.017 320.958 li
f
368.137 321.458 mo
367.707 321.888 li
367.047 321.268 366.557 320.628 366.237 319.948 cv
365.917 319.268 365.757 318.498 365.757 317.638 cv
365.757 316.788 365.917 316.018 366.237 315.338 cv
366.557 314.658 367.047 313.998 367.707 313.348 cv
368.137 313.778 li
367.537 314.358 367.087 314.948 366.787 315.558 cv
366.487 316.168 366.337 316.858 366.337 317.638 cv
366.337 318.428 366.487 319.128 366.787 319.738 cv
367.087 320.348 367.537 320.918 368.137 321.458 cv
f
369.347 319.088 mo
369.527 319.788 369.837 320.178 370.277 320.258 cv
370.717 320.338 371.077 320.298 371.357 320.128 cv
371.627 319.958 371.817 319.738 371.937 319.458 cv
372.057 319.188 372.107 318.878 372.097 318.538 cv
372.077 318.198 371.987 317.918 371.827 317.678 cv
371.657 317.448 371.437 317.298 371.177 317.218 cv
370.917 317.138 370.617 317.138 370.297 317.218 cv
369.977 317.298 369.707 317.478 369.507 317.758 cv
368.837 317.678 li
368.887 317.528 369.137 316.408 369.577 314.318 cv
372.667 314.318 li
372.667 315.028 li
370.167 315.028 li
370.027 315.728 369.897 316.288 369.777 316.708 cv
370.167 316.528 370.527 316.438 370.867 316.448 cv
371.207 316.468 371.527 316.548 371.847 316.688 cv
372.157 316.828 372.387 317.028 372.527 317.268 cv
372.667 317.518 372.777 317.768 372.837 318.018 cv
372.897 318.268 372.927 318.538 372.917 318.818 cv
372.897 319.108 372.837 319.398 372.737 319.698 cv
372.637 319.998 372.477 320.238 372.277 320.438 cv
372.067 320.638 371.817 320.788 371.517 320.908 cv
371.217 321.028 370.867 321.068 370.477 321.038 cv
370.087 321.018 369.717 320.868 369.367 320.608 cv
369.007 320.348 368.767 319.908 368.647 319.278 cv
369.347 319.088 li
f
375.207 320.958 mo
374.697 322.008 li
374.307 322.008 li
374.697 320.958 li
374.307 320.958 li
374.307 320.108 li
375.207 320.108 li
375.207 320.958 li
f
380.677 315.528 mo
380.337 315.868 379.907 316.198 379.387 316.508 cv
379.387 315.768 li
380.037 315.328 380.567 314.808 380.987 314.208 cv
381.457 314.208 li
381.457 320.928 li
380.677 320.928 li
380.677 315.528 li
f
383.877 319.248 mo
384.577 319.128 li
384.677 319.468 384.847 319.748 385.087 319.968 cv
385.317 320.188 385.607 320.298 385.967 320.278 cv
386.317 320.268 386.597 320.128 386.807 319.848 cv
387.007 319.578 387.097 319.268 387.077 318.918 cv
387.047 318.568 386.907 318.298 386.667 318.098 cv
386.417 317.898 386.017 317.758 385.477 317.678 cv
385.477 317.178 li
386.017 317.128 386.417 316.988 386.667 316.748 cv
386.907 316.508 387.017 316.208 386.997 315.828 cv
386.977 315.448 386.807 315.178 386.497 315.008 cv
386.177 314.838 385.847 314.818 385.497 314.948 cv
385.137 315.078 384.857 315.438 384.657 316.038 cv
383.957 315.928 li
384.107 315.458 384.317 315.068 384.597 314.748 cv
384.867 314.438 385.237 314.258 385.707 314.208 cv
386.177 314.158 386.587 314.218 386.937 314.388 cv
387.287 314.558 387.537 314.818 387.677 315.168 cv
387.817 315.518 387.837 315.898 387.737 316.318 cv
387.637 316.738 387.337 317.098 386.847 317.408 cv
387.207 317.568 387.487 317.798 387.687 318.108 cv
387.877 318.428 387.937 318.838 387.877 319.348 cv
387.817 319.858 387.587 320.268 387.197 320.578 cv
386.807 320.888 386.367 321.038 385.867 321.018 cv
385.367 321.008 384.937 320.858 384.577 320.558 cv
384.217 320.258 383.977 319.828 383.877 319.248 cv
f
390.207 320.958 mo
389.697 322.008 li
389.307 322.008 li
389.697 320.958 li
389.307 320.958 li
389.307 320.108 li
390.207 320.108 li
390.207 320.958 li
f
393.757 319.008 mo
393.757 318.698 393.827 318.388 393.987 318.088 cv
394.147 317.788 394.407 317.548 394.777 317.368 cv
394.457 317.188 394.247 316.988 394.147 316.768 cv
394.047 316.548 393.987 316.288 393.977 315.998 cv
393.957 315.718 393.997 315.468 394.087 315.258 cv
394.177 315.058 394.317 314.858 394.497 314.678 cv
394.677 314.498 394.887 314.368 395.107 314.308 cv
395.327 314.248 395.567 314.208 395.827 314.208 cv
396.087 314.208 396.317 314.238 396.527 314.288 cv
396.737 314.338 396.957 314.448 397.197 314.618 cv
397.427 314.788 397.597 315.028 397.707 315.338 cv
397.807 315.658 397.807 316.018 397.687 316.438 cv
397.567 316.858 397.257 317.178 396.767 317.408 cv
397.207 317.548 397.527 317.748 397.707 318.018 cv
397.887 318.298 397.977 318.628 397.977 319.018 cv
397.977 319.408 397.917 319.718 397.797 319.948 cv
397.677 320.188 397.547 320.378 397.407 320.538 cv
397.267 320.698 397.067 320.818 396.827 320.908 cv
396.577 320.998 396.267 321.038 395.887 321.038 cv
395.507 321.038 395.187 320.998 394.917 320.908 cv
394.637 320.818 394.407 320.678 394.227 320.498 cv
394.047 320.318 393.917 320.098 393.857 319.848 cv
393.787 319.608 393.757 319.328 393.757 319.008 cv
394.557 318.968 mo
394.537 319.288 394.597 319.558 394.717 319.788 cv
394.837 320.028 395.047 320.178 395.357 320.238 cv
395.667 320.308 395.997 320.308 396.337 320.228 cv
396.677 320.148 396.907 319.968 397.037 319.678 cv
397.167 319.398 397.217 319.108 397.177 318.818 cv
397.137 318.538 396.967 318.298 396.687 318.098 cv
396.397 317.898 396.087 317.818 395.747 317.838 cv
395.407 317.868 395.127 317.988 394.907 318.188 cv
394.687 318.398 394.567 318.658 394.557 318.968 cv
394.697 315.928 mo
394.697 316.188 394.787 316.438 394.967 316.668 cv
395.147 316.908 395.437 317.018 395.827 317.018 cv
396.217 317.018 396.507 316.908 396.707 316.668 cv
396.907 316.438 396.997 316.158 396.987 315.828 cv
396.967 315.508 396.847 315.268 396.627 315.108 cv
396.407 314.948 396.107 314.888 395.727 314.908 cv
395.347 314.938 395.087 315.048 394.927 315.238 cv
394.767 315.438 394.697 315.668 394.697 315.928 cv
f
400.207 320.958 mo
399.697 322.008 li
399.307 322.008 li
399.697 320.958 li
399.307 320.958 li
399.307 320.108 li
400.207 320.108 li
400.207 320.958 li
f
404.737 321.038 mo
405.307 320.078 405.777 319.208 406.147 318.428 cv
405.487 318.528 404.947 318.448 404.517 318.168 cv
404.087 317.898 403.827 317.528 403.737 317.058 cv
403.647 316.598 403.657 316.168 403.757 315.788 cv
403.857 315.408 404.027 315.098 404.247 314.848 cv
404.467 314.608 404.727 314.428 405.047 314.328 cv
405.357 314.228 405.637 314.168 405.887 314.168 cv
406.127 314.168 406.387 314.228 406.647 314.328 cv
406.907 314.428 407.137 314.588 407.347 314.798 cv
407.557 315.008 407.697 315.218 407.777 315.438 cv
407.857 315.658 407.897 315.948 407.897 316.298 cv
407.897 316.648 407.767 317.098 407.507 317.638 cv
407.247 318.188 406.607 319.318 405.597 321.038 cv
404.737 321.038 li
404.517 316.668 mo
404.557 317.008 404.697 317.288 404.947 317.508 cv
405.197 317.728 405.467 317.828 405.757 317.798 cv
406.037 317.778 406.267 317.698 406.437 317.568 cv
406.597 317.438 406.767 317.218 406.927 316.898 cv
407.027 316.518 407.047 316.188 406.997 315.908 cv
406.947 315.638 406.807 315.408 406.587 315.228 cv
406.367 315.048 406.127 314.948 405.867 314.948 cv
405.707 314.928 405.507 314.968 405.267 315.068 cv
405.017 315.168 404.817 315.378 404.677 315.688 cv
404.537 316.008 404.477 316.328 404.517 316.668 cv
f
408.757 319.008 mo
408.757 318.698 408.827 318.388 408.987 318.088 cv
409.147 317.788 409.407 317.548 409.777 317.368 cv
409.457 317.188 409.247 316.988 409.147 316.768 cv
409.047 316.548 408.987 316.288 408.977 315.998 cv
408.957 315.718 408.997 315.468 409.087 315.258 cv
409.177 315.058 409.317 314.858 409.497 314.678 cv
409.677 314.498 409.887 314.368 410.107 314.308 cv
410.327 314.248 410.567 314.208 410.827 314.208 cv
411.087 314.208 411.317 314.238 411.527 314.288 cv
411.737 314.338 411.957 314.448 412.197 314.618 cv
412.427 314.788 412.597 315.028 412.707 315.338 cv
412.807 315.658 412.807 316.018 412.687 316.438 cv
412.567 316.858 412.257 317.178 411.767 317.408 cv
412.207 317.548 412.527 317.748 412.707 318.018 cv
412.887 318.298 412.977 318.628 412.977 319.018 cv
412.977 319.408 412.917 319.718 412.797 319.948 cv
412.677 320.188 412.547 320.378 412.407 320.538 cv
412.267 320.698 412.067 320.818 411.827 320.908 cv
411.577 320.998 411.267 321.038 410.887 321.038 cv
410.507 321.038 410.187 320.998 409.917 320.908 cv
409.637 320.818 409.407 320.678 409.227 320.498 cv
409.047 320.318 408.917 320.098 408.857 319.848 cv
408.787 319.608 408.757 319.328 408.757 319.008 cv
409.557 318.968 mo
409.537 319.288 409.597 319.558 409.717 319.788 cv
409.837 320.028 410.047 320.178 410.357 320.238 cv
410.667 320.308 410.997 320.308 411.337 320.228 cv
411.677 320.148 411.907 319.968 412.037 319.678 cv
412.167 319.398 412.217 319.108 412.177 318.818 cv
412.137 318.538 411.967 318.298 411.687 318.098 cv
411.397 317.898 411.087 317.818 410.747 317.838 cv
410.407 317.868 410.127 317.988 409.907 318.188 cv
409.687 318.398 409.567 318.658 409.557 318.968 cv
409.697 315.928 mo
409.697 316.188 409.787 316.438 409.967 316.668 cv
410.147 316.908 410.437 317.018 410.827 317.018 cv
411.217 317.018 411.507 316.908 411.707 316.668 cv
411.907 316.438 411.997 316.158 411.987 315.828 cv
411.967 315.508 411.847 315.268 411.627 315.108 cv
411.407 314.948 411.107 314.888 410.727 314.908 cv
410.347 314.938 410.087 315.048 409.927 315.238 cv
409.767 315.438 409.697 315.668 409.697 315.928 cv
f
414.817 320.928 mo
415.277 318.948 416.097 316.988 417.277 315.028 cv
413.917 315.028 li
413.917 314.318 li
418.097 314.318 li
418.097 314.988 li
416.867 316.968 416.057 318.948 415.677 320.928 cv
414.817 320.928 li
f
420.207 320.958 mo
419.697 322.008 li
419.307 322.008 li
419.697 320.958 li
419.307 320.958 li
419.307 320.108 li
420.207 320.108 li
420.207 320.958 li
f
426.617 319.438 mo
423.607 319.438 li
423.607 318.778 li
426.767 314.208 li
427.357 314.208 li
427.357 318.778 li
428.287 318.778 li
428.287 319.438 li
427.357 319.438 li
427.357 320.928 li
426.617 320.928 li
426.617 319.438 li
426.617 318.778 mo
426.617 315.688 li
424.427 318.778 li
426.617 318.778 li
f
428.837 317.198 mo
428.857 316.508 428.957 315.958 429.127 315.558 cv
429.297 315.158 429.537 314.818 429.857 314.558 cv
430.167 314.298 430.547 314.168 431.007 314.168 cv
431.457 314.168 431.857 314.358 432.197 314.738 cv
432.537 315.118 432.757 315.588 432.857 316.158 cv
432.957 316.738 432.997 317.398 432.957 318.138 cv
432.917 318.878 432.787 319.488 432.567 319.948 cv
432.347 320.418 432.007 320.738 431.567 320.918 cv
431.127 321.098 430.677 321.078 430.237 320.858 cv
429.797 320.638 429.487 320.348 429.307 319.988 cv
429.127 319.628 428.997 319.238 428.917 318.838 cv
428.837 318.438 428.807 317.888 428.837 317.198 cv
429.657 316.958 mo
429.577 317.678 429.597 318.308 429.737 318.868 cv
429.867 319.428 430.077 319.828 430.377 320.068 cv
430.677 320.308 430.977 320.348 431.297 320.208 cv
431.607 320.068 431.837 319.778 431.977 319.348 cv
432.117 318.918 432.197 318.448 432.197 317.938 cv
432.197 317.438 432.177 316.978 432.137 316.558 cv
432.097 316.138 431.977 315.758 431.787 315.418 cv
431.587 315.078 431.327 314.908 431.007 314.888 cv
430.677 314.878 430.387 315.038 430.147 315.378 cv
429.897 315.718 429.737 316.248 429.657 316.958 cv
f
436.107 317.638 mo
436.107 318.498 435.937 319.268 435.617 319.948 cv
435.287 320.628 434.797 321.268 434.147 321.888 cv
433.717 321.458 li
434.317 320.918 434.767 320.348 435.067 319.738 cv
435.367 319.128 435.517 318.428 435.517 317.638 cv
435.517 316.858 435.367 316.168 435.067 315.558 cv
434.767 314.948 434.317 314.358 433.717 313.778 cv
434.147 313.348 li
434.797 313.998 435.287 314.658 435.617 315.338 cv
435.937 316.018 436.107 316.788 436.107 317.638 cv
f
215.5 327.473 mo
215.02 327.453 214.62 327.433 214.29 327.433 cv
211.98 327.433 li
211.8 327.793 211.58 328.203 211.32 328.643 cv
211.32 333.523 li
211.32 334.043 211.33 334.623 211.36 335.273 cv
210.5 335.273 li
210.52 334.653 210.54 334.073 210.54 333.523 cv
210.54 329.693 li
209.72 330.813 208.63 331.843 207.25 332.783 cv
207.04 332.473 206.85 332.253 206.67 332.123 cv
207.19 331.883 207.88 331.383 208.74 330.613 cv
209.6 329.853 210.39 328.793 211.12 327.433 cv
208.54 327.433 li
208.04 327.433 207.52 327.453 206.98 327.473 cv
206.98 326.693 li
207.76 326.713 208.36 326.723 208.78 326.723 cv
214.25 326.723 li
214.58 326.723 215 326.713 215.5 326.693 cv
215.5 327.473 li
214.68 332.663 mo
214.18 332.043 213.29 331.073 212.02 329.773 cv
212.22 329.593 212.39 329.413 212.53 329.223 cv
213.15 329.803 213.68 330.303 214.12 330.733 cv
214.56 331.163 214.98 331.583 215.38 332.003 cv
215.12 332.213 214.88 332.433 214.68 332.663 cv
f
225.26 326.723 mo
225.2 327.123 225.18 327.613 225.18 328.213 cv
225.18 334.493 li
225.18 334.853 225.05 335.083 224.79 335.173 cv
224.53 335.263 224.11 335.333 223.54 335.393 cv
223.54 335.153 223.43 334.853 223.23 334.493 cv
223.65 334.493 223.95 334.473 224.13 334.433 cv
224.31 334.403 224.4 334.293 224.4 334.113 cv
224.4 327.473 li
217.96 327.473 li
217.96 335.353 li
217.06 335.353 li
217.08 334.983 217.11 334.573 217.14 334.113 cv
217.14 328.213 li
217.14 327.593 217.12 327.093 217.1 326.723 cv
225.26 326.723 li
223 330.443 mo
222.94 330.733 222.92 331.173 222.92 331.763 cv
222.92 332.343 222.94 332.853 223 333.293 cv
219.32 333.293 li
219.34 332.823 219.36 332.293 219.36 331.693 cv
219.36 331.093 219.34 330.683 219.32 330.443 cv
223 330.443 li
222.57 328.563 mo
223.09 328.563 223.46 328.553 223.7 328.523 cv
223.7 329.303 li
223.44 329.283 223.05 329.263 222.53 329.263 cv
219.99 329.263 li
219.36 329.263 218.92 329.283 218.66 329.303 cv
218.66 328.523 li
218.94 328.553 219.4 328.563 220.03 328.563 cv
222.57 328.563 li
222.21 332.623 mo
222.21 331.063 li
220.11 331.063 li
220.11 332.623 li
222.21 332.623 li
f
232.61 328.953 mo
232.53 329.273 232.46 329.703 232.41 330.243 cv
232.35 330.793 232.28 331.383 232.18 332.003 cv
234.01 332.003 li
234.47 332.003 234.97 331.993 235.5 331.963 cv
235.5 332.703 li
234.95 332.683 234.44 332.663 233.97 332.663 cv
231.98 332.663 li
231.74 333.183 231.39 333.643 230.92 334.033 cv
230.45 334.423 229.9 334.723 229.28 334.943 cv
228.66 335.163 228.1 335.333 227.61 335.463 cv
227.5 335.153 227.28 334.903 226.94 334.723 cv
227.69 334.643 228.5 334.433 229.36 334.093 cv
230.22 333.743 230.82 333.263 231.16 332.663 cv
228.39 332.663 li
227.91 332.663 227.39 332.683 226.82 332.703 cv
226.82 331.963 li
227.42 331.993 227.94 332.003 228.39 332.003 cv
231.43 332.003 li
231.51 331.563 231.57 331.083 231.61 330.573 cv
231.65 330.073 231.65 329.453 231.63 328.723 cv
231.94 328.823 232.27 328.903 232.61 328.953 cv
231.24 326.223 mo
231.44 326.643 231.63 327.093 231.79 327.583 cv
235.18 327.583 li
235.15 327.873 235.14 328.163 235.14 328.443 cv
235.14 328.703 235.15 328.993 235.18 329.303 cv
234.29 329.303 li
234.29 328.213 li
228.07 328.213 li
228.07 329.383 li
227.21 329.383 li
227.23 329.073 227.25 328.773 227.25 328.483 cv
227.25 328.173 227.23 327.873 227.21 327.583 cv
230.81 327.583 li
230.73 327.283 230.58 326.913 230.38 326.493 cv
230.58 326.413 230.87 326.323 231.24 326.223 cv
232.41 333.133 mo
232.98 333.453 233.53 333.743 234.05 334.013 cv
234.57 334.293 235.02 334.533 235.42 334.763 cv
235.23 334.963 235.03 335.193 234.83 335.433 cv
234.36 335.093 233.85 334.773 233.31 334.473 cv
232.76 334.183 232.29 333.953 231.9 333.793 cv
232.1 333.533 232.27 333.313 232.41 333.133 cv
228 330.123 mo
228.44 330.343 229.05 330.703 229.83 331.223 cv
229.73 331.383 229.57 331.583 229.36 331.843 cv
228.63 331.303 228.05 330.933 227.61 330.753 cv
227.76 330.593 227.89 330.383 228 330.123 cv
231.08 330.013 mo
230.9 330.223 230.74 330.433 230.61 330.633 cv
229.77 330.033 229.16 329.673 228.78 329.543 cv
228.9 329.363 229.05 329.153 229.21 328.913 cv
231.08 330.013 li
f
239.75 327.043 mo
239.7 327.283 239.66 327.613 239.64 328.053 cv
239.36 331.103 li
240.11 331.103 li
240.08 331.313 240.05 331.663 240.03 332.153 cv
239.87 334.303 li
239.87 334.843 239.71 335.153 239.4 335.233 cv
239.08 335.313 238.65 335.383 238.11 335.463 cv
238.03 335.103 237.93 334.803 237.8 334.573 cv
238.34 334.573 238.7 334.563 238.87 334.553 cv
239.04 334.533 239.15 334.423 239.21 334.193 cv
239.32 331.763 li
237.02 331.763 li
237.04 331.273 237.06 330.733 237.08 330.143 cv
237.09 329.563 237.1 329.003 237.1 328.483 cv
237.88 328.483 li
237.82 328.773 237.78 329.143 237.76 329.603 cv
237.73 330.063 237.72 330.563 237.72 331.103 cv
238.7 331.103 li
238.97 327.663 li
237.92 327.663 li
237.5 327.663 237.09 327.683 236.71 327.703 cv
236.71 327.003 li
237.09 327.033 237.5 327.043 237.92 327.043 cv
239.75 327.043 li
242.92 326.803 mo
243.33 327.583 243.76 328.163 244.2 328.523 cv
244.64 328.893 245.17 329.183 245.77 329.383 cv
245.53 329.593 245.35 329.853 245.22 330.163 cv
244.86 329.963 244.51 329.713 244.17 329.423 cv
244.17 330.083 li
243.83 330.063 243.34 330.043 242.72 330.043 cv
242.1 330.043 241.59 330.063 241.2 330.083 cv
241.2 329.463 li
241.04 329.673 240.82 329.943 240.54 330.283 cv
240.3 330.053 240.05 329.873 239.79 329.733 cv
240.21 329.453 240.53 329.163 240.75 328.873 cv
240.97 328.593 241.16 328.293 241.33 327.983 cv
241.5 327.673 241.64 327.383 241.76 327.123 cv
241.88 326.863 241.98 326.573 242.06 326.263 cv
242.4 326.343 242.75 326.413 243.11 326.493 cv
242.92 326.803 li
244.91 331.063 mo
244.77 331.223 244.67 331.433 244.59 331.713 cv
244.51 331.993 244.39 332.423 244.22 333.003 cv
244.05 333.583 243.92 334.043 243.82 334.383 cv
244.36 334.383 li
244.54 334.383 244.83 334.373 245.22 334.343 cv
245.22 335.043 li
244.88 335.013 244.59 335.003 244.36 335.003 cv
241.36 335.003 li
240.88 335.003 240.54 335.013 240.34 335.043 cv
240.34 334.343 li
240.65 334.373 241 334.383 241.39 334.383 cv
243.15 334.383 li
243.35 333.813 243.52 333.223 243.66 332.623 cv
244.05 330.833 li
244.25 330.913 244.54 330.983 244.91 331.063 cv
244.13 329.383 mo
243.81 329.153 243.53 328.863 243.27 328.523 cv
243.01 328.183 242.75 327.753 242.49 327.233 cv
242.28 327.653 242.09 328.013 241.92 328.313 cv
241.75 328.613 241.52 328.973 241.24 329.383 cv
244.13 329.383 li
241.24 331.023 mo
241.34 331.393 241.45 331.813 241.57 332.273 cv
241.69 332.743 241.8 333.173 241.9 333.563 cv
241.66 333.593 241.44 333.663 241.24 333.763 cv
241.16 333.263 241.07 332.853 240.98 332.513 cv
240.89 332.173 240.77 331.743 240.61 331.223 cv
240.82 331.143 241.03 331.083 241.24 331.023 cv
238.93 332.663 mo
238.9 332.853 238.88 333.073 238.86 333.333 cv
238.46 333.413 238.14 333.473 237.9 333.523 cv
237.65 333.583 237.27 333.683 236.75 333.833 cv
236.67 333.553 236.57 333.263 236.47 332.973 cv
236.83 332.953 237.21 332.923 237.6 332.863 cv
237.99 332.813 238.43 332.743 238.93 332.663 cv
242.88 331.843 mo
242.93 332.183 242.99 332.613 243.07 333.133 cv
242.45 333.293 li
242.34 332.723 242.26 332.283 242.21 331.983 cv
242.16 331.683 242.1 331.343 242.02 330.943 cv
242.25 330.903 242.48 330.863 242.72 330.833 cv
242.88 331.843 li
f
253.23 326.723 mo
253.17 326.863 253.11 327.033 253.03 327.253 cv
252.95 327.473 252.84 327.873 252.68 328.443 cv
254.48 328.443 li
254.74 328.443 255.05 328.433 255.42 328.403 cv
255.42 329.113 li
255.13 329.093 254.91 329.073 254.75 329.073 cv
254.75 329.493 254.67 330.143 254.53 331.043 cv
254.39 331.943 254.14 332.723 253.78 333.373 cv
254.04 333.683 254.33 333.963 254.65 334.203 cv
254.97 334.443 255.28 334.623 255.57 334.723 cv
255.26 334.953 255.05 335.173 254.95 335.393 cv
254.63 335.203 254.35 334.993 254.09 334.763 cv
253.83 334.533 253.57 334.253 253.31 333.913 cv
253.02 334.233 252.71 334.493 252.39 334.713 cv
252.06 334.933 251.65 335.173 251.16 335.433 cv
251.02 335.193 250.84 335.003 250.61 334.883 cv
251 334.723 251.42 334.503 251.86 334.223 cv
252.3 333.943 252.64 333.653 252.88 333.373 cv
252.7 333.013 252.52 332.623 252.35 332.203 cv
252.18 331.783 252.03 331.233 251.9 330.553 cv
251.82 330.773 251.69 331.043 251.51 331.373 cv
251.33 331.273 251.11 331.173 250.85 331.063 cv
251.26 330.343 251.6 329.543 251.86 328.683 cv
252.12 327.823 252.29 327.083 252.37 326.453 cv
252.68 326.593 252.97 326.683 253.23 326.723 cv
249.44 330.903 mo
249.34 331.013 249.22 331.183 249.09 331.413 cv
251.24 331.413 li
251.08 332.073 250.8 332.723 250.42 333.373 cv
250.83 333.533 251.15 333.673 251.39 333.793 cv
251.26 333.983 251.14 334.183 251.04 334.383 cv
250.8 334.233 250.45 334.073 249.99 333.913 cv
249.47 334.473 248.57 334.983 247.29 335.433 cv
247.16 335.143 246.99 334.943 246.79 334.843 cv
248.01 334.563 248.84 334.183 249.29 333.683 cv
248.55 333.503 247.95 333.343 247.49 333.213 cv
247.64 332.983 247.85 332.593 248.11 332.043 cv
247.85 332.043 247.42 332.063 246.82 332.083 cv
246.82 331.373 li
247.32 331.403 247.83 331.413 248.35 331.413 cv
248.45 331.183 248.52 330.923 248.58 330.633 cv
248.86 330.743 249.15 330.833 249.44 330.903 cv
248.93 328.253 mo
248.93 327.633 248.91 327.033 248.89 326.453 cv
249.68 326.453 li
249.65 327.003 249.64 327.603 249.64 328.253 cv
250.52 328.253 251.14 328.243 251.51 328.213 cv
251.51 328.913 li
251.14 328.893 250.52 328.873 249.64 328.873 cv
249.64 329.633 249.65 330.223 249.68 330.633 cv
248.89 330.633 li
248.91 330.273 248.93 329.813 248.93 329.263 cv
248.8 329.483 248.55 329.753 248.19 330.073 cv
247.82 330.393 247.48 330.653 247.18 330.833 cv
247.04 330.593 246.85 330.423 246.59 330.323 cv
246.82 330.243 247.13 330.063 247.52 329.773 cv
247.91 329.493 248.21 329.193 248.43 328.873 cv
247.9 328.873 247.4 328.893 246.94 328.913 cv
246.94 328.213 li
247.38 328.243 248.05 328.253 248.93 328.253 cv
252.37 329.463 mo
252.6 331.003 252.93 332.063 253.35 332.663 cv
253.61 332.063 253.78 331.463 253.87 330.853 cv
253.96 330.243 254.02 329.653 254.05 329.073 cv
252.53 329.073 li
252.37 329.463 li
248.43 332.863 mo
248.73 332.943 249.16 333.043 249.71 333.173 cv
249.92 332.913 250.12 332.543 250.3 332.043 cv
248.86 332.043 li
248.72 332.303 248.58 332.583 248.43 332.863 cv
251.36 326.883 mo
251.22 327.093 251.12 327.293 251.04 327.473 cv
250.96 327.653 250.86 327.873 250.73 328.133 cv
250.52 328.033 250.31 327.953 250.11 327.903 cv
250.31 327.563 250.51 327.133 250.69 326.613 cv
250.95 326.743 251.17 326.833 251.36 326.883 cv
250.18 329.153 mo
250.52 329.493 250.84 329.823 251.16 330.163 cv
251 330.303 250.83 330.453 250.65 330.633 cv
250.29 330.193 249.99 329.843 249.75 329.583 cv
249.91 329.453 250.05 329.313 250.18 329.153 cv
247.61 326.613 mo
247.97 326.973 248.26 327.343 248.5 327.703 cv
247.92 328.053 li
247.73 327.693 247.46 327.363 247.1 327.043 cv
247.33 326.883 247.5 326.743 247.61 326.613 cv
f
265.14 326.963 mo
265.12 327.203 265.11 327.483 265.11 327.823 cv
265.11 328.333 li
265.11 328.803 265.12 329.143 265.14 329.343 cv
261 329.343 li
261 330.513 li
262.8 330.513 li
262.8 330.283 262.78 329.933 262.76 329.463 cv
263.5 329.463 li
263.47 329.883 263.46 330.233 263.46 330.513 cv
264.52 330.513 li
264.98 330.513 265.37 330.503 265.69 330.473 cv
265.69 331.183 li
265.37 331.163 265 331.143 264.56 331.143 cv
263.46 331.143 li
263.46 332.193 li
265.18 332.193 li
265.15 332.693 265.14 333.023 265.14 333.173 cv
265.14 334.153 li
265.14 334.553 265.15 334.943 265.18 335.313 cv
264.48 335.313 li
264.48 334.763 li
261.9 334.763 li
261.9 335.353 li
261.2 335.353 li
261.22 335.063 261.24 334.703 261.24 334.263 cv
261.24 333.133 li
261.24 332.873 261.22 332.563 261.2 332.193 cv
262.8 332.193 li
262.8 331.143 li
260.96 331.143 li
260.94 331.903 260.84 332.613 260.67 333.273 cv
260.5 333.933 260.26 334.553 259.95 335.153 cv
259.71 334.993 259.47 334.883 259.21 334.803 cv
259.52 334.403 259.75 333.963 259.89 333.493 cv
260.03 333.023 260.14 332.523 260.22 331.983 cv
260.3 331.453 260.34 330.903 260.34 330.323 cv
260.34 328.833 li
260.34 328.423 260.32 327.803 260.3 326.963 cv
265.14 326.963 li
258.15 327.513 mo
258.15 327.153 258.13 326.813 258.11 326.493 cv
258.89 326.493 li
258.87 326.783 258.86 327.123 258.86 327.513 cv
258.86 328.523 li
259.12 328.523 259.52 328.513 260.07 328.483 cv
260.07 329.153 li
259.52 329.133 259.12 329.113 258.86 329.113 cv
258.86 330.593 li
259.19 330.413 259.54 330.213 259.91 329.973 cv
259.93 330.183 260 330.373 260.11 330.553 cv
259.61 330.843 259.19 331.093 258.86 331.293 cv
258.86 334.153 li
258.86 334.633 258.73 334.933 258.48 335.033 cv
258.23 335.133 257.86 335.233 257.37 335.313 cv
257.31 335.053 257.22 334.773 257.1 334.493 cv
257.54 334.493 257.82 334.473 257.95 334.433 cv
258.08 334.403 258.15 334.233 258.15 333.913 cv
258.15 331.613 li
257.76 331.823 257.37 332.073 256.98 332.353 cv
256.9 332.153 256.77 331.903 256.59 331.613 cv
257.11 331.433 257.63 331.193 258.15 330.903 cv
258.15 329.113 li
257.65 329.113 257.17 329.133 256.71 329.153 cv
256.71 328.483 li
257.17 328.513 257.65 328.523 258.15 328.523 cv
258.15 327.513 li
264.44 328.763 mo
264.44 327.543 li
261 327.543 li
261 328.763 li
264.44 328.763 li
264.48 334.193 mo
264.48 332.743 li
261.9 332.743 li
261.9 334.193 li
264.48 334.193 li
f
57.6 295.398 mo
54.1 295.398 li
f
57.6 295.398 mo
54.1 295.398 li
@
45.95 294.876 mo
45.97 294.186 46.07 293.636 46.24 293.236 cv
46.41 292.836 46.65 292.496 46.97 292.236 cv
47.28 291.976 47.66 291.846 48.12 291.846 cv
48.57 291.846 48.97 292.036 49.31 292.416 cv
49.65 292.796 49.87 293.266 49.97 293.836 cv
50.07 294.416 50.11 295.076 50.07 295.816 cv
50.03 296.556 49.9 297.166 49.68 297.626 cv
49.46 298.096 49.12 298.416 48.68 298.596 cv
48.24 298.776 47.79 298.756 47.35 298.536 cv
46.91 298.316 46.6 298.026 46.42 297.666 cv
46.24 297.306 46.11 296.916 46.03 296.516 cv
45.95 296.116 45.92 295.566 45.95 294.876 cv
46.77 294.636 mo
46.69 295.356 46.71 295.986 46.85 296.546 cv
46.98 297.106 47.19 297.506 47.49 297.746 cv
47.79 297.986 48.09 298.026 48.41 297.886 cv
48.72 297.746 48.95 297.456 49.09 297.026 cv
49.23 296.596 49.31 296.126 49.31 295.616 cv
49.31 295.116 49.29 294.656 49.25 294.236 cv
49.21 293.816 49.09 293.436 48.9 293.096 cv
48.7 292.756 48.44 292.586 48.12 292.566 cv
47.79 292.556 47.5 292.716 47.26 293.056 cv
47.01 293.396 46.85 293.926 46.77 294.636 cv
f
57.6 244.84 mo
54.1 244.84 li
f
57.6 244.84 mo
54.1 244.84 li
@
36.07 247.888 mo
36.09 247.498 36.27 247.148 36.61 246.838 cv
36.95 246.528 37.38 246.038 37.9 245.368 cv
38.42 244.708 38.76 244.188 38.92 243.828 cv
39.07 243.468 39.13 243.148 39.09 242.888 cv
39.05 242.628 38.93 242.418 38.72 242.248 cv
38.51 242.078 38.27 242.008 38 242.028 cv
37.72 242.058 37.46 242.168 37.22 242.348 cv
36.97 242.528 36.78 242.798 36.65 243.158 cv
35.91 243.048 li
36.12 242.448 36.39 242.018 36.71 241.738 cv
37.03 241.468 37.42 241.318 37.87 241.288 cv
38.13 241.268 38.36 241.268 38.57 241.308 cv
38.77 241.348 38.99 241.448 39.21 241.588 cv
39.43 241.728 39.62 241.948 39.76 242.228 cv
39.9 242.508 39.96 242.858 39.92 243.258 cv
39.88 243.668 39.67 244.148 39.31 244.708 cv
38.94 245.268 38.24 246.148 37.2 247.338 cv
40.01 247.338 li
40.01 248.048 li
36.07 248.048 li
36.07 247.888 li
f
40.95 244.318 mo
40.97 243.628 41.07 243.078 41.24 242.678 cv
41.41 242.278 41.65 241.938 41.97 241.678 cv
42.28 241.418 42.66 241.288 43.12 241.288 cv
43.57 241.288 43.97 241.478 44.31 241.858 cv
44.65 242.238 44.87 242.708 44.97 243.278 cv
45.07 243.858 45.11 244.518 45.07 245.258 cv
45.03 245.998 44.9 246.608 44.68 247.068 cv
44.46 247.538 44.12 247.858 43.68 248.038 cv
43.24 248.218 42.79 248.198 42.35 247.978 cv
41.91 247.758 41.6 247.468 41.42 247.108 cv
41.24 246.748 41.11 246.358 41.03 245.958 cv
40.95 245.558 40.92 245.008 40.95 244.318 cv
41.77 244.078 mo
41.69 244.798 41.71 245.428 41.85 245.988 cv
41.98 246.548 42.19 246.948 42.49 247.188 cv
42.79 247.428 43.09 247.468 43.41 247.328 cv
43.72 247.188 43.95 246.898 44.09 246.468 cv
44.23 246.038 44.31 245.568 44.31 245.058 cv
44.31 244.558 44.29 244.098 44.25 243.678 cv
44.21 243.258 44.09 242.878 43.9 242.538 cv
43.7 242.198 43.44 242.028 43.12 242.008 cv
42.79 241.998 42.5 242.158 42.26 242.498 cv
42.01 242.838 41.85 243.368 41.77 244.078 cv
f
45.95 244.318 mo
45.97 243.628 46.07 243.078 46.24 242.678 cv
46.41 242.278 46.65 241.938 46.97 241.678 cv
47.28 241.418 47.66 241.288 48.12 241.288 cv
48.57 241.288 48.97 241.478 49.31 241.858 cv
49.65 242.238 49.87 242.708 49.97 243.278 cv
50.07 243.858 50.11 244.518 50.07 245.258 cv
50.03 245.998 49.9 246.608 49.68 247.068 cv
49.46 247.538 49.12 247.858 48.68 248.038 cv
48.24 248.218 47.79 248.198 47.35 247.978 cv
46.91 247.758 46.6 247.468 46.42 247.108 cv
46.24 246.748 46.11 246.358 46.03 245.958 cv
45.95 245.558 45.92 245.008 45.95 244.318 cv
46.77 244.078 mo
46.69 244.798 46.71 245.428 46.85 245.988 cv
46.98 246.548 47.19 246.948 47.49 247.188 cv
47.79 247.428 48.09 247.468 48.41 247.328 cv
48.72 247.188 48.95 246.898 49.09 246.468 cv
49.23 246.038 49.31 245.568 49.31 245.058 cv
49.31 244.558 49.29 244.098 49.25 243.678 cv
49.21 243.258 49.09 242.878 48.9 242.538 cv
48.7 242.198 48.44 242.028 48.12 242.008 cv
47.79 241.998 47.5 242.158 47.26 242.498 cv
47.01 242.838 46.85 243.368 46.77 244.078 cv
f
57.6 194.282 mo
54.1 194.282 li
f
57.6 194.282 mo
54.1 194.282 li
@
38.73 196 mo
35.72 196 li
35.72 195.34 li
38.88 190.77 li
39.47 190.77 li
39.47 195.34 li
40.4 195.34 li
40.4 196 li
39.47 196 li
39.47 197.49 li
38.73 197.49 li
38.73 196 li
38.73 195.34 mo
38.73 192.25 li
36.54 195.34 li
38.73 195.34 li
f
40.95 193.76 mo
40.97 193.07 41.07 192.52 41.24 192.12 cv
41.41 191.72 41.65 191.38 41.97 191.12 cv
42.28 190.86 42.66 190.73 43.12 190.73 cv
43.57 190.73 43.97 190.92 44.31 191.3 cv
44.65 191.68 44.87 192.15 44.97 192.72 cv
45.07 193.3 45.11 193.96 45.07 194.7 cv
45.03 195.44 44.9 196.05 44.68 196.51 cv
44.46 196.98 44.12 197.3 43.68 197.48 cv
43.24 197.66 42.79 197.64 42.35 197.42 cv
41.91 197.2 41.6 196.91 41.42 196.55 cv
41.24 196.19 41.11 195.8 41.03 195.4 cv
40.95 195 40.92 194.45 40.95 193.76 cv
41.77 193.52 mo
41.69 194.24 41.71 194.87 41.85 195.43 cv
41.98 195.99 42.19 196.39 42.49 196.63 cv
42.79 196.87 43.09 196.91 43.41 196.77 cv
43.72 196.63 43.95 196.34 44.09 195.91 cv
44.23 195.48 44.31 195.01 44.31 194.5 cv
44.31 194 44.29 193.54 44.25 193.12 cv
44.21 192.7 44.09 192.32 43.9 191.98 cv
43.7 191.64 43.44 191.47 43.12 191.45 cv
42.79 191.44 42.5 191.6 42.26 191.94 cv
42.01 192.28 41.85 192.81 41.77 193.52 cv
f
45.95 193.76 mo
45.97 193.07 46.07 192.52 46.24 192.12 cv
46.41 191.72 46.65 191.38 46.97 191.12 cv
47.28 190.86 47.66 190.73 48.12 190.73 cv
48.57 190.73 48.97 190.92 49.31 191.3 cv
49.65 191.68 49.87 192.15 49.97 192.72 cv
50.07 193.3 50.11 193.96 50.07 194.7 cv
50.03 195.44 49.9 196.05 49.68 196.51 cv
49.46 196.98 49.12 197.3 48.68 197.48 cv
48.24 197.66 47.79 197.64 47.35 197.42 cv
46.91 197.2 46.6 196.91 46.42 196.55 cv
46.24 196.19 46.11 195.8 46.03 195.4 cv
45.95 195 45.92 194.45 45.95 193.76 cv
46.77 193.52 mo
46.69 194.24 46.71 194.87 46.85 195.43 cv
46.98 195.99 47.19 196.39 47.49 196.63 cv
47.79 196.87 48.09 196.91 48.41 196.77 cv
48.72 196.63 48.95 196.34 49.09 195.91 cv
49.23 195.48 49.31 195.01 49.31 194.5 cv
49.31 194 49.29 193.54 49.25 193.12 cv
49.21 192.7 49.09 192.32 48.9 191.98 cv
48.7 191.64 48.44 191.47 48.12 191.45 cv
47.79 191.44 47.5 191.6 47.26 191.94 cv
47.01 192.28 46.85 192.81 46.77 193.52 cv
f
57.6 143.724 mo
54.1 143.724 li
f
57.6 143.724 mo
54.1 143.724 li
@
35.99 144.642 mo
36.01 144.262 36.08 143.942 36.2 143.682 cv
36.32 143.422 36.49 143.102 36.73 142.712 cv
38.33 140.212 li
39.23 140.212 li
37.59 142.782 li
38.29 142.602 38.85 142.632 39.27 142.862 cv
39.69 143.102 39.97 143.362 40.11 143.662 cv
40.25 143.962 40.33 144.292 40.35 144.642 cv
40.36 145.002 40.31 145.342 40.19 145.682 cv
40.07 146.022 39.86 146.322 39.56 146.592 cv
39.26 146.872 38.85 147.022 38.31 147.042 cv
37.77 147.072 37.32 146.972 36.94 146.752 cv
36.56 146.532 36.3 146.222 36.16 145.822 cv
36.02 145.422 35.96 145.022 35.99 144.642 cv
37.2 145.932 mo
37.43 146.182 37.74 146.322 38.14 146.342 cv
38.53 146.372 38.86 146.242 39.12 145.952 cv
39.38 145.672 39.51 145.252 39.51 144.702 cv
39.51 144.162 39.34 143.782 39.02 143.572 cv
38.69 143.362 38.32 143.282 37.92 143.332 cv
37.52 143.392 37.22 143.582 37.04 143.922 cv
36.86 144.262 36.78 144.622 36.81 145.002 cv
36.83 145.382 36.96 145.692 37.2 145.932 cv
f
40.95 143.202 mo
40.97 142.512 41.07 141.962 41.24 141.562 cv
41.41 141.162 41.65 140.822 41.97 140.562 cv
42.28 140.302 42.66 140.172 43.12 140.172 cv
43.57 140.172 43.97 140.362 44.31 140.742 cv
44.65 141.122 44.87 141.592 44.97 142.162 cv
45.07 142.742 45.11 143.402 45.07 144.142 cv
45.03 144.882 44.9 145.492 44.68 145.952 cv
44.46 146.422 44.12 146.742 43.68 146.922 cv
43.24 147.102 42.79 147.082 42.35 146.862 cv
41.91 146.642 41.6 146.352 41.42 145.992 cv
41.24 145.632 41.11 145.242 41.03 144.842 cv
40.95 144.442 40.92 143.892 40.95 143.202 cv
41.77 142.962 mo
41.69 143.682 41.71 144.312 41.85 144.872 cv
41.98 145.432 42.19 145.832 42.49 146.072 cv
42.79 146.312 43.09 146.352 43.41 146.212 cv
43.72 146.072 43.95 145.782 44.09 145.352 cv
44.23 144.922 44.31 144.452 44.31 143.942 cv
44.31 143.442 44.29 142.982 44.25 142.562 cv
44.21 142.142 44.09 141.762 43.9 141.422 cv
43.7 141.082 43.44 140.912 43.12 140.892 cv
42.79 140.882 42.5 141.042 42.26 141.382 cv
42.01 141.722 41.85 142.252 41.77 142.962 cv
f
45.95 143.202 mo
45.97 142.512 46.07 141.962 46.24 141.562 cv
46.41 141.162 46.65 140.822 46.97 140.562 cv
47.28 140.302 47.66 140.172 48.12 140.172 cv
48.57 140.172 48.97 140.362 49.31 140.742 cv
49.65 141.122 49.87 141.592 49.97 142.162 cv
50.07 142.742 50.11 143.402 50.07 144.142 cv
50.03 144.882 49.9 145.492 49.68 145.952 cv
49.46 146.422 49.12 146.742 48.68 146.922 cv
48.24 147.102 47.79 147.082 47.35 146.862 cv
46.91 146.642 46.6 146.352 46.42 145.992 cv
46.24 145.632 46.11 145.242 46.03 144.842 cv
45.95 144.442 45.92 143.892 45.95 143.202 cv
46.77 142.962 mo
46.69 143.682 46.71 144.312 46.85 144.872 cv
46.98 145.432 47.19 145.832 47.49 146.072 cv
47.79 146.312 48.09 146.352 48.41 146.212 cv
48.72 146.072 48.95 145.782 49.09 145.352 cv
49.23 144.922 49.31 144.452 49.31 143.942 cv
49.31 143.442 49.29 142.982 49.25 142.562 cv
49.21 142.142 49.09 141.762 48.9 141.422 cv
48.7 141.082 48.44 140.912 48.12 140.892 cv
47.79 140.882 47.5 141.042 47.26 141.382 cv
47.01 141.722 46.85 142.252 46.77 142.962 cv
f
57.6 93.1663 mo
54.1 93.1663 li
f
57.6 93.1663 mo
54.1 93.1663 li
@
35.87 94.4538 mo
35.87 94.1438 35.94 93.8338 36.1 93.5338 cv
36.26 93.2338 36.52 92.9938 36.89 92.8138 cv
36.57 92.6338 36.36 92.4338 36.26 92.2138 cv
36.16 91.9938 36.1 91.7338 36.09 91.4438 cv
36.07 91.1638 36.11 90.9138 36.2 90.7038 cv
36.29 90.5038 36.43 90.3038 36.61 90.1238 cv
36.79 89.9438 37 89.8138 37.22 89.7538 cv
37.44 89.6938 37.68 89.6538 37.94 89.6538 cv
38.2 89.6538 38.43 89.6838 38.64 89.7338 cv
38.85 89.7838 39.07 89.8938 39.31 90.0638 cv
39.54 90.2338 39.71 90.4738 39.82 90.7838 cv
39.92 91.1038 39.92 91.4638 39.8 91.8838 cv
39.68 92.3038 39.37 92.6238 38.88 92.8538 cv
39.32 92.9938 39.64 93.1938 39.82 93.4638 cv
40 93.7438 40.09 94.0738 40.09 94.4638 cv
40.09 94.8538 40.03 95.1638 39.91 95.3938 cv
39.79 95.6338 39.66 95.8238 39.52 95.9838 cv
39.38 96.1438 39.18 96.2638 38.94 96.3538 cv
38.69 96.4438 38.38 96.4838 38 96.4838 cv
37.62 96.4838 37.3 96.4438 37.03 96.3538 cv
36.75 96.2638 36.52 96.1238 36.34 95.9438 cv
36.16 95.7638 36.03 95.5438 35.97 95.2938 cv
35.9 95.0538 35.87 94.7738 35.87 94.4538 cv
36.67 94.4138 mo
36.65 94.7338 36.71 95.0038 36.83 95.2338 cv
36.95 95.4738 37.16 95.6238 37.47 95.6838 cv
37.78 95.7538 38.11 95.7538 38.45 95.6738 cv
38.79 95.5938 39.02 95.4138 39.15 95.1238 cv
39.28 94.8438 39.33 94.5538 39.29 94.2638 cv
39.25 93.9838 39.08 93.7438 38.8 93.5438 cv
38.51 93.3438 38.2 93.2638 37.86 93.2838 cv
37.52 93.3138 37.24 93.4338 37.02 93.6338 cv
36.8 93.8438 36.68 94.1038 36.67 94.4138 cv
36.81 91.3738 mo
36.81 91.6338 36.9 91.8838 37.08 92.1138 cv
37.26 92.3538 37.55 92.4638 37.94 92.4638 cv
38.33 92.4638 38.62 92.3538 38.82 92.1138 cv
39.02 91.8838 39.11 91.6038 39.1 91.2738 cv
39.08 90.9538 38.96 90.7138 38.74 90.5538 cv
38.52 90.3938 38.22 90.3338 37.84 90.3538 cv
37.46 90.3838 37.2 90.4938 37.04 90.6838 cv
36.88 90.8838 36.81 91.1138 36.81 91.3738 cv
f
40.95 92.6438 mo
40.97 91.9538 41.07 91.4038 41.24 91.0038 cv
41.41 90.6038 41.65 90.2638 41.97 90.0038 cv
42.28 89.7438 42.66 89.6138 43.12 89.6138 cv
43.57 89.6138 43.97 89.8038 44.31 90.1838 cv
44.65 90.5638 44.87 91.0338 44.97 91.6038 cv
45.07 92.1838 45.11 92.8438 45.07 93.5838 cv
45.03 94.3238 44.9 94.9338 44.68 95.3938 cv
44.46 95.8638 44.12 96.1838 43.68 96.3638 cv
43.24 96.5438 42.79 96.5238 42.35 96.3038 cv
41.91 96.0838 41.6 95.7938 41.42 95.4338 cv
41.24 95.0738 41.11 94.6838 41.03 94.2838 cv
40.95 93.8838 40.92 93.3338 40.95 92.6438 cv
41.77 92.4038 mo
41.69 93.1238 41.71 93.7538 41.85 94.3138 cv
41.98 94.8738 42.19 95.2738 42.49 95.5138 cv
42.79 95.7538 43.09 95.7938 43.41 95.6538 cv
43.72 95.5138 43.95 95.2238 44.09 94.7938 cv
44.23 94.3638 44.31 93.8938 44.31 93.3838 cv
44.31 92.8838 44.29 92.4238 44.25 92.0038 cv
44.21 91.5838 44.09 91.2038 43.9 90.8638 cv
43.7 90.5238 43.44 90.3538 43.12 90.3338 cv
42.79 90.3238 42.5 90.4838 42.26 90.8238 cv
42.01 91.1638 41.85 91.6938 41.77 92.4038 cv
f
45.95 92.6438 mo
45.97 91.9538 46.07 91.4038 46.24 91.0038 cv
46.41 90.6038 46.65 90.2638 46.97 90.0038 cv
47.28 89.7438 47.66 89.6138 48.12 89.6138 cv
48.57 89.6138 48.97 89.8038 49.31 90.1838 cv
49.65 90.5638 49.87 91.0338 49.97 91.6038 cv
50.07 92.1838 50.11 92.8438 50.07 93.5838 cv
50.03 94.3238 49.9 94.9338 49.68 95.3938 cv
49.46 95.8638 49.12 96.1838 48.68 96.3638 cv
48.24 96.5438 47.79 96.5238 47.35 96.3038 cv
46.91 96.0838 46.6 95.7938 46.42 95.4338 cv
46.24 95.0738 46.11 94.6838 46.03 94.2838 cv
45.95 93.8838 45.92 93.3338 45.95 92.6438 cv
46.77 92.4038 mo
46.69 93.1238 46.71 93.7538 46.85 94.3138 cv
46.98 94.8738 47.19 95.2738 47.49 95.5138 cv
47.79 95.7538 48.09 95.7938 48.41 95.6538 cv
48.72 95.5138 48.95 95.2238 49.09 94.7938 cv
49.23 94.3638 49.31 93.8938 49.31 93.3838 cv
49.31 92.8838 49.29 92.4238 49.25 92.0038 cv
49.21 91.5838 49.09 91.2038 48.9 90.8638 cv
48.7 90.5238 48.44 90.3538 48.12 90.3338 cv
47.79 90.3238 47.5 90.4838 47.26 90.8238 cv
47.01 91.1638 46.85 91.6938 46.77 92.4038 cv
f
57.6 42.6083 mo
54.1 42.6083 li
f
57.6 42.6083 mo
54.1 42.6083 li
@
32.79 40.4158 mo
32.45 40.7558 32.02 41.0858 31.5 41.3958 cv
31.5 40.6558 li
32.15 40.2158 32.68 39.6958 33.1 39.0958 cv
33.57 39.0958 li
33.57 45.8158 li
32.79 45.8158 li
32.79 40.4158 li
f
35.95 42.0858 mo
35.97 41.3958 36.07 40.8458 36.24 40.4458 cv
36.41 40.0458 36.65 39.7058 36.97 39.4458 cv
37.28 39.1858 37.66 39.0558 38.12 39.0558 cv
38.57 39.0558 38.97 39.2458 39.31 39.6258 cv
39.65 40.0058 39.87 40.4758 39.97 41.0458 cv
40.07 41.6258 40.11 42.2858 40.07 43.0258 cv
40.03 43.7658 39.9 44.3758 39.68 44.8358 cv
39.46 45.3058 39.12 45.6258 38.68 45.8058 cv
38.24 45.9858 37.79 45.9658 37.35 45.7458 cv
36.91 45.5258 36.6 45.2358 36.42 44.8758 cv
36.24 44.5158 36.11 44.1258 36.03 43.7258 cv
35.95 43.3258 35.92 42.7758 35.95 42.0858 cv
36.77 41.8458 mo
36.69 42.5658 36.71 43.1958 36.85 43.7558 cv
36.98 44.3158 37.19 44.7158 37.49 44.9558 cv
37.79 45.1958 38.09 45.2358 38.41 45.0958 cv
38.72 44.9558 38.95 44.6658 39.09 44.2358 cv
39.23 43.8058 39.31 43.3358 39.31 42.8258 cv
39.31 42.3258 39.29 41.8658 39.25 41.4458 cv
39.21 41.0258 39.09 40.6458 38.9 40.3058 cv
38.7 39.9658 38.44 39.7958 38.12 39.7758 cv
37.79 39.7658 37.5 39.9258 37.26 40.2658 cv
37.01 40.6058 36.85 41.1358 36.77 41.8458 cv
f
40.95 42.0858 mo
40.97 41.3958 41.07 40.8458 41.24 40.4458 cv
41.41 40.0458 41.65 39.7058 41.97 39.4458 cv
42.28 39.1858 42.66 39.0558 43.12 39.0558 cv
43.57 39.0558 43.97 39.2458 44.31 39.6258 cv
44.65 40.0058 44.87 40.4758 44.97 41.0458 cv
45.07 41.6258 45.11 42.2858 45.07 43.0258 cv
45.03 43.7658 44.9 44.3758 44.68 44.8358 cv
44.46 45.3058 44.12 45.6258 43.68 45.8058 cv
43.24 45.9858 42.79 45.9658 42.35 45.7458 cv
41.91 45.5258 41.6 45.2358 41.42 44.8758 cv
41.24 44.5158 41.11 44.1258 41.03 43.7258 cv
40.95 43.3258 40.92 42.7758 40.95 42.0858 cv
41.77 41.8458 mo
41.69 42.5658 41.71 43.1958 41.85 43.7558 cv
41.98 44.3158 42.19 44.7158 42.49 44.9558 cv
42.79 45.1958 43.09 45.2358 43.41 45.0958 cv
43.72 44.9558 43.95 44.6658 44.09 44.2358 cv
44.23 43.8058 44.31 43.3358 44.31 42.8258 cv
44.31 42.3258 44.29 41.8658 44.25 41.4458 cv
44.21 41.0258 44.09 40.6458 43.9 40.3058 cv
43.7 39.9658 43.44 39.7958 43.12 39.7758 cv
42.79 39.7658 42.5 39.9258 42.26 40.2658 cv
42.01 40.6058 41.85 41.1358 41.77 41.8458 cv
f
45.95 42.0858 mo
45.97 41.3958 46.07 40.8458 46.24 40.4458 cv
46.41 40.0458 46.65 39.7058 46.97 39.4458 cv
47.28 39.1858 47.66 39.0558 48.12 39.0558 cv
48.57 39.0558 48.97 39.2458 49.31 39.6258 cv
49.65 40.0058 49.87 40.4758 49.97 41.0458 cv
50.07 41.6258 50.11 42.2858 50.07 43.0258 cv
50.03 43.7658 49.9 44.3758 49.68 44.8358 cv
49.46 45.3058 49.12 45.6258 48.68 45.8058 cv
48.24 45.9858 47.79 45.9658 47.35 45.7458 cv
46.91 45.5258 46.6 45.2358 46.42 44.8758 cv
46.24 44.5158 46.11 44.1258 46.03 43.7258 cv
45.95 43.3258 45.92 42.7758 45.95 42.0858 cv
46.77 41.8458 mo
46.69 42.5658 46.71 43.1958 46.85 43.7558 cv
46.98 44.3158 47.19 44.7158 47.49 44.9558 cv
47.79 45.1958 48.09 45.2358 48.41 45.0958 cv
48.72 44.9558 48.95 44.6658 49.09 44.2358 cv
49.23 43.8058 49.31 43.3358 49.31 42.8258 cv
49.31 42.3258 49.29 41.8658 49.25 41.4458 cv
49.21 41.0258 49.09 40.6458 48.9 40.3058 cv
48.7 39.9658 48.44 39.7958 48.12 39.7758 cv
47.79 39.7658 47.5 39.9258 47.26 40.2658 cv
47.01 40.6058 46.85 41.1358 46.77 41.8458 cv
f
24.69 189.15 mo
25.21 190.9 25.6 192.16 25.89 192.94 cv
25.67 193 25.43 193.1 25.15 193.25 cv
25.13 192.99 25.08 192.77 25 192.59 cv
22.54 192.59 li
22.33 192.59 22.06 192.61 21.72 192.63 cv
21.72 191.88 li
21.96 191.91 22.29 191.92 22.73 191.92 cv
24.84 191.92 li
24.79 191.74 24.73 191.52 24.65 191.26 cv
20.7 191.26 li
20.7 192.55 li
20.44 192.53 19.99 192.51 19.33 192.51 cv
18.66 192.51 18.19 192.53 17.93 192.55 cv
17.93 189.54 li
18.22 189.57 18.69 189.58 19.33 189.58 cv
19.96 189.58 20.42 189.57 20.7 189.54 cv
20.7 190.59 li
22.11 190.59 li
22.11 190.29 22.1 189.96 22.07 189.62 cv
22.77 189.62 li
22.75 189.96 22.73 190.29 22.73 190.59 cv
24.49 190.59 li
24.44 190.36 24.27 189.88 23.98 189.15 cv
24.2 189.18 24.43 189.18 24.69 189.15 cv
17.5 187.08 mo
17.68 187.24 17.93 187.39 18.24 187.55 cv
18.24 184.7 li
18.68 184.88 19.15 185.12 19.65 185.42 cv
20.15 185.72 20.56 186 20.9 186.26 cv
21.37 185.66 21.71 184.91 21.91 183.99 cv
22.17 184.2 22.41 184.36 22.62 184.46 cv
22.49 184.78 22.31 185.14 22.09 185.56 cv
21.87 185.98 21.63 186.35 21.37 186.69 cv
21.63 187.03 21.87 187.41 22.07 187.81 cv
22.28 188.21 22.49 188.65 22.69 189.11 cv
22.46 189.22 22.24 189.36 22.03 189.54 cv
21.95 189.2 21.82 188.81 21.64 188.37 cv
21.46 187.93 21.23 187.54 20.94 187.2 cv
20.68 187.46 20.25 187.84 19.65 188.33 cv
19.97 188.51 20.23 188.68 20.43 188.84 cv
20.27 189 20.13 189.19 20 189.42 cv
19.74 189.14 19.35 188.85 18.81 188.56 cv
18.28 188.28 17.74 188.06 17.19 187.9 cv
17.37 187.62 17.48 187.34 17.5 187.08 cv
22.54 185.05 mo
22.88 185.08 23.48 185.09 24.33 185.09 cv
25.16 185.09 25.76 185.08 26.16 185.05 cv
26.16 185.79 li
25.42 185.79 li
25.42 188.02 li
26.2 188.02 li
26.2 188.72 li
25.76 188.7 25.14 188.68 24.33 188.68 cv
23.5 188.68 22.9 188.7 22.54 188.72 cv
22.54 185.05 li
24.84 185.79 mo
23.16 185.79 li
23.16 188.02 li
24.84 188.02 li
24.84 185.79 li
20.12 190.24 mo
18.51 190.24 li
18.51 191.84 li
20.12 191.84 li
20.12 190.24 li
19.1 187.98 mo
19.57 187.67 20.03 187.27 20.47 186.77 cv
20.31 186.61 20.06 186.43 19.71 186.22 cv
19.36 186.02 19.07 185.86 18.83 185.75 cv
18.83 187.82 li
19.1 187.98 li
f
22.42 176.34 mo
22.42 175.69 22.41 175.18 22.38 174.81 cv
23.12 174.81 li
23.1 175.15 23.08 175.65 23.08 176.3 cv
23.08 176.88 li
25.19 176.88 li
25.19 175.28 li
25.12 174.19 li
25.89 174.19 li
25.86 174.55 25.85 174.92 25.85 175.28 cv
25.85 179.15 li
25.85 179.62 25.86 180.05 25.89 180.44 cv
25.15 180.44 li
25.18 180.05 25.19 179.62 25.19 179.15 cv
25.19 177.63 li
23.08 177.63 li
23.08 178.13 li
23.08 178.61 23.1 179.12 23.12 179.66 cv
22.38 179.66 li
22.41 179.12 22.42 178.61 22.42 178.13 cv
22.42 176.34 li
18.01 174.89 mo
18.4 175.13 18.74 175.37 19.04 175.61 cv
19.34 175.86 19.66 176.14 20 176.45 cv
20.5 175.57 20.95 174.83 21.37 174.23 cv
21.58 174.47 21.77 174.66 21.95 174.81 cv
21.25 175.7 20.75 176.42 20.43 176.96 cv
20.75 177.38 21.01 177.78 21.21 178.14 cv
21.42 178.5 21.71 179.03 22.07 179.73 cv
21.89 179.81 21.67 180 21.4 180.28 cv
21.22 179.66 20.89 178.95 20.41 178.15 cv
19.93 177.36 19.34 176.72 18.63 176.22 cv
18.63 178.25 li
18.63 178.72 18.65 179.16 18.67 179.58 cv
17.97 179.58 li
18 179.19 18.01 178.76 18.01 178.29 cv
18.01 174.89 li
19.72 179.7 mo
19.96 179.96 20.47 180.39 21.25 180.98 cv
24.45 180.98 li
25 180.98 25.6 180.97 26.28 180.95 cv
26.28 181.73 li
25.6 181.71 24.99 181.69 24.41 181.69 cv
21.99 181.69 li
22.33 182.05 22.65 182.4 22.93 182.74 cv
22.75 182.9 22.56 183.07 22.38 183.25 cv
22 182.65 21.51 182.1 20.92 181.59 cv
20.34 181.09 19.76 180.69 19.18 180.4 cv
19.36 180.2 19.54 179.96 19.72 179.7 cv
17.77 180.13 mo
17.98 180.31 18.35 180.64 18.87 181.12 cv
19.39 181.6 19.85 182.07 20.23 182.51 cv
20.05 182.67 19.87 182.86 19.69 183.09 cv
19.38 182.63 19.01 182.19 18.58 181.79 cv
18.15 181.39 17.71 181.05 17.26 180.79 cv
17.45 180.59 17.62 180.37 17.77 180.13 cv
f
20.97 170.95 mo
18.4 170.95 li
18.17 170.95 17.83 170.96 17.38 170.98 cv
17.38 170.13 li
17.88 170.15 18.2 170.16 18.36 170.16 cv
20.97 170.16 li
20.97 165.44 li
20.97 165.1 20.96 164.74 20.94 164.34 cv
21.72 164.34 li
21.7 164.84 21.68 165.3 21.68 165.71 cv
21.68 167.98 li
22.2 167.8 22.71 167.52 23.2 167.14 cv
23.7 166.76 24.11 166.31 24.43 165.79 cv
24.76 165.27 24.99 164.8 25.12 164.38 cv
25.32 164.72 25.57 164.98 25.89 165.16 cv
25.6 165.71 25.27 166.22 24.88 166.69 cv
24.5 167.16 24.02 167.58 23.46 167.94 cv
22.9 168.3 22.31 168.58 21.68 168.76 cv
21.68 170.16 li
24.76 170.16 li
24.3 169.41 23.95 168.9 23.71 168.64 cv
24 168.46 24.26 168.28 24.49 168.09 cv
24.73 168.59 25.02 169.09 25.36 169.58 cv
25.71 170.08 26 170.44 26.24 170.67 cv
25.95 170.88 25.7 171.08 25.5 171.26 cv
25.3 171.06 25.03 170.95 24.69 170.95 cv
21.68 170.95 li
21.68 171.84 li
21.68 172.21 21.7 172.63 21.72 173.09 cv
20.94 173.09 li
20.96 172.63 20.97 172.24 20.97 171.92 cv
20.97 170.95 li
18.01 166.02 mo
18.25 166.31 18.64 166.73 19.2 167.29 cv
19.76 167.85 20.3 168.41 20.82 168.95 cv
20.51 169.19 20.3 169.38 20.19 169.54 cv
19.88 169.1 19.44 168.61 18.87 168.06 cv
18.3 167.51 17.8 167.09 17.38 166.8 cv
17.56 166.6 17.77 166.34 18.01 166.02 cv
f
22.73 160.95 mo
22.76 160.22 22.77 159.63 22.77 159.19 cv
22.77 155.55 li
23.19 155.79 23.61 156.08 24.03 156.42 cv
24.45 156.76 24.78 157.08 25.04 157.39 cv
25.2 157.05 25.32 156.57 25.42 155.95 cv
25.52 155.33 25.57 154.73 25.57 154.15 cv
25.73 154.31 25.99 154.45 26.36 154.58 cv
26.25 155.34 26.12 156 25.98 156.57 cv
25.84 157.15 25.68 157.63 25.5 158.02 cv
25.73 158.57 25.92 159.11 26.06 159.64 cv
26.2 160.18 26.31 160.73 26.39 161.3 cv
26.18 161.38 25.96 161.53 25.73 161.77 cv
25.73 161.3 25.66 160.77 25.54 160.17 cv
25.41 159.57 25.25 159.05 25.04 158.6 cv
24.68 159.05 24.12 159.49 23.36 159.93 cv
23.4 160.95 li
22.73 160.95 li
17.42 159.03 mo
17.34 158.75 17.25 158.49 17.15 158.25 cv
17.44 158.1 17.82 157.94 18.28 157.78 cv
18.28 156.34 li
18.28 156.06 18.27 155.53 18.24 154.77 cv
18.94 154.77 li
18.92 155.51 18.9 156.05 18.9 156.41 cv
18.9 161.53 li
20.08 161.53 21.02 161.55 21.74 161.57 cv
22.46 161.6 23.17 161.67 23.87 161.79 cv
24.57 161.91 25.34 162.16 26.16 162.55 cv
26 162.79 25.89 163.03 25.81 163.29 cv
25.09 162.87 24.37 162.61 23.67 162.49 cv
22.97 162.37 22.08 162.31 20.98 162.29 cv
19.88 162.28 18.98 162.29 18.28 162.31 cv
18.28 158.68 li
17.94 158.79 17.66 158.91 17.42 159.03 cv
20.19 159.81 mo
19.78 159.81 19.46 159.83 19.22 159.85 cv
19.22 159.03 li
19.43 159.06 19.75 159.07 20.19 159.07 cv
20.19 156.96 li
19.78 156.96 19.44 156.98 19.18 157 cv
19.18 156.18 li
19.5 156.21 19.83 156.22 20.19 156.22 cv
20.19 155.65 20.18 155.15 20.15 154.73 cv
20.82 154.73 li
20.8 155.13 20.78 155.62 20.78 156.22 cv
21.48 156.22 21.99 156.21 22.3 156.18 cv
22.3 159.85 li
21.89 159.83 21.38 159.81 20.78 159.81 cv
20.78 160.13 20.8 160.58 20.82 161.18 cv
20.15 161.18 li
20.18 160.58 20.19 160.13 20.19 159.81 cv
21.68 156.96 mo
20.78 156.96 li
20.78 159.07 li
21.68 159.07 li
21.68 156.96 li
23.36 159.19 mo
23.88 158.85 24.33 158.45 24.69 157.98 cv
24.41 157.59 23.96 157.19 23.36 156.77 cv
23.36 159.15 li
23.36 159.19 li
f
2 lw
2 lc
73.8327 294.64 mo
154.996 294.387 li
236.16 293.882 li
317.324 293.882 li
398.487 294.134 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
gsave
70.3328 298.14 mo
77.3328 298.14 li
77.3328 291.14 li
70.3328 291.14 li
70.3328 298.14 li
clp
70.8327 297.64 mo
76.8327 297.64 li
76.8327 291.64 li
70.8327 291.64 li
cp
f
1 lw
0 lc
0 lj
70.8327 297.64 mo
76.8327 297.64 li
76.8327 291.64 li
70.8327 291.64 li
cp
@
grestore
gsave
151.496 297.887 mo
158.496 297.887 li
158.496 290.887 li
151.496 290.887 li
151.496 297.887 li
clp
151.996 297.387 mo
157.996 297.387 li
157.996 291.387 li
151.996 291.387 li
cp
f
1 lw
0 lc
0 lj
151.996 297.387 mo
157.996 297.387 li
157.996 291.387 li
151.996 291.387 li
cp
@
grestore
gsave
232.66 297.382 mo
239.66 297.382 li
239.66 290.382 li
232.66 290.382 li
232.66 297.382 li
clp
233.16 296.882 mo
239.16 296.882 li
239.16 290.882 li
233.16 290.882 li
cp
f
1 lw
0 lc
0 lj
233.16 296.882 mo
239.16 296.882 li
239.16 290.882 li
233.16 290.882 li
cp
@
grestore
gsave
313.824 297.382 mo
320.824 297.382 li
320.824 290.382 li
313.824 290.382 li
313.824 297.382 li
clp
314.324 296.882 mo
320.324 296.882 li
320.324 290.882 li
314.324 290.882 li
cp
f
1 lw
0 lc
0 lj
314.324 296.882 mo
320.324 296.882 li
320.324 290.882 li
314.324 290.882 li
cp
@
grestore
gsave
394.987 297.634 mo
401.987 297.634 li
401.987 290.634 li
394.987 290.634 li
394.987 297.634 li
clp
395.487 297.134 mo
401.487 297.134 li
401.487 291.134 li
395.487 291.134 li
cp
f
1 lw
0 lc
0 lj
395.487 297.134 mo
401.487 297.134 li
401.487 291.134 li
395.487 291.134 li
cp
@
grestore
0 lc
[7.4 3.2 ] 0 dsh
73.8327 292.618 mo
154.996 291.101 li
236.16 215.769 li
317.324 121.984 li
398.487 52.7199 li
.926818 .245335 1 .155612 cmyk
@
gsave
70.3328 296.118 mo
77.3328 296.118 li
77.3328 289.118 li
70.3328 289.118 li
70.3328 296.118 li
clp
73.8327 295.618 mo
74.6283 295.618 75.3915 295.301 75.954 294.739 cv
76.5166 294.176 76.8327 293.413 76.8327 292.618 cv
76.8327 291.822 76.5166 291.059 75.954 290.496 cv
75.3915 289.934 74.6283 289.618 73.8327 289.618 cv
73.0371 289.618 72.274 289.934 71.7114 290.496 cv
71.1488 291.059 70.8327 291.822 70.8327 292.618 cv
70.8327 293.413 71.1488 294.176 71.7114 294.739 cv
72.274 295.301 73.0371 295.618 73.8327 295.618 cv
cp
f
1 lw
[] 0 dsh
73.8327 295.618 mo
74.6283 295.618 75.3915 295.301 75.954 294.739 cv
76.5166 294.176 76.8327 293.413 76.8327 292.618 cv
76.8327 291.822 76.5166 291.059 75.954 290.496 cv
75.3915 289.934 74.6283 289.618 73.8327 289.618 cv
73.0371 289.618 72.274 289.934 71.7114 290.496 cv
71.1488 291.059 70.8327 291.822 70.8327 292.618 cv
70.8327 293.413 71.1488 294.176 71.7114 294.739 cv
72.274 295.301 73.0371 295.618 73.8327 295.618 cv
cp
@
grestore
gsave
151.496 294.601 mo
158.496 294.601 li
158.496 287.601 li
151.496 287.601 li
151.496 294.601 li
clp
154.996 294.101 mo
155.792 294.101 156.555 293.785 157.118 293.222 cv
157.68 292.66 157.996 291.896 157.996 291.101 cv
157.996 290.305 157.68 289.542 157.118 288.98 cv
156.555 288.417 155.792 288.101 154.996 288.101 cv
154.201 288.101 153.438 288.417 152.875 288.98 cv
152.312 289.542 151.996 290.305 151.996 291.101 cv
151.996 291.896 152.312 292.66 152.875 293.222 cv
153.438 293.785 154.201 294.101 154.996 294.101 cv
cp
f
1 lw
[] 0 dsh
154.996 294.101 mo
155.792 294.101 156.555 293.785 157.118 293.222 cv
157.68 292.66 157.996 291.896 157.996 291.101 cv
157.996 290.305 157.68 289.542 157.118 288.98 cv
156.555 288.417 155.792 288.101 154.996 288.101 cv
154.201 288.101 153.438 288.417 152.875 288.98 cv
152.312 289.542 151.996 290.305 151.996 291.101 cv
151.996 291.896 152.312 292.66 152.875 293.222 cv
153.438 293.785 154.201 294.101 154.996 294.101 cv
cp
@
grestore
gsave
232.66 219.269 mo
239.66 219.269 li
239.66 212.269 li
232.66 212.269 li
232.66 219.269 li
clp
236.16 218.769 mo
236.956 218.769 237.719 218.453 238.281 217.891 cv
238.844 217.328 239.16 216.565 239.16 215.769 cv
239.16 214.974 238.844 214.211 238.281 213.648 cv
237.719 213.086 236.956 212.769 236.16 212.769 cv
235.364 212.769 234.601 213.086 234.039 213.648 cv
233.476 214.211 233.16 214.974 233.16 215.769 cv
233.16 216.565 233.476 217.328 234.039 217.891 cv
234.601 218.453 235.364 218.769 236.16 218.769 cv
cp
f
1 lw
[] 0 dsh
236.16 218.769 mo
236.956 218.769 237.719 218.453 238.281 217.891 cv
238.844 217.328 239.16 216.565 239.16 215.769 cv
239.16 214.974 238.844 214.211 238.281 213.648 cv
237.719 213.086 236.956 212.769 236.16 212.769 cv
235.364 212.769 234.601 213.086 234.039 213.648 cv
233.476 214.211 233.16 214.974 233.16 215.769 cv
233.16 216.565 233.476 217.328 234.039 217.891 cv
234.601 218.453 235.364 218.769 236.16 218.769 cv
cp
@
grestore
gsave
313.824 125.484 mo
320.824 125.484 li
320.824 118.484 li
313.824 118.484 li
313.824 125.484 li
clp
317.324 124.984 mo
318.119 124.984 318.882 124.668 319.445 124.106 cv
320.008 123.543 320.324 122.78 320.324 121.984 cv
320.324 121.189 320.008 120.426 319.445 119.863 cv
318.882 119.3 318.119 118.984 317.324 118.984 cv
316.528 118.984 315.765 119.3 315.202 119.863 cv
314.64 120.426 314.324 121.189 314.324 121.984 cv
314.324 122.78 314.64 123.543 315.202 124.106 cv
315.765 124.668 316.528 124.984 317.324 124.984 cv
cp
f
1 lw
[] 0 dsh
317.324 124.984 mo
318.119 124.984 318.882 124.668 319.445 124.106 cv
320.008 123.543 320.324 122.78 320.324 121.984 cv
320.324 121.189 320.008 120.426 319.445 119.863 cv
318.882 119.3 318.119 118.984 317.324 118.984 cv
316.528 118.984 315.765 119.3 315.202 119.863 cv
314.64 120.426 314.324 121.189 314.324 121.984 cv
314.324 122.78 314.64 123.543 315.202 124.106 cv
315.765 124.668 316.528 124.984 317.324 124.984 cv
cp
@
grestore
gsave
394.987 56.2199 mo
401.987 56.2199 li
401.987 49.22 li
394.987 49.22 li
394.987 56.2199 li
clp
398.487 55.7199 mo
399.283 55.7199 400.046 55.4038 400.609 54.8412 cv
401.171 54.2786 401.487 53.5155 401.487 52.7199 cv
401.487 51.9243 401.171 51.1612 400.609 50.5986 cv
400.046 50.036 399.283 49.7199 398.487 49.7199 cv
397.692 49.7199 396.929 50.036 396.366 50.5986 cv
395.803 51.1612 395.487 51.9243 395.487 52.7199 cv
395.487 53.5155 395.803 54.2786 396.366 54.8412 cv
396.929 55.4038 397.692 55.7199 398.487 55.7199 cv
cp
f
1 lw
[] 0 dsh
398.487 55.7199 mo
399.283 55.7199 400.046 55.4038 400.609 54.8412 cv
401.171 54.2786 401.487 53.5155 401.487 52.7199 cv
401.487 51.9243 401.171 51.1612 400.609 50.5986 cv
400.046 50.036 399.283 49.7199 398.487 49.7199 cv
397.692 49.7199 396.929 50.036 396.366 50.5986 cv
395.803 51.1612 395.487 51.9243 395.487 52.7199 cv
395.487 53.5155 395.803 54.2786 396.366 54.8412 cv
396.929 55.4038 397.692 55.7199 398.487 55.7199 cv
cp
@
grestore
.8 lw
2 lc
0 lj
[] 0 dsh
57.6 306.736 mo
57.6 40.6239 li
1 /0 /CSD get_res sepcs
1 sep
@
414.72 306.736 mo
414.72 40.6239 li
@
57.6 306.736 mo
414.72 306.736 li
@
57.6 40.6239 mo
414.72 40.6239 li
@
146.6 74.6239 mo
64.6 74.6239 li
64.0101 74.6221 63.6627 74.4798 63.4535 74.2703 cv
63.2441 74.0612 63.1018 73.7137 63.1 73.1239 cv
63.1 47.6239 li
63.1018 47.034 63.2441 46.6866 63.4535 46.4774 cv
63.6627 46.268 64.0101 46.1257 64.6 46.124 cv
146.6 46.124 li
147.19 46.1257 147.537 46.268 147.746 46.4774 cv
147.956 46.6866 148.098 47.034 148.1 47.6239 cv
148.1 73.1239 li
148.098 73.7137 147.956 74.0612 147.746 74.2703 cv
147.537 74.4798 147.19 74.6221 146.6 74.6239 cv
0 0 0 0 cmyk
f
146.61 75.624 mo
146.607 75.624 146.603 75.6239 146.6 75.6239 cv
64.6 75.6239 li
64.5966 75.6239 64.5933 75.624 64.59 75.624 cv
63.8506 75.624 63.202 75.4326 62.7464 74.9774 cv
62.2893 74.52 62.0982 73.8673 62.1 73.1239 cv
62.1 47.6239 li
62.0982 46.8804 62.2893 46.2278 62.7464 45.7703 cv
63.2018 45.3154 63.8503 45.1239 64.5893 45.1239 cv
64.5929 45.1239 64.5964 45.1239 64.6 45.124 cv
146.6 45.124 li
146.604 45.1239 146.607 45.1239 146.611 45.1239 cv
147.35 45.1239 147.998 45.3154 148.454 45.7703 cv
148.911 46.2278 149.102 46.8804 149.1 47.6239 cv
149.1 73.1239 li
149.102 73.8673 148.911 74.52 148.454 74.9774 cv
147.998 75.4326 147.349 75.624 146.61 75.624 cv
64.6 74.6239 mo
146.6 74.6239 li
147.19 74.6221 147.537 74.4798 147.746 74.2703 cv
147.956 74.0612 148.098 73.7137 148.1 73.1239 cv
148.1 47.6239 li
148.098 47.034 147.956 46.6866 147.746 46.4774 cv
147.537 46.268 147.19 46.1257 146.6 46.124 cv
64.6 46.124 li
64.0101 46.1257 63.6627 46.268 63.4535 46.4774 cv
63.2441 46.6866 63.1018 47.034 63.1 47.6239 cv
63.1 73.1239 li
63.1018 73.7137 63.2441 74.0612 63.4535 74.2703 cv
63.6627 74.4798 64.0101 74.6221 64.6 74.6239 cv
64.6 74.6239 li
.159121 .120455 .125338 0 cmyk
f
2 lw
1 lj
66.6 53.1239 mo
86.6 53.1239 li
0 1 1 0 cmyk
@
73.6 56.1239 mo
79.6 56.1239 li
79.6 50.1239 li
73.6 50.1239 li
cp
f
1 lw
0 lc
0 lj
73.6 56.1239 mo
79.6 56.1239 li
79.6 50.1239 li
73.6 50.1239 li
cp
@
99.4 56.4239 mo
98.47 56.4239 li
97.92 54.3539 li
96.2 54.3539 li
95.65 56.4239 li
94.72 56.4239 li
96.67 49.6739 li
97.45 49.6739 li
99.4 56.4239 li
97.73 53.6139 mo
97.1 51.2339 li
97.02 51.2339 li
96.4 53.6139 li
97.73 53.6139 li
1 /0 /CSD get_res sepcs
1 sep
f
104.21 53.0739 mo
104.21 53.6939 104.16 54.2239 104.07 54.6539 cv
103.98 55.0839 103.83 55.4239 103.62 55.6839 cv
103.94 56.2739 li
103.31 56.9239 li
102.96 56.2739 li
102.85 56.3539 102.72 56.4139 102.56 56.4539 cv
102.4 56.4939 102.24 56.5039 102.06 56.5039 cv
101.38 56.5039 100.85 56.2439 100.46 55.7039 cv
100.06 55.1739 99.87 54.2939 99.87 53.0739 cv
99.87 51.8539 100.06 50.9739 100.46 50.4539 cv
100.85 49.9339 101.38 49.6739 102.06 49.6739 cv
102.74 49.6739 103.26 49.9339 103.64 50.4539 cv
104.02 50.9739 104.21 51.8539 104.21 53.0739 cv
103.27 53.0739 mo
103.27 51.9739 103.15 51.2639 102.92 50.9239 cv
102.68 50.5839 102.4 50.4139 102.06 50.4139 cv
101.72 50.4139 101.42 50.5839 101.18 50.9239 cv
100.93 51.2639 100.81 51.9739 100.81 53.0739 cv
100.81 54.1739 100.93 54.8939 101.18 55.2439 cv
101.42 55.5939 101.72 55.7639 102.06 55.7639 cv
102.19 55.7639 102.31 55.7439 102.41 55.7039 cv
102.51 55.6639 102.59 55.6239 102.65 55.5739 cv
102.02 54.3539 li
102.57 53.6939 li
103.12 54.7439 li
103.16 54.4839 103.2 54.2539 103.23 54.0439 cv
103.25 53.8439 103.27 53.5139 103.27 53.0739 cv
f
109.17 50.4939 mo
105.97 50.4939 li
105.97 52.6739 li
108.39 52.6739 li
108.39 53.4239 li
105.97 53.4239 li
105.97 56.4239 li
105.07 56.4239 li
105.07 49.7439 li
109.17 49.7439 li
109.17 50.4939 li
f
114.29 56.4239 mo
113.35 56.4239 li
111.94 53.5339 li
110.93 53.5339 li
110.93 56.4239 li
110.03 56.4239 li
110.03 49.7439 li
111.98 49.7439 li
112.6 49.7439 113.11 49.8939 113.5 50.1939 cv
113.89 50.4939 114.09 50.9839 114.09 51.6639 cv
114.09 52.1839 113.96 52.5939 113.7 52.8739 cv
113.44 53.1639 113.14 53.3439 112.8 53.4239 cv
114.29 56.4239 li
113.19 51.6639 mo
113.19 51.3039 113.08 51.0139 112.86 50.8039 cv
112.64 50.6039 112.28 50.4939 111.79 50.4939 cv
110.93 50.4939 li
110.93 52.7939 li
112.02 52.7939 li
112.33 52.7939 112.6 52.7139 112.84 52.5439 cv
113.07 52.3739 113.19 52.0839 113.19 51.6639 cv
f
119.17 54.2439 mo
119.17 54.9239 118.96 55.4639 118.54 55.8839 cv
118.12 56.3039 117.63 56.5039 117.06 56.5039 cv
116.48 56.5039 115.99 56.3039 115.57 55.8839 cv
115.15 55.4639 114.95 54.9239 114.95 54.2439 cv
114.95 53.5639 115.15 53.0239 115.57 52.6039 cv
115.99 52.1839 116.48 51.9739 117.06 51.9739 cv
117.63 51.9739 118.12 52.1839 118.54 52.6039 cv
118.96 53.0239 119.17 53.5639 119.17 54.2439 cv
118.31 54.2439 mo
118.31 53.7239 118.18 53.3339 117.92 53.0739 cv
117.66 52.8139 117.37 52.6739 117.06 52.6739 cv
116.74 52.6739 116.46 52.8139 116.2 53.0739 cv
115.94 53.3339 115.81 53.7239 115.81 54.2439 cv
115.81 54.7639 115.94 55.1539 116.2 55.4139 cv
116.46 55.6739 116.74 55.8039 117.06 55.8039 cv
117.37 55.8039 117.66 55.6739 117.92 55.4139 cv
118.18 55.1539 118.31 54.7639 118.31 54.2439 cv
f
123.98 56.4239 mo
123.19 56.4239 li
123.19 55.6039 li
122.98 55.8939 122.75 56.1139 122.51 56.2739 cv
122.26 56.4339 121.94 56.5039 121.55 56.5039 cv
121.08 56.5039 120.73 56.3739 120.5 56.1139 cv
120.26 55.8539 120.15 55.5339 120.15 55.1439 cv
120.15 52.0539 li
120.93 52.0539 li
120.93 54.8639 li
120.93 55.1839 121 55.4339 121.16 55.6139 cv
121.32 55.7939 121.53 55.8839 121.79 55.8839 cv
122.13 55.8839 122.44 55.7139 122.74 55.3539 cv
123.04 55.0039 123.19 54.5639 123.19 54.0439 cv
123.19 52.0539 li
123.98 52.0539 li
123.98 56.4239 li
f
128.9 56.3139 mo
128.76 56.3739 128.61 56.4139 128.44 56.4539 cv
128.27 56.4939 128.04 56.5039 127.76 56.5039 cv
127.29 56.5039 126.91 56.3739 126.63 56.1139 cv
126.34 55.8539 126.2 55.4939 126.2 55.0239 cv
126.2 52.6739 li
124.87 52.6739 li
124.87 52.0539 li
126.2 52.0539 li
126.2 50.5339 li
126.98 50.5339 li
126.98 52.0539 li
128.58 52.0539 li
128.58 52.6739 li
126.98 52.6739 li
126.98 55.0639 li
126.98 55.2739 127.03 55.4539 127.14 55.5939 cv
127.24 55.7339 127.44 55.8039 127.73 55.8039 cv
128.01 55.8039 128.24 55.7839 128.42 55.7239 cv
128.6 55.6739 128.76 55.6139 128.9 55.5339 cv
128.9 56.3139 li
f
132.41 50.8039 mo
131.63 50.8039 li
131.63 49.7839 li
132.41 49.7839 li
132.41 50.8039 li
132.41 56.4239 mo
131.63 56.4239 li
131.63 52.0539 li
132.41 52.0539 li
132.41 56.4239 li
f
138.98 56.4239 mo
138.19 56.4239 li
138.19 53.6139 li
138.19 53.3039 138.11 53.0539 137.96 52.8739 cv
137.8 52.6939 137.59 52.6039 137.33 52.6039 cv
136.99 52.6039 136.68 52.7839 136.38 53.1339 cv
136.08 53.4839 135.93 53.9139 135.93 54.4339 cv
135.93 56.4239 li
135.15 56.4239 li
135.15 52.0539 li
135.93 52.0539 li
135.93 52.8739 li
136.13 52.5939 136.36 52.3739 136.61 52.2139 cv
136.85 52.0539 137.17 51.9739 137.57 51.9739 cv
138.03 51.9739 138.38 52.1039 138.62 52.3639 cv
138.86 52.6239 138.98 52.9539 138.98 53.3439 cv
138.98 56.4239 li
f
144.25 52.7139 mo
144.07 52.6739 143.89 52.6439 143.72 52.6239 cv
143.55 52.6139 143.37 52.6339 143.19 52.6739 cv
143.27 52.7539 143.33 52.8539 143.39 52.9739 cv
143.44 53.0939 143.47 53.2639 143.47 53.4939 cv
143.47 53.9439 143.32 54.3139 143.02 54.5939 cv
142.72 54.8839 142.34 55.0239 141.9 55.0239 cv
141.8 55.0239 141.66 55.0039 141.49 54.9639 cv
141.32 54.9239 141.18 54.8839 141.08 54.8239 cv
140.93 54.9839 li
140.89 55.1739 li
140.89 55.3139 140.98 55.4139 141.16 55.4739 cv
141.34 55.5439 141.67 55.5739 142.14 55.5739 cv
142.89 55.5739 143.4 55.6839 143.68 55.8839 cv
143.95 56.0939 144.09 56.3539 144.09 56.6539 cv
144.09 57.0639 143.88 57.3639 143.48 57.5639 cv
143.08 57.7639 142.6 57.8639 142.06 57.8639 cv
141.36 57.8639 140.84 57.7639 140.5 57.5839 cv
140.16 57.4039 139.99 57.1539 139.99 56.8439 cv
139.99 56.6939 140.05 56.5539 140.18 56.3939 cv
140.31 56.2339 140.48 56.1039 140.69 55.9939 cv
140.53 55.9239 140.41 55.8339 140.32 55.7139 cv
140.23 55.5939 140.19 55.4439 140.19 55.2539 cv
140.19 55.1039 140.24 54.9739 140.36 54.8539 cv
140.48 54.7339 140.61 54.6339 140.77 54.5539 cv
140.64 54.4239 140.54 54.2639 140.46 54.0839 cv
140.38 53.9039 140.34 53.7139 140.34 53.4939 cv
140.34 53.0539 140.49 52.6939 140.79 52.4039 cv
141.09 52.1239 141.46 51.9739 141.9 51.9739 cv
142.14 51.9739 142.34 52.0139 142.51 52.0739 cv
142.67 52.1439 142.82 52.2439 142.96 52.3639 cv
143.16 52.2139 143.37 52.1039 143.58 52.0339 cv
143.79 51.9739 144.01 51.9539 144.25 51.9739 cv
144.25 52.7139 li
142.69 53.4939 mo
142.69 53.2339 142.62 53.0339 142.49 52.8739 cv
142.36 52.7239 142.16 52.6439 141.9 52.6439 cv
141.64 52.6439 141.44 52.7239 141.31 52.8739 cv
141.18 53.0339 141.12 53.2339 141.12 53.4939 cv
141.12 53.7639 141.18 53.9739 141.31 54.1239 cv
141.44 54.2839 141.64 54.3539 141.9 54.3539 cv
142.16 54.3539 142.36 54.2839 142.49 54.1239 cv
142.62 53.9739 142.69 53.7639 142.69 53.4939 cv
143.35 56.7339 mo
143.35 56.6339 143.29 56.5339 143.17 56.4339 cv
143.05 56.3339 142.76 56.2739 142.3 56.2739 cv
142.19 56.2739 142.04 56.2739 141.86 56.2539 cv
141.68 56.2439 141.47 56.2239 141.24 56.1939 cv
141.03 56.2739 140.89 56.3739 140.81 56.4739 cv
140.73 56.5739 140.69 56.6739 140.69 56.7739 cv
140.69 56.9239 140.79 57.0539 141 57.1539 cv
141.21 57.2539 141.58 57.3139 142.1 57.3139 cv
142.54 57.3139 142.85 57.2539 143.05 57.1339 cv
143.25 57.0139 143.35 56.8839 143.35 56.7339 cv
f
2 lw
1 lj
[7.4 3.2 ] 0 dsh
66.6 66.3739 mo
86.6 66.3739 li
.926818 .245335 1 .155612 cmyk
@
76.6 69.3739 mo
77.3956 69.3739 78.1587 69.0578 78.7213 68.4952 cv
79.2839 67.9326 79.6 67.1695 79.6 66.3739 cv
79.6 65.5783 79.2839 64.8152 78.7213 64.2526 cv
78.1587 63.69 77.3956 63.3739 76.6 63.3739 cv
75.8044 63.3739 75.0413 63.69 74.4787 64.2526 cv
73.9161 64.8152 73.6 65.5783 73.6 66.3739 cv
73.6 67.1695 73.9161 67.9326 74.4787 68.4952 cv
75.0413 69.0578 75.8044 69.3739 76.6 69.3739 cv
cp
f
1 lw
[] 0 dsh
76.6 69.3739 mo
77.3956 69.3739 78.1587 69.0578 78.7213 68.4952 cv
79.2839 67.9326 79.6 67.1695 79.6 66.3739 cv
79.6 65.5783 79.2839 64.8152 78.7213 64.2526 cv
78.1587 63.69 77.3956 63.3739 76.6 63.3739 cv
75.8044 63.3739 75.0413 63.69 74.4787 64.2526 cv
73.9161 64.8152 73.6 65.5783 73.6 66.3739 cv
73.6 67.1695 73.9161 67.9326 74.4787 68.4952 cv
75.0413 69.0578 75.8044 69.3739 76.6 69.3739 cv
cp
@
99.21 67.6839 mo
99.21 68.4439 99 68.9739 98.58 69.2539 cv
98.16 69.5339 97.63 69.6739 96.98 69.6739 cv
95.03 69.6739 li
95.03 62.9939 li
97.06 62.9939 li
97.71 62.9939 98.2 63.1639 98.52 63.5039 cv
98.84 63.8439 99.01 64.2539 99.01 64.7139 cv
99.01 65.1939 98.9 65.5339 98.68 65.7539 cv
98.46 65.9739 98.23 66.1239 98 66.2039 cv
98.31 66.2839 98.59 66.4539 98.84 66.6939 cv
99.08 66.9439 99.21 67.2739 99.21 67.6839 cv
98.12 64.7139 mo
98.12 64.3839 98.02 64.1439 97.82 63.9839 cv
97.62 63.8239 97.38 63.7439 97.1 63.7439 cv
95.93 63.7439 li
95.93 65.8139 li
97.06 65.8139 li
97.34 65.8139 97.59 65.7339 97.8 65.5639 cv
98.01 65.3939 98.12 65.1139 98.12 64.7139 cv
98.27 67.6839 mo
98.27 67.2739 98.13 66.9839 97.86 66.8139 cv
97.58 66.6439 97.28 66.5539 96.94 66.5539 cv
95.93 66.5539 li
95.93 68.9339 li
96.83 68.9339 li
97.29 68.9339 97.65 68.8439 97.9 68.6639 cv
98.14 68.4839 98.27 68.1639 98.27 67.6839 cv
1 /0 /CSD get_res sepcs
1 sep
f
104.17 63.7439 mo
100.97 63.7439 li
100.97 65.9239 li
103.39 65.9239 li
103.39 66.6739 li
100.97 66.6739 li
100.97 69.6739 li
100.07 69.6739 li
100.07 62.9939 li
104.17 62.9939 li
104.17 63.7439 li
f
109.13 67.8039 mo
109.13 68.4039 108.94 68.8839 108.56 69.2339 cv
108.18 69.5839 107.67 69.7539 107.02 69.7539 cv
106.37 69.7539 105.86 69.5739 105.5 69.2139 cv
105.13 68.8539 104.95 68.3939 104.95 67.8439 cv
104.95 67.5739 li
105.85 67.5739 li
105.85 67.8039 li
105.85 68.2039 105.96 68.5039 106.2 68.7039 cv
106.43 68.9139 106.7 69.0139 107.02 69.0139 cv
107.44 69.0139 107.74 68.9039 107.94 68.6839 cv
108.13 68.4639 108.23 68.2039 108.23 67.8839 cv
108.23 67.6239 108.11 67.3839 107.88 67.1639 cv
107.64 66.9439 107.31 66.7339 106.87 66.5539 cv
106.24 66.3239 105.79 66.0639 105.52 65.7739 cv
105.24 65.4939 105.11 65.1539 105.11 64.7539 cv
105.11 64.2139 105.29 63.7739 105.67 63.4339 cv
106.05 63.0939 106.5 62.9239 107.02 62.9239 cv
107.7 62.9239 108.19 63.1339 108.49 63.5339 cv
108.79 63.9339 108.94 64.3739 108.94 64.8339 cv
108.04 64.8339 li
108.06 64.5539 107.98 64.2939 107.8 64.0539 cv
107.62 63.8239 107.36 63.7039 107.02 63.7039 cv
106.7 63.7039 106.46 63.7939 106.28 63.9639 cv
106.1 64.1339 106.01 64.3639 106.01 64.6439 cv
106.01 64.8839 106.08 65.0839 106.22 65.2439 cv
106.36 65.4139 106.73 65.6139 107.33 65.8539 cv
107.9 66.0939 108.34 66.3739 108.66 66.6939 cv
108.97 67.0139 109.13 67.3839 109.13 67.8039 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
