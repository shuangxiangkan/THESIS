%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: length-diagram.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: Kansx
%%CreationDate: 2021/3/28, 10:46:44
%%BoundingBox: 0 0 461 346
%%HiResBoundingBox: 0 0 460.8000 345.6001
%%CropBox: 0 0 460.8000 345.6001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 571 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2021-03-28T10:45:19+08:00"
   xmp:CreatorTool="matplotlib 3.0.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend 3.0.2"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -345.6 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 345.6 li
460.8 345.6 li
460.8 0 li
cp
clp
gsave
0 345.6 mo
461 345.6 li
461 -.399999 li
0 -.399999 li
0 345.6 li
clp
0 345.6 mo
460.8 345.6 li
460.8 0 li
0 0 li
0 345.6 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
57.6 307.584 mo
414.72 307.584 li
414.72 41.472 li
57.6 41.472 li
57.6 307.584 li
f
73.8327 307.584 mo
73.8327 311.084 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
73.8327 307.584 mo
73.8327 311.084 li
@
43.3627 321.806 mo
39.3827 321.806 li
39.3827 315.126 li
43.1727 315.126 li
43.1727 315.876 li
40.2827 315.876 li
40.2827 317.946 li
42.9327 317.946 li
42.9327 318.686 li
40.2827 318.686 li
40.2827 321.066 li
43.3627 321.066 li
43.3627 321.806 li
f
48.4827 322.306 mo
48.0527 322.736 li
47.3927 322.116 46.9027 321.476 46.5827 320.796 cv
46.2627 320.116 46.1027 319.346 46.1027 318.486 cv
46.1027 317.636 46.2627 316.866 46.5827 316.186 cv
46.9027 315.506 47.3927 314.846 48.0527 314.196 cv
48.4827 314.626 li
47.8827 315.206 47.4327 315.796 47.1327 316.406 cv
46.8327 317.016 46.6827 317.706 46.6827 318.486 cv
46.6827 319.276 46.8327 319.976 47.1327 320.586 cv
47.4327 321.196 47.8827 321.766 48.4827 322.306 cv
f
51.0227 316.376 mo
50.6827 316.716 50.2527 317.046 49.7327 317.356 cv
49.7327 316.616 li
50.3827 316.176 50.9127 315.656 51.3327 315.056 cv
51.8027 315.056 li
51.8027 321.776 li
51.0227 321.776 li
51.0227 316.376 li
f
55.5527 321.806 mo
55.0427 322.856 li
54.6527 322.856 li
55.0427 321.806 li
54.6527 321.806 li
54.6527 320.956 li
55.5527 320.956 li
55.5527 321.806 li
f
59.2227 319.486 mo
59.2427 319.106 59.3127 318.786 59.4327 318.526 cv
59.5527 318.266 59.7227 317.946 59.9627 317.556 cv
61.5627 315.056 li
62.4627 315.056 li
60.8227 317.626 li
61.5227 317.446 62.0827 317.476 62.5027 317.706 cv
62.9227 317.946 63.2027 318.206 63.3427 318.506 cv
63.4827 318.806 63.5627 319.136 63.5827 319.486 cv
63.5927 319.846 63.5427 320.186 63.4227 320.526 cv
63.3027 320.866 63.0927 321.166 62.7927 321.436 cv
62.4927 321.716 62.0827 321.866 61.5427 321.886 cv
61.0027 321.916 60.5527 321.816 60.1727 321.596 cv
59.7927 321.376 59.5327 321.066 59.3927 320.666 cv
59.2527 320.266 59.1927 319.866 59.2227 319.486 cv
60.4327 320.776 mo
60.6627 321.026 60.9727 321.166 61.3727 321.186 cv
61.7627 321.216 62.0927 321.086 62.3527 320.796 cv
62.6127 320.516 62.7427 320.096 62.7427 319.546 cv
62.7427 319.006 62.5727 318.626 62.2527 318.416 cv
61.9227 318.206 61.5527 318.126 61.1527 318.176 cv
60.7527 318.236 60.4527 318.426 60.2727 318.766 cv
60.0927 319.106 60.0127 319.466 60.0427 319.846 cv
60.0627 320.226 60.1927 320.536 60.4327 320.776 cv
f
65.5527 321.806 mo
65.0427 322.856 li
64.6527 322.856 li
65.0427 321.806 li
64.6527 321.806 li
64.6527 320.956 li
65.5527 320.956 li
65.5527 321.806 li
f
69.1827 318.046 mo
69.2027 317.356 69.3027 316.806 69.4727 316.406 cv
69.6427 316.006 69.8827 315.666 70.2027 315.406 cv
70.5127 315.146 70.8927 315.016 71.3527 315.016 cv
71.8027 315.016 72.2027 315.206 72.5427 315.586 cv
72.8827 315.966 73.1027 316.436 73.2027 317.006 cv
73.3027 317.586 73.3427 318.246 73.3027 318.986 cv
73.2627 319.726 73.1327 320.336 72.9127 320.796 cv
72.6927 321.266 72.3527 321.586 71.9127 321.766 cv
71.4727 321.946 71.0227 321.926 70.5827 321.706 cv
70.1427 321.486 69.8327 321.196 69.6527 320.836 cv
69.4727 320.476 69.3427 320.086 69.2627 319.686 cv
69.1827 319.286 69.1527 318.736 69.1827 318.046 cv
70.0027 317.806 mo
69.9227 318.526 69.9427 319.156 70.0827 319.716 cv
70.2127 320.276 70.4227 320.676 70.7227 320.916 cv
71.0227 321.156 71.3227 321.196 71.6427 321.056 cv
71.9527 320.916 72.1827 320.626 72.3227 320.196 cv
72.4627 319.766 72.5427 319.296 72.5427 318.786 cv
72.5427 318.286 72.5227 317.826 72.4827 317.406 cv
72.4427 316.986 72.3227 316.606 72.1327 316.266 cv
71.9327 315.926 71.6727 315.756 71.3527 315.736 cv
71.0227 315.726 70.7327 315.886 70.4927 316.226 cv
70.2427 316.566 70.0827 317.096 70.0027 317.806 cv
f
75.5527 321.806 mo
75.0427 322.856 li
74.6527 322.856 li
75.0427 321.806 li
74.6527 321.806 li
74.6527 320.956 li
75.5527 320.956 li
75.5527 321.806 li
f
81.0227 316.376 mo
80.6827 316.716 80.2527 317.046 79.7327 317.356 cv
79.7327 316.616 li
80.3827 316.176 80.9127 315.656 81.3327 315.056 cv
81.8027 315.056 li
81.8027 321.776 li
81.0227 321.776 li
81.0227 316.376 li
f
85.1627 321.776 mo
85.6227 319.796 86.4427 317.836 87.6227 315.876 cv
84.2627 315.876 li
84.2627 315.166 li
88.4427 315.166 li
88.4427 315.836 li
87.2127 317.816 86.4027 319.796 86.0227 321.776 cv
85.1627 321.776 li
f
90.5527 321.806 mo
90.0427 322.856 li
89.6527 322.856 li
90.0427 321.806 li
89.6527 321.806 li
89.6527 320.956 li
90.5527 320.956 li
90.5527 321.806 li
f
96.0227 316.376 mo
95.6827 316.716 95.2527 317.046 94.7327 317.356 cv
94.7327 316.616 li
95.3827 316.176 95.9127 315.656 96.3327 315.056 cv
96.8027 315.056 li
96.8027 321.776 li
96.0227 321.776 li
96.0227 316.376 li
f
99.1827 318.046 mo
99.2027 317.356 99.3027 316.806 99.4727 316.406 cv
99.6427 316.006 99.8827 315.666 100.203 315.406 cv
100.513 315.146 100.893 315.016 101.353 315.016 cv
101.803 315.016 102.203 315.206 102.543 315.586 cv
102.883 315.966 103.103 316.436 103.203 317.006 cv
103.303 317.586 103.343 318.246 103.303 318.986 cv
103.263 319.726 103.133 320.336 102.913 320.796 cv
102.693 321.266 102.353 321.586 101.913 321.766 cv
101.473 321.946 101.023 321.926 100.583 321.706 cv
100.143 321.486 99.8327 321.196 99.6527 320.836 cv
99.4727 320.476 99.3427 320.086 99.2627 319.686 cv
99.1827 319.286 99.1527 318.736 99.1827 318.046 cv
100.003 317.806 mo
99.9227 318.526 99.9427 319.156 100.083 319.716 cv
100.213 320.276 100.423 320.676 100.723 320.916 cv
101.023 321.156 101.323 321.196 101.643 321.056 cv
101.953 320.916 102.183 320.626 102.323 320.196 cv
102.463 319.766 102.543 319.296 102.543 318.786 cv
102.543 318.286 102.523 317.826 102.483 317.406 cv
102.443 316.986 102.323 316.606 102.133 316.266 cv
101.933 315.926 101.673 315.756 101.353 315.736 cv
101.023 315.726 100.733 315.886 100.493 316.226 cv
100.243 316.566 100.083 317.096 100.003 317.806 cv
f
106.453 318.486 mo
106.453 319.346 106.283 320.116 105.963 320.796 cv
105.633 321.476 105.143 322.116 104.493 322.736 cv
104.063 322.306 li
104.663 321.766 105.113 321.196 105.413 320.586 cv
105.713 319.976 105.863 319.276 105.863 318.486 cv
105.863 317.706 105.713 317.016 105.413 316.406 cv
105.113 315.796 104.663 315.206 104.063 314.626 cv
104.493 314.196 li
105.143 314.846 105.633 315.506 105.963 316.186 cv
106.283 316.866 106.453 317.636 106.453 318.486 cv
f
154.996 307.584 mo
154.996 311.084 li
f
154.996 307.584 mo
154.996 311.084 li
@
124.526 321.806 mo
120.546 321.806 li
120.546 315.126 li
124.336 315.126 li
124.336 315.876 li
121.446 315.876 li
121.446 317.946 li
124.096 317.946 li
124.096 318.686 li
121.446 318.686 li
121.446 321.066 li
124.526 321.066 li
124.526 321.806 li
f
129.646 322.306 mo
129.216 322.736 li
128.556 322.116 128.066 321.476 127.746 320.796 cv
127.426 320.116 127.266 319.346 127.266 318.486 cv
127.266 317.636 127.426 316.866 127.746 316.186 cv
128.066 315.506 128.556 314.846 129.216 314.196 cv
129.646 314.626 li
129.046 315.206 128.596 315.796 128.296 316.406 cv
127.996 317.016 127.846 317.706 127.846 318.486 cv
127.846 319.276 127.996 319.976 128.296 320.586 cv
128.596 321.196 129.046 321.766 129.646 322.306 cv
f
130.466 321.616 mo
130.486 321.226 130.666 320.876 131.006 320.566 cv
131.346 320.256 131.776 319.766 132.296 319.096 cv
132.816 318.436 133.156 317.916 133.316 317.556 cv
133.466 317.196 133.526 316.876 133.486 316.616 cv
133.446 316.356 133.326 316.146 133.116 315.976 cv
132.906 315.806 132.666 315.736 132.396 315.756 cv
132.116 315.786 131.856 315.896 131.616 316.076 cv
131.366 316.256 131.176 316.526 131.046 316.886 cv
130.306 316.776 li
130.516 316.176 130.786 315.746 131.106 315.466 cv
131.426 315.196 131.816 315.046 132.266 315.016 cv
132.526 314.996 132.756 314.996 132.966 315.036 cv
133.166 315.076 133.386 315.176 133.606 315.316 cv
133.826 315.456 134.016 315.676 134.156 315.956 cv
134.296 316.236 134.356 316.586 134.316 316.986 cv
134.276 317.396 134.066 317.876 133.706 318.436 cv
133.336 318.996 132.636 319.876 131.596 321.066 cv
134.406 321.066 li
134.406 321.776 li
130.466 321.776 li
130.466 321.616 li
f
136.716 321.806 mo
136.206 322.856 li
135.816 322.856 li
136.206 321.806 li
135.816 321.806 li
135.816 320.956 li
136.716 320.956 li
136.716 321.806 li
f
141.326 321.776 mo
141.786 319.796 142.606 317.836 143.786 315.876 cv
140.426 315.876 li
140.426 315.166 li
144.606 315.166 li
144.606 315.836 li
143.376 317.816 142.566 319.796 142.186 321.776 cv
141.326 321.776 li
f
146.716 321.806 mo
146.206 322.856 li
145.816 322.856 li
146.206 321.806 li
145.816 321.806 li
145.816 320.956 li
146.716 320.956 li
146.716 321.806 li
f
150.346 318.046 mo
150.366 317.356 150.466 316.806 150.636 316.406 cv
150.806 316.006 151.046 315.666 151.366 315.406 cv
151.676 315.146 152.056 315.016 152.516 315.016 cv
152.966 315.016 153.366 315.206 153.706 315.586 cv
154.046 315.966 154.266 316.436 154.366 317.006 cv
154.466 317.586 154.506 318.246 154.466 318.986 cv
154.426 319.726 154.296 320.336 154.076 320.796 cv
153.856 321.266 153.516 321.586 153.076 321.766 cv
152.636 321.946 152.186 321.926 151.746 321.706 cv
151.306 321.486 150.996 321.196 150.816 320.836 cv
150.636 320.476 150.506 320.086 150.426 319.686 cv
150.346 319.286 150.316 318.736 150.346 318.046 cv
151.166 317.806 mo
151.086 318.526 151.106 319.156 151.246 319.716 cv
151.376 320.276 151.586 320.676 151.886 320.916 cv
152.186 321.156 152.486 321.196 152.806 321.056 cv
153.116 320.916 153.346 320.626 153.486 320.196 cv
153.626 319.766 153.706 319.296 153.706 318.786 cv
153.706 318.286 153.686 317.826 153.646 317.406 cv
153.606 316.986 153.486 316.606 153.296 316.266 cv
153.096 315.926 152.836 315.756 152.516 315.736 cv
152.186 315.726 151.896 315.886 151.656 316.226 cv
151.406 316.566 151.246 317.096 151.166 317.806 cv
f
156.716 321.806 mo
156.206 322.856 li
155.816 322.856 li
156.206 321.806 li
155.816 321.806 li
155.816 320.956 li
156.716 320.956 li
156.716 321.806 li
f
160.466 321.616 mo
160.486 321.226 160.666 320.876 161.006 320.566 cv
161.346 320.256 161.776 319.766 162.296 319.096 cv
162.816 318.436 163.156 317.916 163.316 317.556 cv
163.466 317.196 163.526 316.876 163.486 316.616 cv
163.446 316.356 163.326 316.146 163.116 315.976 cv
162.906 315.806 162.666 315.736 162.396 315.756 cv
162.116 315.786 161.856 315.896 161.616 316.076 cv
161.366 316.256 161.176 316.526 161.046 316.886 cv
160.306 316.776 li
160.516 316.176 160.786 315.746 161.106 315.466 cv
161.426 315.196 161.816 315.046 162.266 315.016 cv
162.526 314.996 162.756 314.996 162.966 315.036 cv
163.166 315.076 163.386 315.176 163.606 315.316 cv
163.826 315.456 164.016 315.676 164.156 315.956 cv
164.296 316.236 164.356 316.586 164.316 316.986 cv
164.276 317.396 164.066 317.876 163.706 318.436 cv
163.336 318.996 162.636 319.876 161.596 321.066 cv
164.406 321.066 li
164.406 321.776 li
160.466 321.776 li
160.466 321.616 li
f
165.346 318.046 mo
165.366 317.356 165.466 316.806 165.636 316.406 cv
165.806 316.006 166.046 315.666 166.366 315.406 cv
166.676 315.146 167.056 315.016 167.516 315.016 cv
167.966 315.016 168.366 315.206 168.706 315.586 cv
169.046 315.966 169.266 316.436 169.366 317.006 cv
169.466 317.586 169.506 318.246 169.466 318.986 cv
169.426 319.726 169.296 320.336 169.076 320.796 cv
168.856 321.266 168.516 321.586 168.076 321.766 cv
167.636 321.946 167.186 321.926 166.746 321.706 cv
166.306 321.486 165.996 321.196 165.816 320.836 cv
165.636 320.476 165.506 320.086 165.426 319.686 cv
165.346 319.286 165.316 318.736 165.346 318.046 cv
166.166 317.806 mo
166.086 318.526 166.106 319.156 166.246 319.716 cv
166.376 320.276 166.586 320.676 166.886 320.916 cv
167.186 321.156 167.486 321.196 167.806 321.056 cv
168.116 320.916 168.346 320.626 168.486 320.196 cv
168.626 319.766 168.706 319.296 168.706 318.786 cv
168.706 318.286 168.686 317.826 168.646 317.406 cv
168.606 316.986 168.486 316.606 168.296 316.266 cv
168.096 315.926 167.836 315.756 167.516 315.736 cv
167.186 315.726 166.896 315.886 166.656 316.226 cv
166.406 316.566 166.246 317.096 166.166 317.806 cv
f
171.716 321.806 mo
171.206 322.856 li
170.816 322.856 li
171.206 321.806 li
170.816 321.806 li
170.816 320.956 li
171.716 320.956 li
171.716 321.806 li
f
177.186 316.376 mo
176.846 316.716 176.416 317.046 175.896 317.356 cv
175.896 316.616 li
176.546 316.176 177.076 315.656 177.496 315.056 cv
177.966 315.056 li
177.966 321.776 li
177.186 321.776 li
177.186 316.376 li
f
183.126 320.286 mo
180.116 320.286 li
180.116 319.626 li
183.276 315.056 li
183.866 315.056 li
183.866 319.626 li
184.796 319.626 li
184.796 320.286 li
183.866 320.286 li
183.866 321.776 li
183.126 321.776 li
183.126 320.286 li
183.126 319.626 mo
183.126 316.536 li
180.936 319.626 li
183.126 319.626 li
f
187.616 318.486 mo
187.616 319.346 187.446 320.116 187.126 320.796 cv
186.796 321.476 186.306 322.116 185.656 322.736 cv
185.226 322.306 li
185.826 321.766 186.276 321.196 186.576 320.586 cv
186.876 319.976 187.026 319.276 187.026 318.486 cv
187.026 317.706 186.876 317.016 186.576 316.406 cv
186.276 315.796 185.826 315.206 185.226 314.626 cv
185.656 314.196 li
186.306 314.846 186.796 315.506 187.126 316.186 cv
187.446 316.866 187.616 317.636 187.616 318.486 cv
f
236.16 307.584 mo
236.16 311.084 li
f
236.16 307.584 mo
236.16 311.084 li
@
203.19 321.806 mo
199.21 321.806 li
199.21 315.126 li
203 315.126 li
203 315.876 li
200.11 315.876 li
200.11 317.946 li
202.76 317.946 li
202.76 318.686 li
200.11 318.686 li
200.11 321.066 li
203.19 321.066 li
203.19 321.806 li
f
208.31 322.306 mo
207.88 322.736 li
207.22 322.116 206.73 321.476 206.41 320.796 cv
206.09 320.116 205.93 319.346 205.93 318.486 cv
205.93 317.636 206.09 316.866 206.41 316.186 cv
206.73 315.506 207.22 314.846 207.88 314.196 cv
208.31 314.626 li
207.71 315.206 207.26 315.796 206.96 316.406 cv
206.66 317.016 206.51 317.706 206.51 318.486 cv
206.51 319.276 206.66 319.976 206.96 320.586 cv
207.26 321.196 207.71 321.766 208.31 322.306 cv
f
209.05 320.096 mo
209.75 319.976 li
209.85 320.316 210.02 320.596 210.26 320.816 cv
210.49 321.036 210.78 321.146 211.14 321.126 cv
211.49 321.116 211.77 320.976 211.98 320.696 cv
212.18 320.426 212.27 320.116 212.25 319.766 cv
212.22 319.416 212.08 319.146 211.84 318.946 cv
211.59 318.746 211.19 318.606 210.65 318.526 cv
210.65 318.026 li
211.19 317.976 211.59 317.836 211.84 317.596 cv
212.08 317.356 212.19 317.056 212.17 316.676 cv
212.15 316.296 211.98 316.026 211.67 315.856 cv
211.35 315.686 211.02 315.666 210.67 315.796 cv
210.31 315.926 210.03 316.286 209.83 316.886 cv
209.13 316.776 li
209.28 316.306 209.49 315.916 209.77 315.596 cv
210.04 315.286 210.41 315.106 210.88 315.056 cv
211.35 315.006 211.76 315.066 212.11 315.236 cv
212.46 315.406 212.71 315.666 212.85 316.016 cv
212.99 316.366 213.01 316.746 212.91 317.166 cv
212.81 317.586 212.51 317.946 212.02 318.256 cv
212.38 318.416 212.66 318.646 212.86 318.956 cv
213.05 319.276 213.11 319.686 213.05 320.196 cv
212.99 320.706 212.76 321.116 212.37 321.426 cv
211.98 321.736 211.54 321.886 211.04 321.866 cv
210.54 321.856 210.11 321.706 209.75 321.406 cv
209.39 321.106 209.15 320.676 209.05 320.096 cv
f
215.38 321.806 mo
214.87 322.856 li
214.48 322.856 li
214.87 321.806 li
214.48 321.806 li
214.48 320.956 li
215.38 320.956 li
215.38 321.806 li
f
219.91 321.886 mo
220.48 320.926 220.95 320.056 221.32 319.276 cv
220.66 319.376 220.12 319.296 219.69 319.016 cv
219.26 318.746 219 318.376 218.91 317.906 cv
218.82 317.446 218.83 317.016 218.93 316.636 cv
219.03 316.256 219.2 315.946 219.42 315.696 cv
219.64 315.456 219.9 315.276 220.22 315.176 cv
220.53 315.076 220.81 315.016 221.06 315.016 cv
221.3 315.016 221.56 315.076 221.82 315.176 cv
222.08 315.276 222.31 315.436 222.52 315.646 cv
222.73 315.856 222.87 316.066 222.95 316.286 cv
223.03 316.506 223.07 316.796 223.07 317.146 cv
223.07 317.496 222.94 317.946 222.68 318.486 cv
222.42 319.036 221.78 320.166 220.77 321.886 cv
219.91 321.886 li
219.69 317.516 mo
219.73 317.856 219.87 318.136 220.12 318.356 cv
220.37 318.576 220.64 318.676 220.93 318.646 cv
221.21 318.626 221.44 318.546 221.61 318.416 cv
221.77 318.286 221.94 318.066 222.1 317.746 cv
222.2 317.366 222.22 317.036 222.17 316.756 cv
222.12 316.486 221.98 316.256 221.76 316.076 cv
221.54 315.896 221.3 315.796 221.04 315.796 cv
220.88 315.776 220.68 315.816 220.44 315.916 cv
220.19 316.016 219.99 316.226 219.85 316.536 cv
219.71 316.856 219.65 317.176 219.69 317.516 cv
f
225.38 321.806 mo
224.87 322.856 li
224.48 322.856 li
224.87 321.806 li
224.48 321.806 li
224.48 320.956 li
225.38 320.956 li
225.38 321.806 li
f
229.01 318.046 mo
229.03 317.356 229.13 316.806 229.3 316.406 cv
229.47 316.006 229.71 315.666 230.03 315.406 cv
230.34 315.146 230.72 315.016 231.18 315.016 cv
231.63 315.016 232.03 315.206 232.37 315.586 cv
232.71 315.966 232.93 316.436 233.03 317.006 cv
233.13 317.586 233.17 318.246 233.13 318.986 cv
233.09 319.726 232.96 320.336 232.74 320.796 cv
232.52 321.266 232.18 321.586 231.74 321.766 cv
231.3 321.946 230.85 321.926 230.41 321.706 cv
229.97 321.486 229.66 321.196 229.48 320.836 cv
229.3 320.476 229.17 320.086 229.09 319.686 cv
229.01 319.286 228.98 318.736 229.01 318.046 cv
229.83 317.806 mo
229.75 318.526 229.77 319.156 229.91 319.716 cv
230.04 320.276 230.25 320.676 230.55 320.916 cv
230.85 321.156 231.15 321.196 231.47 321.056 cv
231.78 320.916 232.01 320.626 232.15 320.196 cv
232.29 319.766 232.37 319.296 232.37 318.786 cv
232.37 318.286 232.35 317.826 232.31 317.406 cv
232.27 316.986 232.15 316.606 231.96 316.266 cv
231.76 315.926 231.5 315.756 231.18 315.736 cv
230.85 315.726 230.56 315.886 230.32 316.226 cv
230.07 316.566 229.91 317.096 229.83 317.806 cv
f
235.38 321.806 mo
234.87 322.856 li
234.48 322.856 li
234.87 321.806 li
234.48 321.806 li
234.48 320.956 li
235.38 320.956 li
235.38 321.806 li
f
239.05 320.096 mo
239.75 319.976 li
239.85 320.316 240.02 320.596 240.26 320.816 cv
240.49 321.036 240.78 321.146 241.14 321.126 cv
241.49 321.116 241.77 320.976 241.98 320.696 cv
242.18 320.426 242.27 320.116 242.25 319.766 cv
242.22 319.416 242.08 319.146 241.84 318.946 cv
241.59 318.746 241.19 318.606 240.65 318.526 cv
240.65 318.026 li
241.19 317.976 241.59 317.836 241.84 317.596 cv
242.08 317.356 242.19 317.056 242.17 316.676 cv
242.15 316.296 241.98 316.026 241.67 315.856 cv
241.35 315.686 241.02 315.666 240.67 315.796 cv
240.31 315.926 240.03 316.286 239.83 316.886 cv
239.13 316.776 li
239.28 316.306 239.49 315.916 239.77 315.596 cv
240.04 315.286 240.41 315.106 240.88 315.056 cv
241.35 315.006 241.76 315.066 242.11 315.236 cv
242.46 315.406 242.71 315.666 242.85 316.016 cv
242.99 316.366 243.01 316.746 242.91 317.166 cv
242.81 317.586 242.51 317.946 242.02 318.256 cv
242.38 318.416 242.66 318.646 242.86 318.956 cv
243.05 319.276 243.11 319.686 243.05 320.196 cv
242.99 320.706 242.76 321.116 242.37 321.426 cv
241.98 321.736 241.54 321.886 241.04 321.866 cv
240.54 321.856 240.11 321.706 239.75 321.406 cv
239.39 321.106 239.15 320.676 239.05 320.096 cv
f
244.05 320.096 mo
244.75 319.976 li
244.85 320.316 245.02 320.596 245.26 320.816 cv
245.49 321.036 245.78 321.146 246.14 321.126 cv
246.49 321.116 246.77 320.976 246.98 320.696 cv
247.18 320.426 247.27 320.116 247.25 319.766 cv
247.22 319.416 247.08 319.146 246.84 318.946 cv
246.59 318.746 246.19 318.606 245.65 318.526 cv
245.65 318.026 li
246.19 317.976 246.59 317.836 246.84 317.596 cv
247.08 317.356 247.19 317.056 247.17 316.676 cv
247.15 316.296 246.98 316.026 246.67 315.856 cv
246.35 315.686 246.02 315.666 245.67 315.796 cv
245.31 315.926 245.03 316.286 244.83 316.886 cv
244.13 316.776 li
244.28 316.306 244.49 315.916 244.77 315.596 cv
245.04 315.286 245.41 315.106 245.88 315.056 cv
246.35 315.006 246.76 315.066 247.11 315.236 cv
247.46 315.406 247.71 315.666 247.85 316.016 cv
247.99 316.366 248.01 316.746 247.91 317.166 cv
247.81 317.586 247.51 317.946 247.02 318.256 cv
247.38 318.416 247.66 318.646 247.86 318.956 cv
248.05 319.276 248.11 319.686 248.05 320.196 cv
247.99 320.706 247.76 321.116 247.37 321.426 cv
246.98 321.736 246.54 321.886 246.04 321.866 cv
245.54 321.856 245.11 321.706 244.75 321.406 cv
244.39 321.106 244.15 320.676 244.05 320.096 cv
f
249.13 321.616 mo
249.15 321.226 249.33 320.876 249.67 320.566 cv
250.01 320.256 250.44 319.766 250.96 319.096 cv
251.48 318.436 251.82 317.916 251.98 317.556 cv
252.13 317.196 252.19 316.876 252.15 316.616 cv
252.11 316.356 251.99 316.146 251.78 315.976 cv
251.57 315.806 251.33 315.736 251.06 315.756 cv
250.78 315.786 250.52 315.896 250.28 316.076 cv
250.03 316.256 249.84 316.526 249.71 316.886 cv
248.97 316.776 li
249.18 316.176 249.45 315.746 249.77 315.466 cv
250.09 315.196 250.48 315.046 250.93 315.016 cv
251.19 314.996 251.42 314.996 251.63 315.036 cv
251.83 315.076 252.05 315.176 252.27 315.316 cv
252.49 315.456 252.68 315.676 252.82 315.956 cv
252.96 316.236 253.02 316.586 252.98 316.986 cv
252.94 317.396 252.73 317.876 252.37 318.436 cv
252 318.996 251.3 319.876 250.26 321.066 cv
253.07 321.066 li
253.07 321.776 li
249.13 321.776 li
249.13 321.616 li
f
255.38 321.806 mo
254.87 322.856 li
254.48 322.856 li
254.87 321.806 li
254.48 321.806 li
254.48 320.956 li
255.38 320.956 li
255.38 321.806 li
f
259.13 321.616 mo
259.15 321.226 259.33 320.876 259.67 320.566 cv
260.01 320.256 260.44 319.766 260.96 319.096 cv
261.48 318.436 261.82 317.916 261.98 317.556 cv
262.13 317.196 262.19 316.876 262.15 316.616 cv
262.11 316.356 261.99 316.146 261.78 315.976 cv
261.57 315.806 261.33 315.736 261.06 315.756 cv
260.78 315.786 260.52 315.896 260.28 316.076 cv
260.03 316.256 259.84 316.526 259.71 316.886 cv
258.97 316.776 li
259.18 316.176 259.45 315.746 259.77 315.466 cv
260.09 315.196 260.48 315.046 260.93 315.016 cv
261.19 314.996 261.42 314.996 261.63 315.036 cv
261.83 315.076 262.05 315.176 262.27 315.316 cv
262.49 315.456 262.68 315.676 262.82 315.956 cv
262.96 316.236 263.02 316.586 262.98 316.986 cv
262.94 317.396 262.73 317.876 262.37 318.436 cv
262 318.996 261.3 319.876 260.26 321.066 cv
263.07 321.066 li
263.07 321.776 li
259.13 321.776 li
259.13 321.616 li
f
264.99 321.776 mo
265.45 319.796 266.27 317.836 267.45 315.876 cv
264.09 315.876 li
264.09 315.166 li
268.27 315.166 li
268.27 315.836 li
267.04 317.816 266.23 319.796 265.85 321.776 cv
264.99 321.776 li
f
271.28 318.486 mo
271.28 319.346 271.11 320.116 270.79 320.796 cv
270.46 321.476 269.97 322.116 269.32 322.736 cv
268.89 322.306 li
269.49 321.766 269.94 321.196 270.24 320.586 cv
270.54 319.976 270.69 319.276 270.69 318.486 cv
270.69 317.706 270.54 317.016 270.24 316.406 cv
269.94 315.796 269.49 315.206 268.89 314.626 cv
269.32 314.196 li
269.97 314.846 270.46 315.506 270.79 316.186 cv
271.11 316.866 271.28 317.636 271.28 318.486 cv
f
317.324 307.584 mo
317.324 311.084 li
f
317.324 307.584 mo
317.324 311.084 li
@
281.854 321.806 mo
277.874 321.806 li
277.874 315.126 li
281.664 315.126 li
281.664 315.876 li
278.774 315.876 li
278.774 317.946 li
281.424 317.946 li
281.424 318.686 li
278.774 318.686 li
278.774 321.066 li
281.854 321.066 li
281.854 321.806 li
f
286.974 322.306 mo
286.544 322.736 li
285.884 322.116 285.394 321.476 285.074 320.796 cv
284.754 320.116 284.594 319.346 284.594 318.486 cv
284.594 317.636 284.754 316.866 285.074 316.186 cv
285.394 315.506 285.884 314.846 286.544 314.196 cv
286.974 314.626 li
286.374 315.206 285.924 315.796 285.624 316.406 cv
285.324 317.016 285.174 317.706 285.174 318.486 cv
285.174 319.276 285.324 319.976 285.624 320.586 cv
285.924 321.196 286.374 321.766 286.974 322.306 cv
f
290.454 320.286 mo
287.444 320.286 li
287.444 319.626 li
290.604 315.056 li
291.194 315.056 li
291.194 319.626 li
292.124 319.626 li
292.124 320.286 li
291.194 320.286 li
291.194 321.776 li
290.454 321.776 li
290.454 320.286 li
290.454 319.626 mo
290.454 316.536 li
288.264 319.626 li
290.454 319.626 li
f
294.044 321.806 mo
293.534 322.856 li
293.144 322.856 li
293.534 321.806 li
293.144 321.806 li
293.144 320.956 li
294.044 320.956 li
294.044 321.806 li
f
299.514 316.376 mo
299.174 316.716 298.744 317.046 298.224 317.356 cv
298.224 316.616 li
298.874 316.176 299.404 315.656 299.824 315.056 cv
300.294 315.056 li
300.294 321.776 li
299.514 321.776 li
299.514 316.376 li
f
302.674 318.046 mo
302.694 317.356 302.794 316.806 302.964 316.406 cv
303.134 316.006 303.374 315.666 303.694 315.406 cv
304.004 315.146 304.384 315.016 304.844 315.016 cv
305.294 315.016 305.694 315.206 306.034 315.586 cv
306.374 315.966 306.594 316.436 306.694 317.006 cv
306.794 317.586 306.834 318.246 306.794 318.986 cv
306.754 319.726 306.624 320.336 306.404 320.796 cv
306.184 321.266 305.844 321.586 305.404 321.766 cv
304.964 321.946 304.514 321.926 304.074 321.706 cv
303.634 321.486 303.324 321.196 303.144 320.836 cv
302.964 320.476 302.834 320.086 302.754 319.686 cv
302.674 319.286 302.644 318.736 302.674 318.046 cv
303.494 317.806 mo
303.414 318.526 303.434 319.156 303.574 319.716 cv
303.704 320.276 303.914 320.676 304.214 320.916 cv
304.514 321.156 304.814 321.196 305.134 321.056 cv
305.444 320.916 305.674 320.626 305.814 320.196 cv
305.954 319.766 306.034 319.296 306.034 318.786 cv
306.034 318.286 306.014 317.826 305.974 317.406 cv
305.934 316.986 305.814 316.606 305.624 316.266 cv
305.424 315.926 305.164 315.756 304.844 315.736 cv
304.514 315.726 304.224 315.886 303.984 316.226 cv
303.734 316.566 303.574 317.096 303.494 317.806 cv
f
309.044 321.806 mo
308.534 322.856 li
308.144 322.856 li
308.534 321.806 li
308.144 321.806 li
308.144 320.956 li
309.044 320.956 li
309.044 321.806 li
f
312.674 318.046 mo
312.694 317.356 312.794 316.806 312.964 316.406 cv
313.134 316.006 313.374 315.666 313.694 315.406 cv
314.004 315.146 314.384 315.016 314.844 315.016 cv
315.294 315.016 315.694 315.206 316.034 315.586 cv
316.374 315.966 316.594 316.436 316.694 317.006 cv
316.794 317.586 316.834 318.246 316.794 318.986 cv
316.754 319.726 316.624 320.336 316.404 320.796 cv
316.184 321.266 315.844 321.586 315.404 321.766 cv
314.964 321.946 314.514 321.926 314.074 321.706 cv
313.634 321.486 313.324 321.196 313.144 320.836 cv
312.964 320.476 312.834 320.086 312.754 319.686 cv
312.674 319.286 312.644 318.736 312.674 318.046 cv
313.494 317.806 mo
313.414 318.526 313.434 319.156 313.574 319.716 cv
313.704 320.276 313.914 320.676 314.214 320.916 cv
314.514 321.156 314.814 321.196 315.134 321.056 cv
315.444 320.916 315.674 320.626 315.814 320.196 cv
315.954 319.766 316.034 319.296 316.034 318.786 cv
316.034 318.286 316.014 317.826 315.974 317.406 cv
315.934 316.986 315.814 316.606 315.624 316.266 cv
315.424 315.926 315.164 315.756 314.844 315.736 cv
314.514 315.726 314.224 315.886 313.984 316.226 cv
313.734 316.566 313.574 317.096 313.494 317.806 cv
f
319.044 321.806 mo
318.534 322.856 li
318.144 322.856 li
318.534 321.806 li
318.144 321.806 li
318.144 320.956 li
319.044 320.956 li
319.044 321.806 li
f
323.654 321.776 mo
324.114 319.796 324.934 317.836 326.114 315.876 cv
322.754 315.876 li
322.754 315.166 li
326.934 315.166 li
326.934 315.836 li
325.704 317.816 324.894 319.796 324.514 321.776 cv
323.654 321.776 li
f
329.514 316.376 mo
329.174 316.716 328.744 317.046 328.224 317.356 cv
328.224 316.616 li
328.874 316.176 329.404 315.656 329.824 315.056 cv
330.294 315.056 li
330.294 321.776 li
329.514 321.776 li
329.514 316.376 li
f
332.794 321.616 mo
332.814 321.226 332.994 320.876 333.334 320.566 cv
333.674 320.256 334.104 319.766 334.624 319.096 cv
335.144 318.436 335.484 317.916 335.644 317.556 cv
335.794 317.196 335.854 316.876 335.814 316.616 cv
335.774 316.356 335.654 316.146 335.444 315.976 cv
335.234 315.806 334.994 315.736 334.724 315.756 cv
334.444 315.786 334.184 315.896 333.944 316.076 cv
333.694 316.256 333.504 316.526 333.374 316.886 cv
332.634 316.776 li
332.844 316.176 333.114 315.746 333.434 315.466 cv
333.754 315.196 334.144 315.046 334.594 315.016 cv
334.854 314.996 335.084 314.996 335.294 315.036 cv
335.494 315.076 335.714 315.176 335.934 315.316 cv
336.154 315.456 336.344 315.676 336.484 315.956 cv
336.624 316.236 336.684 316.586 336.644 316.986 cv
336.604 317.396 336.394 317.876 336.034 318.436 cv
335.664 318.996 334.964 319.876 333.924 321.066 cv
336.734 321.066 li
336.734 321.776 li
332.794 321.776 li
332.794 321.616 li
f
339.044 321.806 mo
338.534 322.856 li
338.144 322.856 li
338.534 321.806 li
338.144 321.806 li
338.144 320.956 li
339.044 320.956 li
339.044 321.806 li
f
342.714 320.096 mo
343.414 319.976 li
343.514 320.316 343.684 320.596 343.924 320.816 cv
344.154 321.036 344.444 321.146 344.804 321.126 cv
345.154 321.116 345.434 320.976 345.644 320.696 cv
345.844 320.426 345.934 320.116 345.914 319.766 cv
345.884 319.416 345.744 319.146 345.504 318.946 cv
345.254 318.746 344.854 318.606 344.314 318.526 cv
344.314 318.026 li
344.854 317.976 345.254 317.836 345.504 317.596 cv
345.744 317.356 345.854 317.056 345.834 316.676 cv
345.814 316.296 345.644 316.026 345.334 315.856 cv
345.014 315.686 344.684 315.666 344.334 315.796 cv
343.974 315.926 343.694 316.286 343.494 316.886 cv
342.794 316.776 li
342.944 316.306 343.154 315.916 343.434 315.596 cv
343.704 315.286 344.074 315.106 344.544 315.056 cv
345.014 315.006 345.424 315.066 345.774 315.236 cv
346.124 315.406 346.374 315.666 346.514 316.016 cv
346.654 316.366 346.674 316.746 346.574 317.166 cv
346.474 317.586 346.174 317.946 345.684 318.256 cv
346.044 318.416 346.324 318.646 346.524 318.956 cv
346.714 319.276 346.774 319.686 346.714 320.196 cv
346.654 320.706 346.424 321.116 346.034 321.426 cv
345.644 321.736 345.204 321.886 344.704 321.866 cv
344.204 321.856 343.774 321.706 343.414 321.406 cv
343.054 321.106 342.814 320.676 342.714 320.096 cv
f
347.674 318.046 mo
347.694 317.356 347.794 316.806 347.964 316.406 cv
348.134 316.006 348.374 315.666 348.694 315.406 cv
349.004 315.146 349.384 315.016 349.844 315.016 cv
350.294 315.016 350.694 315.206 351.034 315.586 cv
351.374 315.966 351.594 316.436 351.694 317.006 cv
351.794 317.586 351.834 318.246 351.794 318.986 cv
351.754 319.726 351.624 320.336 351.404 320.796 cv
351.184 321.266 350.844 321.586 350.404 321.766 cv
349.964 321.946 349.514 321.926 349.074 321.706 cv
348.634 321.486 348.324 321.196 348.144 320.836 cv
347.964 320.476 347.834 320.086 347.754 319.686 cv
347.674 319.286 347.644 318.736 347.674 318.046 cv
348.494 317.806 mo
348.414 318.526 348.434 319.156 348.574 319.716 cv
348.704 320.276 348.914 320.676 349.214 320.916 cv
349.514 321.156 349.814 321.196 350.134 321.056 cv
350.444 320.916 350.674 320.626 350.814 320.196 cv
350.954 319.766 351.034 319.296 351.034 318.786 cv
351.034 318.286 351.014 317.826 350.974 317.406 cv
350.934 316.986 350.814 316.606 350.624 316.266 cv
350.424 315.926 350.164 315.756 349.844 315.736 cv
349.514 315.726 349.224 315.886 348.984 316.226 cv
348.734 316.566 348.574 317.096 348.494 317.806 cv
f
354.944 318.486 mo
354.944 319.346 354.774 320.116 354.454 320.796 cv
354.124 321.476 353.634 322.116 352.984 322.736 cv
352.554 322.306 li
353.154 321.766 353.604 321.196 353.904 320.586 cv
354.204 319.976 354.354 319.276 354.354 318.486 cv
354.354 317.706 354.204 317.016 353.904 316.406 cv
353.604 315.796 353.154 315.206 352.554 314.626 cv
352.984 314.196 li
353.634 314.846 354.124 315.506 354.454 316.186 cv
354.774 316.866 354.944 317.636 354.944 318.486 cv
f
398.487 307.584 mo
398.487 311.084 li
f
398.487 307.584 mo
398.487 311.084 li
@
363.017 321.806 mo
359.037 321.806 li
359.037 315.126 li
362.827 315.126 li
362.827 315.876 li
359.937 315.876 li
359.937 317.946 li
362.587 317.946 li
362.587 318.686 li
359.937 318.686 li
359.937 321.066 li
363.017 321.066 li
363.017 321.806 li
f
368.137 322.306 mo
367.707 322.736 li
367.047 322.116 366.557 321.476 366.237 320.796 cv
365.917 320.116 365.757 319.346 365.757 318.486 cv
365.757 317.636 365.917 316.866 366.237 316.186 cv
366.557 315.506 367.047 314.846 367.707 314.196 cv
368.137 314.626 li
367.537 315.206 367.087 315.796 366.787 316.406 cv
366.487 317.016 366.337 317.706 366.337 318.486 cv
366.337 319.276 366.487 319.976 366.787 320.586 cv
367.087 321.196 367.537 321.766 368.137 322.306 cv
f
369.347 319.936 mo
369.527 320.636 369.837 321.026 370.277 321.106 cv
370.717 321.186 371.077 321.146 371.357 320.976 cv
371.627 320.806 371.817 320.586 371.937 320.306 cv
372.057 320.036 372.107 319.726 372.097 319.386 cv
372.077 319.046 371.987 318.766 371.827 318.526 cv
371.657 318.296 371.437 318.146 371.177 318.066 cv
370.917 317.986 370.617 317.986 370.297 318.066 cv
369.977 318.146 369.707 318.326 369.507 318.606 cv
368.837 318.526 li
368.887 318.376 369.137 317.256 369.577 315.166 cv
372.667 315.166 li
372.667 315.876 li
370.167 315.876 li
370.027 316.576 369.897 317.136 369.777 317.556 cv
370.167 317.376 370.527 317.286 370.867 317.296 cv
371.207 317.316 371.527 317.396 371.847 317.536 cv
372.157 317.676 372.387 317.876 372.527 318.116 cv
372.667 318.366 372.777 318.616 372.837 318.866 cv
372.897 319.116 372.927 319.386 372.917 319.666 cv
372.897 319.956 372.837 320.246 372.737 320.546 cv
372.637 320.846 372.477 321.086 372.277 321.286 cv
372.067 321.486 371.817 321.636 371.517 321.756 cv
371.217 321.876 370.867 321.916 370.477 321.886 cv
370.087 321.866 369.717 321.716 369.367 321.456 cv
369.007 321.196 368.767 320.756 368.647 320.126 cv
369.347 319.936 li
f
375.207 321.806 mo
374.697 322.856 li
374.307 322.856 li
374.697 321.806 li
374.307 321.806 li
374.307 320.956 li
375.207 320.956 li
375.207 321.806 li
f
380.677 316.376 mo
380.337 316.716 379.907 317.046 379.387 317.356 cv
379.387 316.616 li
380.037 316.176 380.567 315.656 380.987 315.056 cv
381.457 315.056 li
381.457 321.776 li
380.677 321.776 li
380.677 316.376 li
f
383.877 320.096 mo
384.577 319.976 li
384.677 320.316 384.847 320.596 385.087 320.816 cv
385.317 321.036 385.607 321.146 385.967 321.126 cv
386.317 321.116 386.597 320.976 386.807 320.696 cv
387.007 320.426 387.097 320.116 387.077 319.766 cv
387.047 319.416 386.907 319.146 386.667 318.946 cv
386.417 318.746 386.017 318.606 385.477 318.526 cv
385.477 318.026 li
386.017 317.976 386.417 317.836 386.667 317.596 cv
386.907 317.356 387.017 317.056 386.997 316.676 cv
386.977 316.296 386.807 316.026 386.497 315.856 cv
386.177 315.686 385.847 315.666 385.497 315.796 cv
385.137 315.926 384.857 316.286 384.657 316.886 cv
383.957 316.776 li
384.107 316.306 384.317 315.916 384.597 315.596 cv
384.867 315.286 385.237 315.106 385.707 315.056 cv
386.177 315.006 386.587 315.066 386.937 315.236 cv
387.287 315.406 387.537 315.666 387.677 316.016 cv
387.817 316.366 387.837 316.746 387.737 317.166 cv
387.637 317.586 387.337 317.946 386.847 318.256 cv
387.207 318.416 387.487 318.646 387.687 318.956 cv
387.877 319.276 387.937 319.686 387.877 320.196 cv
387.817 320.706 387.587 321.116 387.197 321.426 cv
386.807 321.736 386.367 321.886 385.867 321.866 cv
385.367 321.856 384.937 321.706 384.577 321.406 cv
384.217 321.106 383.977 320.676 383.877 320.096 cv
f
390.207 321.806 mo
389.697 322.856 li
389.307 322.856 li
389.697 321.806 li
389.307 321.806 li
389.307 320.956 li
390.207 320.956 li
390.207 321.806 li
f
393.757 319.856 mo
393.757 319.546 393.827 319.236 393.987 318.936 cv
394.147 318.636 394.407 318.396 394.777 318.216 cv
394.457 318.036 394.247 317.836 394.147 317.616 cv
394.047 317.396 393.987 317.136 393.977 316.846 cv
393.957 316.566 393.997 316.316 394.087 316.106 cv
394.177 315.906 394.317 315.706 394.497 315.526 cv
394.677 315.346 394.887 315.216 395.107 315.156 cv
395.327 315.096 395.567 315.056 395.827 315.056 cv
396.087 315.056 396.317 315.086 396.527 315.136 cv
396.737 315.186 396.957 315.296 397.197 315.466 cv
397.427 315.636 397.597 315.876 397.707 316.186 cv
397.807 316.506 397.807 316.866 397.687 317.286 cv
397.567 317.706 397.257 318.026 396.767 318.256 cv
397.207 318.396 397.527 318.596 397.707 318.866 cv
397.887 319.146 397.977 319.476 397.977 319.866 cv
397.977 320.256 397.917 320.566 397.797 320.796 cv
397.677 321.036 397.547 321.226 397.407 321.386 cv
397.267 321.546 397.067 321.666 396.827 321.756 cv
396.577 321.846 396.267 321.886 395.887 321.886 cv
395.507 321.886 395.187 321.846 394.917 321.756 cv
394.637 321.666 394.407 321.526 394.227 321.346 cv
394.047 321.166 393.917 320.946 393.857 320.696 cv
393.787 320.456 393.757 320.176 393.757 319.856 cv
394.557 319.816 mo
394.537 320.136 394.597 320.406 394.717 320.636 cv
394.837 320.876 395.047 321.026 395.357 321.086 cv
395.667 321.156 395.997 321.156 396.337 321.076 cv
396.677 320.996 396.907 320.816 397.037 320.526 cv
397.167 320.246 397.217 319.956 397.177 319.666 cv
397.137 319.386 396.967 319.146 396.687 318.946 cv
396.397 318.746 396.087 318.666 395.747 318.686 cv
395.407 318.716 395.127 318.836 394.907 319.036 cv
394.687 319.246 394.567 319.506 394.557 319.816 cv
394.697 316.776 mo
394.697 317.036 394.787 317.286 394.967 317.516 cv
395.147 317.756 395.437 317.866 395.827 317.866 cv
396.217 317.866 396.507 317.756 396.707 317.516 cv
396.907 317.286 396.997 317.006 396.987 316.676 cv
396.967 316.356 396.847 316.116 396.627 315.956 cv
396.407 315.796 396.107 315.736 395.727 315.756 cv
395.347 315.786 395.087 315.896 394.927 316.086 cv
394.767 316.286 394.697 316.516 394.697 316.776 cv
f
400.207 321.806 mo
399.697 322.856 li
399.307 322.856 li
399.697 321.806 li
399.307 321.806 li
399.307 320.956 li
400.207 320.956 li
400.207 321.806 li
f
404.737 321.886 mo
405.307 320.926 405.777 320.056 406.147 319.276 cv
405.487 319.376 404.947 319.296 404.517 319.016 cv
404.087 318.746 403.827 318.376 403.737 317.906 cv
403.647 317.446 403.657 317.016 403.757 316.636 cv
403.857 316.256 404.027 315.946 404.247 315.696 cv
404.467 315.456 404.727 315.276 405.047 315.176 cv
405.357 315.076 405.637 315.016 405.887 315.016 cv
406.127 315.016 406.387 315.076 406.647 315.176 cv
406.907 315.276 407.137 315.436 407.347 315.646 cv
407.557 315.856 407.697 316.066 407.777 316.286 cv
407.857 316.506 407.897 316.796 407.897 317.146 cv
407.897 317.496 407.767 317.946 407.507 318.486 cv
407.247 319.036 406.607 320.166 405.597 321.886 cv
404.737 321.886 li
404.517 317.516 mo
404.557 317.856 404.697 318.136 404.947 318.356 cv
405.197 318.576 405.467 318.676 405.757 318.646 cv
406.037 318.626 406.267 318.546 406.437 318.416 cv
406.597 318.286 406.767 318.066 406.927 317.746 cv
407.027 317.366 407.047 317.036 406.997 316.756 cv
406.947 316.486 406.807 316.256 406.587 316.076 cv
406.367 315.896 406.127 315.796 405.867 315.796 cv
405.707 315.776 405.507 315.816 405.267 315.916 cv
405.017 316.016 404.817 316.226 404.677 316.536 cv
404.537 316.856 404.477 317.176 404.517 317.516 cv
f
408.757 319.856 mo
408.757 319.546 408.827 319.236 408.987 318.936 cv
409.147 318.636 409.407 318.396 409.777 318.216 cv
409.457 318.036 409.247 317.836 409.147 317.616 cv
409.047 317.396 408.987 317.136 408.977 316.846 cv
408.957 316.566 408.997 316.316 409.087 316.106 cv
409.177 315.906 409.317 315.706 409.497 315.526 cv
409.677 315.346 409.887 315.216 410.107 315.156 cv
410.327 315.096 410.567 315.056 410.827 315.056 cv
411.087 315.056 411.317 315.086 411.527 315.136 cv
411.737 315.186 411.957 315.296 412.197 315.466 cv
412.427 315.636 412.597 315.876 412.707 316.186 cv
412.807 316.506 412.807 316.866 412.687 317.286 cv
412.567 317.706 412.257 318.026 411.767 318.256 cv
412.207 318.396 412.527 318.596 412.707 318.866 cv
412.887 319.146 412.977 319.476 412.977 319.866 cv
412.977 320.256 412.917 320.566 412.797 320.796 cv
412.677 321.036 412.547 321.226 412.407 321.386 cv
412.267 321.546 412.067 321.666 411.827 321.756 cv
411.577 321.846 411.267 321.886 410.887 321.886 cv
410.507 321.886 410.187 321.846 409.917 321.756 cv
409.637 321.666 409.407 321.526 409.227 321.346 cv
409.047 321.166 408.917 320.946 408.857 320.696 cv
408.787 320.456 408.757 320.176 408.757 319.856 cv
409.557 319.816 mo
409.537 320.136 409.597 320.406 409.717 320.636 cv
409.837 320.876 410.047 321.026 410.357 321.086 cv
410.667 321.156 410.997 321.156 411.337 321.076 cv
411.677 320.996 411.907 320.816 412.037 320.526 cv
412.167 320.246 412.217 319.956 412.177 319.666 cv
412.137 319.386 411.967 319.146 411.687 318.946 cv
411.397 318.746 411.087 318.666 410.747 318.686 cv
410.407 318.716 410.127 318.836 409.907 319.036 cv
409.687 319.246 409.567 319.506 409.557 319.816 cv
409.697 316.776 mo
409.697 317.036 409.787 317.286 409.967 317.516 cv
410.147 317.756 410.437 317.866 410.827 317.866 cv
411.217 317.866 411.507 317.756 411.707 317.516 cv
411.907 317.286 411.997 317.006 411.987 316.676 cv
411.967 316.356 411.847 316.116 411.627 315.956 cv
411.407 315.796 411.107 315.736 410.727 315.756 cv
410.347 315.786 410.087 315.896 409.927 316.086 cv
409.767 316.286 409.697 316.516 409.697 316.776 cv
f
414.817 321.776 mo
415.277 319.796 416.097 317.836 417.277 315.876 cv
413.917 315.876 li
413.917 315.166 li
418.097 315.166 li
418.097 315.836 li
416.867 317.816 416.057 319.796 415.677 321.776 cv
414.817 321.776 li
f
420.207 321.806 mo
419.697 322.856 li
419.307 322.856 li
419.697 321.806 li
419.307 321.806 li
419.307 320.956 li
420.207 320.956 li
420.207 321.806 li
f
426.617 320.286 mo
423.607 320.286 li
423.607 319.626 li
426.767 315.056 li
427.357 315.056 li
427.357 319.626 li
428.287 319.626 li
428.287 320.286 li
427.357 320.286 li
427.357 321.776 li
426.617 321.776 li
426.617 320.286 li
426.617 319.626 mo
426.617 316.536 li
424.427 319.626 li
426.617 319.626 li
f
428.837 318.046 mo
428.857 317.356 428.957 316.806 429.127 316.406 cv
429.297 316.006 429.537 315.666 429.857 315.406 cv
430.167 315.146 430.547 315.016 431.007 315.016 cv
431.457 315.016 431.857 315.206 432.197 315.586 cv
432.537 315.966 432.757 316.436 432.857 317.006 cv
432.957 317.586 432.997 318.246 432.957 318.986 cv
432.917 319.726 432.787 320.336 432.567 320.796 cv
432.347 321.266 432.007 321.586 431.567 321.766 cv
431.127 321.946 430.677 321.926 430.237 321.706 cv
429.797 321.486 429.487 321.196 429.307 320.836 cv
429.127 320.476 428.997 320.086 428.917 319.686 cv
428.837 319.286 428.807 318.736 428.837 318.046 cv
429.657 317.806 mo
429.577 318.526 429.597 319.156 429.737 319.716 cv
429.867 320.276 430.077 320.676 430.377 320.916 cv
430.677 321.156 430.977 321.196 431.297 321.056 cv
431.607 320.916 431.837 320.626 431.977 320.196 cv
432.117 319.766 432.197 319.296 432.197 318.786 cv
432.197 318.286 432.177 317.826 432.137 317.406 cv
432.097 316.986 431.977 316.606 431.787 316.266 cv
431.587 315.926 431.327 315.756 431.007 315.736 cv
430.677 315.726 430.387 315.886 430.147 316.226 cv
429.897 316.566 429.737 317.096 429.657 317.806 cv
f
436.107 318.486 mo
436.107 319.346 435.937 320.116 435.617 320.796 cv
435.287 321.476 434.797 322.116 434.147 322.736 cv
433.717 322.306 li
434.317 321.766 434.767 321.196 435.067 320.586 cv
435.367 319.976 435.517 319.276 435.517 318.486 cv
435.517 317.706 435.367 317.016 435.067 316.406 cv
434.767 315.796 434.317 315.206 433.717 314.626 cv
434.147 314.196 li
434.797 314.846 435.287 315.506 435.617 316.186 cv
435.937 316.866 436.107 317.636 436.107 318.486 cv
f
215.5 328.322 mo
215.02 328.302 214.62 328.282 214.29 328.282 cv
211.98 328.282 li
211.8 328.642 211.58 329.052 211.32 329.492 cv
211.32 334.372 li
211.32 334.892 211.33 335.472 211.36 336.122 cv
210.5 336.122 li
210.52 335.502 210.54 334.922 210.54 334.372 cv
210.54 330.542 li
209.72 331.662 208.63 332.692 207.25 333.632 cv
207.04 333.322 206.85 333.102 206.67 332.972 cv
207.19 332.732 207.88 332.232 208.74 331.462 cv
209.6 330.702 210.39 329.642 211.12 328.282 cv
208.54 328.282 li
208.04 328.282 207.52 328.302 206.98 328.322 cv
206.98 327.542 li
207.76 327.562 208.36 327.572 208.78 327.572 cv
214.25 327.572 li
214.58 327.572 215 327.562 215.5 327.542 cv
215.5 328.322 li
214.68 333.512 mo
214.18 332.892 213.29 331.922 212.02 330.622 cv
212.22 330.442 212.39 330.262 212.53 330.072 cv
213.15 330.652 213.68 331.152 214.12 331.582 cv
214.56 332.012 214.98 332.432 215.38 332.852 cv
215.12 333.062 214.88 333.282 214.68 333.512 cv
f
225.26 327.572 mo
225.2 327.972 225.18 328.462 225.18 329.062 cv
225.18 335.342 li
225.18 335.702 225.05 335.932 224.79 336.022 cv
224.53 336.112 224.11 336.182 223.54 336.242 cv
223.54 336.002 223.43 335.702 223.23 335.342 cv
223.65 335.342 223.95 335.322 224.13 335.282 cv
224.31 335.252 224.4 335.142 224.4 334.962 cv
224.4 328.322 li
217.96 328.322 li
217.96 336.202 li
217.06 336.202 li
217.08 335.832 217.11 335.422 217.14 334.962 cv
217.14 329.062 li
217.14 328.442 217.12 327.942 217.1 327.572 cv
225.26 327.572 li
223 331.292 mo
222.94 331.582 222.92 332.022 222.92 332.612 cv
222.92 333.192 222.94 333.702 223 334.142 cv
219.32 334.142 li
219.34 333.672 219.36 333.142 219.36 332.542 cv
219.36 331.942 219.34 331.532 219.32 331.292 cv
223 331.292 li
222.57 329.412 mo
223.09 329.412 223.46 329.402 223.7 329.372 cv
223.7 330.152 li
223.44 330.132 223.05 330.112 222.53 330.112 cv
219.99 330.112 li
219.36 330.112 218.92 330.132 218.66 330.152 cv
218.66 329.372 li
218.94 329.402 219.4 329.412 220.03 329.412 cv
222.57 329.412 li
222.21 333.472 mo
222.21 331.912 li
220.11 331.912 li
220.11 333.472 li
222.21 333.472 li
f
232.61 329.802 mo
232.53 330.122 232.46 330.552 232.41 331.092 cv
232.35 331.642 232.28 332.232 232.18 332.852 cv
234.01 332.852 li
234.47 332.852 234.97 332.842 235.5 332.812 cv
235.5 333.552 li
234.95 333.532 234.44 333.512 233.97 333.512 cv
231.98 333.512 li
231.74 334.032 231.39 334.492 230.92 334.882 cv
230.45 335.272 229.9 335.572 229.28 335.792 cv
228.66 336.012 228.1 336.182 227.61 336.312 cv
227.5 336.002 227.28 335.752 226.94 335.572 cv
227.69 335.492 228.5 335.282 229.36 334.942 cv
230.22 334.592 230.82 334.112 231.16 333.512 cv
228.39 333.512 li
227.91 333.512 227.39 333.532 226.82 333.552 cv
226.82 332.812 li
227.42 332.842 227.94 332.852 228.39 332.852 cv
231.43 332.852 li
231.51 332.412 231.57 331.932 231.61 331.422 cv
231.65 330.922 231.65 330.302 231.63 329.572 cv
231.94 329.672 232.27 329.752 232.61 329.802 cv
231.24 327.072 mo
231.44 327.492 231.63 327.942 231.79 328.432 cv
235.18 328.432 li
235.15 328.722 235.14 329.012 235.14 329.292 cv
235.14 329.552 235.15 329.842 235.18 330.152 cv
234.29 330.152 li
234.29 329.062 li
228.07 329.062 li
228.07 330.232 li
227.21 330.232 li
227.23 329.922 227.25 329.622 227.25 329.332 cv
227.25 329.022 227.23 328.722 227.21 328.432 cv
230.81 328.432 li
230.73 328.132 230.58 327.762 230.38 327.342 cv
230.58 327.262 230.87 327.172 231.24 327.072 cv
232.41 333.982 mo
232.98 334.302 233.53 334.592 234.05 334.862 cv
234.57 335.142 235.02 335.382 235.42 335.612 cv
235.23 335.812 235.03 336.042 234.83 336.282 cv
234.36 335.942 233.85 335.622 233.31 335.322 cv
232.76 335.032 232.29 334.802 231.9 334.642 cv
232.1 334.382 232.27 334.162 232.41 333.982 cv
228 330.972 mo
228.44 331.192 229.05 331.552 229.83 332.072 cv
229.73 332.232 229.57 332.432 229.36 332.692 cv
228.63 332.152 228.05 331.782 227.61 331.602 cv
227.76 331.442 227.89 331.232 228 330.972 cv
231.08 330.862 mo
230.9 331.072 230.74 331.282 230.61 331.482 cv
229.77 330.882 229.16 330.522 228.78 330.392 cv
228.9 330.212 229.05 330.002 229.21 329.762 cv
231.08 330.862 li
f
239.75 327.892 mo
239.7 328.132 239.66 328.462 239.64 328.902 cv
239.36 331.952 li
240.11 331.952 li
240.08 332.162 240.05 332.512 240.03 333.002 cv
239.87 335.152 li
239.87 335.692 239.71 336.002 239.4 336.082 cv
239.08 336.162 238.65 336.232 238.11 336.312 cv
238.03 335.952 237.93 335.652 237.8 335.422 cv
238.34 335.422 238.7 335.412 238.87 335.402 cv
239.04 335.382 239.15 335.272 239.21 335.042 cv
239.32 332.612 li
237.02 332.612 li
237.04 332.122 237.06 331.582 237.08 330.992 cv
237.09 330.412 237.1 329.852 237.1 329.332 cv
237.88 329.332 li
237.82 329.622 237.78 329.992 237.76 330.452 cv
237.73 330.912 237.72 331.412 237.72 331.952 cv
238.7 331.952 li
238.97 328.512 li
237.92 328.512 li
237.5 328.512 237.09 328.532 236.71 328.552 cv
236.71 327.852 li
237.09 327.882 237.5 327.892 237.92 327.892 cv
239.75 327.892 li
242.92 327.652 mo
243.33 328.432 243.76 329.012 244.2 329.372 cv
244.64 329.742 245.17 330.032 245.77 330.232 cv
245.53 330.442 245.35 330.702 245.22 331.012 cv
244.86 330.812 244.51 330.562 244.17 330.272 cv
244.17 330.932 li
243.83 330.912 243.34 330.892 242.72 330.892 cv
242.1 330.892 241.59 330.912 241.2 330.932 cv
241.2 330.312 li
241.04 330.522 240.82 330.792 240.54 331.132 cv
240.3 330.902 240.05 330.722 239.79 330.582 cv
240.21 330.302 240.53 330.012 240.75 329.722 cv
240.97 329.442 241.16 329.142 241.33 328.832 cv
241.5 328.522 241.64 328.232 241.76 327.972 cv
241.88 327.712 241.98 327.422 242.06 327.112 cv
242.4 327.192 242.75 327.262 243.11 327.342 cv
242.92 327.652 li
244.91 331.912 mo
244.77 332.072 244.67 332.282 244.59 332.562 cv
244.51 332.842 244.39 333.272 244.22 333.852 cv
244.05 334.432 243.92 334.892 243.82 335.232 cv
244.36 335.232 li
244.54 335.232 244.83 335.222 245.22 335.192 cv
245.22 335.892 li
244.88 335.862 244.59 335.852 244.36 335.852 cv
241.36 335.852 li
240.88 335.852 240.54 335.862 240.34 335.892 cv
240.34 335.192 li
240.65 335.222 241 335.232 241.39 335.232 cv
243.15 335.232 li
243.35 334.662 243.52 334.072 243.66 333.472 cv
244.05 331.682 li
244.25 331.762 244.54 331.832 244.91 331.912 cv
244.13 330.232 mo
243.81 330.002 243.53 329.712 243.27 329.372 cv
243.01 329.032 242.75 328.602 242.49 328.082 cv
242.28 328.502 242.09 328.862 241.92 329.162 cv
241.75 329.462 241.52 329.822 241.24 330.232 cv
244.13 330.232 li
241.24 331.872 mo
241.34 332.242 241.45 332.662 241.57 333.122 cv
241.69 333.592 241.8 334.022 241.9 334.412 cv
241.66 334.442 241.44 334.512 241.24 334.612 cv
241.16 334.112 241.07 333.702 240.98 333.362 cv
240.89 333.022 240.77 332.592 240.61 332.072 cv
240.82 331.992 241.03 331.932 241.24 331.872 cv
238.93 333.512 mo
238.9 333.702 238.88 333.922 238.86 334.182 cv
238.46 334.262 238.14 334.322 237.9 334.372 cv
237.65 334.432 237.27 334.532 236.75 334.682 cv
236.67 334.402 236.57 334.112 236.47 333.822 cv
236.83 333.802 237.21 333.772 237.6 333.712 cv
237.99 333.662 238.43 333.592 238.93 333.512 cv
242.88 332.692 mo
242.93 333.032 242.99 333.462 243.07 333.982 cv
242.45 334.142 li
242.34 333.572 242.26 333.132 242.21 332.832 cv
242.16 332.532 242.1 332.192 242.02 331.792 cv
242.25 331.752 242.48 331.712 242.72 331.682 cv
242.88 332.692 li
f
253.23 327.572 mo
253.17 327.712 253.11 327.882 253.03 328.102 cv
252.95 328.322 252.84 328.722 252.68 329.292 cv
254.48 329.292 li
254.74 329.292 255.05 329.282 255.42 329.252 cv
255.42 329.962 li
255.13 329.942 254.91 329.922 254.75 329.922 cv
254.75 330.342 254.67 330.992 254.53 331.892 cv
254.39 332.792 254.14 333.572 253.78 334.222 cv
254.04 334.532 254.33 334.812 254.65 335.052 cv
254.97 335.292 255.28 335.472 255.57 335.572 cv
255.26 335.802 255.05 336.022 254.95 336.242 cv
254.63 336.052 254.35 335.842 254.09 335.612 cv
253.83 335.382 253.57 335.102 253.31 334.762 cv
253.02 335.082 252.71 335.342 252.39 335.562 cv
252.06 335.782 251.65 336.022 251.16 336.282 cv
251.02 336.042 250.84 335.852 250.61 335.732 cv
251 335.572 251.42 335.352 251.86 335.072 cv
252.3 334.792 252.64 334.502 252.88 334.222 cv
252.7 333.862 252.52 333.472 252.35 333.052 cv
252.18 332.632 252.03 332.082 251.9 331.402 cv
251.82 331.622 251.69 331.892 251.51 332.222 cv
251.33 332.122 251.11 332.022 250.85 331.912 cv
251.26 331.192 251.6 330.392 251.86 329.532 cv
252.12 328.672 252.29 327.932 252.37 327.302 cv
252.68 327.442 252.97 327.532 253.23 327.572 cv
249.44 331.752 mo
249.34 331.862 249.22 332.032 249.09 332.262 cv
251.24 332.262 li
251.08 332.922 250.8 333.572 250.42 334.222 cv
250.83 334.382 251.15 334.522 251.39 334.642 cv
251.26 334.832 251.14 335.032 251.04 335.232 cv
250.8 335.082 250.45 334.922 249.99 334.762 cv
249.47 335.322 248.57 335.832 247.29 336.282 cv
247.16 335.992 246.99 335.792 246.79 335.692 cv
248.01 335.412 248.84 335.032 249.29 334.532 cv
248.55 334.352 247.95 334.192 247.49 334.062 cv
247.64 333.832 247.85 333.442 248.11 332.892 cv
247.85 332.892 247.42 332.912 246.82 332.932 cv
246.82 332.222 li
247.32 332.252 247.83 332.262 248.35 332.262 cv
248.45 332.032 248.52 331.772 248.58 331.482 cv
248.86 331.592 249.15 331.682 249.44 331.752 cv
248.93 329.102 mo
248.93 328.482 248.91 327.882 248.89 327.302 cv
249.68 327.302 li
249.65 327.852 249.64 328.452 249.64 329.102 cv
250.52 329.102 251.14 329.092 251.51 329.062 cv
251.51 329.762 li
251.14 329.742 250.52 329.722 249.64 329.722 cv
249.64 330.482 249.65 331.072 249.68 331.482 cv
248.89 331.482 li
248.91 331.122 248.93 330.662 248.93 330.112 cv
248.8 330.332 248.55 330.602 248.19 330.922 cv
247.82 331.242 247.48 331.502 247.18 331.682 cv
247.04 331.442 246.85 331.272 246.59 331.172 cv
246.82 331.092 247.13 330.912 247.52 330.622 cv
247.91 330.342 248.21 330.042 248.43 329.722 cv
247.9 329.722 247.4 329.742 246.94 329.762 cv
246.94 329.062 li
247.38 329.092 248.05 329.102 248.93 329.102 cv
252.37 330.312 mo
252.6 331.852 252.93 332.912 253.35 333.512 cv
253.61 332.912 253.78 332.312 253.87 331.702 cv
253.96 331.092 254.02 330.502 254.05 329.922 cv
252.53 329.922 li
252.37 330.312 li
248.43 333.712 mo
248.73 333.792 249.16 333.892 249.71 334.022 cv
249.92 333.762 250.12 333.392 250.3 332.892 cv
248.86 332.892 li
248.72 333.152 248.58 333.432 248.43 333.712 cv
251.36 327.732 mo
251.22 327.942 251.12 328.142 251.04 328.322 cv
250.96 328.502 250.86 328.722 250.73 328.982 cv
250.52 328.882 250.31 328.802 250.11 328.752 cv
250.31 328.412 250.51 327.982 250.69 327.462 cv
250.95 327.592 251.17 327.682 251.36 327.732 cv
250.18 330.002 mo
250.52 330.342 250.84 330.672 251.16 331.012 cv
251 331.152 250.83 331.302 250.65 331.482 cv
250.29 331.042 249.99 330.692 249.75 330.432 cv
249.91 330.302 250.05 330.162 250.18 330.002 cv
247.61 327.462 mo
247.97 327.822 248.26 328.192 248.5 328.552 cv
247.92 328.902 li
247.73 328.542 247.46 328.212 247.1 327.892 cv
247.33 327.732 247.5 327.592 247.61 327.462 cv
f
265.14 327.812 mo
265.12 328.052 265.11 328.332 265.11 328.672 cv
265.11 329.182 li
265.11 329.652 265.12 329.992 265.14 330.192 cv
261 330.192 li
261 331.362 li
262.8 331.362 li
262.8 331.132 262.78 330.782 262.76 330.312 cv
263.5 330.312 li
263.47 330.732 263.46 331.082 263.46 331.362 cv
264.52 331.362 li
264.98 331.362 265.37 331.352 265.69 331.322 cv
265.69 332.032 li
265.37 332.012 265 331.992 264.56 331.992 cv
263.46 331.992 li
263.46 333.042 li
265.18 333.042 li
265.15 333.542 265.14 333.872 265.14 334.022 cv
265.14 335.002 li
265.14 335.402 265.15 335.792 265.18 336.162 cv
264.48 336.162 li
264.48 335.612 li
261.9 335.612 li
261.9 336.202 li
261.2 336.202 li
261.22 335.912 261.24 335.552 261.24 335.112 cv
261.24 333.982 li
261.24 333.722 261.22 333.412 261.2 333.042 cv
262.8 333.042 li
262.8 331.992 li
260.96 331.992 li
260.94 332.752 260.84 333.462 260.67 334.122 cv
260.5 334.782 260.26 335.402 259.95 336.002 cv
259.71 335.842 259.47 335.732 259.21 335.652 cv
259.52 335.252 259.75 334.812 259.89 334.342 cv
260.03 333.872 260.14 333.372 260.22 332.832 cv
260.3 332.302 260.34 331.752 260.34 331.172 cv
260.34 329.682 li
260.34 329.272 260.32 328.652 260.3 327.812 cv
265.14 327.812 li
258.15 328.362 mo
258.15 328.002 258.13 327.662 258.11 327.342 cv
258.89 327.342 li
258.87 327.632 258.86 327.972 258.86 328.362 cv
258.86 329.372 li
259.12 329.372 259.52 329.362 260.07 329.332 cv
260.07 330.002 li
259.52 329.982 259.12 329.962 258.86 329.962 cv
258.86 331.442 li
259.19 331.262 259.54 331.062 259.91 330.822 cv
259.93 331.032 260 331.222 260.11 331.402 cv
259.61 331.692 259.19 331.942 258.86 332.142 cv
258.86 335.002 li
258.86 335.482 258.73 335.782 258.48 335.882 cv
258.23 335.982 257.86 336.082 257.37 336.162 cv
257.31 335.902 257.22 335.622 257.1 335.342 cv
257.54 335.342 257.82 335.322 257.95 335.282 cv
258.08 335.252 258.15 335.082 258.15 334.762 cv
258.15 332.462 li
257.76 332.672 257.37 332.922 256.98 333.202 cv
256.9 333.002 256.77 332.752 256.59 332.462 cv
257.11 332.282 257.63 332.042 258.15 331.752 cv
258.15 329.962 li
257.65 329.962 257.17 329.982 256.71 330.002 cv
256.71 329.332 li
257.17 329.362 257.65 329.372 258.15 329.372 cv
258.15 328.362 li
264.44 329.612 mo
264.44 328.392 li
261 328.392 li
261 329.612 li
264.44 329.612 li
264.48 335.042 mo
264.48 333.592 li
261.9 333.592 li
261.9 335.042 li
264.48 335.042 li
f
57.6 296.246 mo
54.1 296.246 li
f
57.6 296.246 mo
54.1 296.246 li
@
45.95 295.724 mo
45.97 295.034 46.07 294.484 46.24 294.084 cv
46.41 293.684 46.65 293.344 46.97 293.084 cv
47.28 292.824 47.66 292.694 48.12 292.694 cv
48.57 292.694 48.97 292.884 49.31 293.264 cv
49.65 293.644 49.87 294.114 49.97 294.684 cv
50.07 295.264 50.11 295.924 50.07 296.664 cv
50.03 297.404 49.9 298.014 49.68 298.474 cv
49.46 298.944 49.12 299.264 48.68 299.444 cv
48.24 299.624 47.79 299.604 47.35 299.384 cv
46.91 299.164 46.6 298.874 46.42 298.514 cv
46.24 298.154 46.11 297.764 46.03 297.364 cv
45.95 296.964 45.92 296.414 45.95 295.724 cv
46.77 295.484 mo
46.69 296.204 46.71 296.834 46.85 297.394 cv
46.98 297.954 47.19 298.354 47.49 298.594 cv
47.79 298.834 48.09 298.874 48.41 298.734 cv
48.72 298.594 48.95 298.304 49.09 297.874 cv
49.23 297.444 49.31 296.974 49.31 296.464 cv
49.31 295.964 49.29 295.504 49.25 295.084 cv
49.21 294.664 49.09 294.284 48.9 293.944 cv
48.7 293.604 48.44 293.434 48.12 293.414 cv
47.79 293.404 47.5 293.564 47.26 293.904 cv
47.01 294.244 46.85 294.774 46.77 295.484 cv
f
57.6 245.688 mo
54.1 245.688 li
f
57.6 245.688 mo
54.1 245.688 li
@
36.07 248.736 mo
36.09 248.346 36.27 247.996 36.61 247.686 cv
36.95 247.376 37.38 246.886 37.9 246.216 cv
38.42 245.556 38.76 245.036 38.92 244.676 cv
39.07 244.316 39.13 243.996 39.09 243.736 cv
39.05 243.476 38.93 243.266 38.72 243.096 cv
38.51 242.926 38.27 242.856 38 242.876 cv
37.72 242.906 37.46 243.016 37.22 243.196 cv
36.97 243.376 36.78 243.646 36.65 244.006 cv
35.91 243.896 li
36.12 243.296 36.39 242.866 36.71 242.586 cv
37.03 242.316 37.42 242.166 37.87 242.136 cv
38.13 242.116 38.36 242.116 38.57 242.156 cv
38.77 242.196 38.99 242.296 39.21 242.436 cv
39.43 242.576 39.62 242.796 39.76 243.076 cv
39.9 243.356 39.96 243.706 39.92 244.106 cv
39.88 244.516 39.67 244.996 39.31 245.556 cv
38.94 246.116 38.24 246.996 37.2 248.186 cv
40.01 248.186 li
40.01 248.896 li
36.07 248.896 li
36.07 248.736 li
f
40.95 245.166 mo
40.97 244.476 41.07 243.926 41.24 243.526 cv
41.41 243.126 41.65 242.786 41.97 242.526 cv
42.28 242.266 42.66 242.136 43.12 242.136 cv
43.57 242.136 43.97 242.326 44.31 242.706 cv
44.65 243.086 44.87 243.556 44.97 244.126 cv
45.07 244.706 45.11 245.366 45.07 246.106 cv
45.03 246.846 44.9 247.456 44.68 247.916 cv
44.46 248.386 44.12 248.706 43.68 248.886 cv
43.24 249.066 42.79 249.046 42.35 248.826 cv
41.91 248.606 41.6 248.316 41.42 247.956 cv
41.24 247.596 41.11 247.206 41.03 246.806 cv
40.95 246.406 40.92 245.856 40.95 245.166 cv
41.77 244.926 mo
41.69 245.646 41.71 246.276 41.85 246.836 cv
41.98 247.396 42.19 247.796 42.49 248.036 cv
42.79 248.276 43.09 248.316 43.41 248.176 cv
43.72 248.036 43.95 247.746 44.09 247.316 cv
44.23 246.886 44.31 246.416 44.31 245.906 cv
44.31 245.406 44.29 244.946 44.25 244.526 cv
44.21 244.106 44.09 243.726 43.9 243.386 cv
43.7 243.046 43.44 242.876 43.12 242.856 cv
42.79 242.846 42.5 243.006 42.26 243.346 cv
42.01 243.686 41.85 244.216 41.77 244.926 cv
f
45.95 245.166 mo
45.97 244.476 46.07 243.926 46.24 243.526 cv
46.41 243.126 46.65 242.786 46.97 242.526 cv
47.28 242.266 47.66 242.136 48.12 242.136 cv
48.57 242.136 48.97 242.326 49.31 242.706 cv
49.65 243.086 49.87 243.556 49.97 244.126 cv
50.07 244.706 50.11 245.366 50.07 246.106 cv
50.03 246.846 49.9 247.456 49.68 247.916 cv
49.46 248.386 49.12 248.706 48.68 248.886 cv
48.24 249.066 47.79 249.046 47.35 248.826 cv
46.91 248.606 46.6 248.316 46.42 247.956 cv
46.24 247.596 46.11 247.206 46.03 246.806 cv
45.95 246.406 45.92 245.856 45.95 245.166 cv
46.77 244.926 mo
46.69 245.646 46.71 246.276 46.85 246.836 cv
46.98 247.396 47.19 247.796 47.49 248.036 cv
47.79 248.276 48.09 248.316 48.41 248.176 cv
48.72 248.036 48.95 247.746 49.09 247.316 cv
49.23 246.886 49.31 246.416 49.31 245.906 cv
49.31 245.406 49.29 244.946 49.25 244.526 cv
49.21 244.106 49.09 243.726 48.9 243.386 cv
48.7 243.046 48.44 242.876 48.12 242.856 cv
47.79 242.846 47.5 243.006 47.26 243.346 cv
47.01 243.686 46.85 244.216 46.77 244.926 cv
f
57.6 195.13 mo
54.1 195.13 li
f
57.6 195.13 mo
54.1 195.13 li
@
38.73 196.848 mo
35.72 196.848 li
35.72 196.188 li
38.88 191.618 li
39.47 191.618 li
39.47 196.188 li
40.4 196.188 li
40.4 196.848 li
39.47 196.848 li
39.47 198.338 li
38.73 198.338 li
38.73 196.848 li
38.73 196.188 mo
38.73 193.098 li
36.54 196.188 li
38.73 196.188 li
f
40.95 194.608 mo
40.97 193.918 41.07 193.368 41.24 192.968 cv
41.41 192.568 41.65 192.228 41.97 191.968 cv
42.28 191.708 42.66 191.578 43.12 191.578 cv
43.57 191.578 43.97 191.768 44.31 192.148 cv
44.65 192.528 44.87 192.998 44.97 193.568 cv
45.07 194.148 45.11 194.808 45.07 195.548 cv
45.03 196.288 44.9 196.898 44.68 197.358 cv
44.46 197.828 44.12 198.148 43.68 198.328 cv
43.24 198.508 42.79 198.488 42.35 198.268 cv
41.91 198.048 41.6 197.758 41.42 197.398 cv
41.24 197.038 41.11 196.648 41.03 196.248 cv
40.95 195.848 40.92 195.298 40.95 194.608 cv
41.77 194.368 mo
41.69 195.088 41.71 195.718 41.85 196.278 cv
41.98 196.838 42.19 197.238 42.49 197.478 cv
42.79 197.718 43.09 197.758 43.41 197.618 cv
43.72 197.478 43.95 197.188 44.09 196.758 cv
44.23 196.328 44.31 195.858 44.31 195.348 cv
44.31 194.848 44.29 194.388 44.25 193.968 cv
44.21 193.548 44.09 193.168 43.9 192.828 cv
43.7 192.488 43.44 192.318 43.12 192.298 cv
42.79 192.288 42.5 192.448 42.26 192.788 cv
42.01 193.128 41.85 193.658 41.77 194.368 cv
f
45.95 194.608 mo
45.97 193.918 46.07 193.368 46.24 192.968 cv
46.41 192.568 46.65 192.228 46.97 191.968 cv
47.28 191.708 47.66 191.578 48.12 191.578 cv
48.57 191.578 48.97 191.768 49.31 192.148 cv
49.65 192.528 49.87 192.998 49.97 193.568 cv
50.07 194.148 50.11 194.808 50.07 195.548 cv
50.03 196.288 49.9 196.898 49.68 197.358 cv
49.46 197.828 49.12 198.148 48.68 198.328 cv
48.24 198.508 47.79 198.488 47.35 198.268 cv
46.91 198.048 46.6 197.758 46.42 197.398 cv
46.24 197.038 46.11 196.648 46.03 196.248 cv
45.95 195.848 45.92 195.298 45.95 194.608 cv
46.77 194.368 mo
46.69 195.088 46.71 195.718 46.85 196.278 cv
46.98 196.838 47.19 197.238 47.49 197.478 cv
47.79 197.718 48.09 197.758 48.41 197.618 cv
48.72 197.478 48.95 197.188 49.09 196.758 cv
49.23 196.328 49.31 195.858 49.31 195.348 cv
49.31 194.848 49.29 194.388 49.25 193.968 cv
49.21 193.548 49.09 193.168 48.9 192.828 cv
48.7 192.488 48.44 192.318 48.12 192.298 cv
47.79 192.288 47.5 192.448 47.26 192.788 cv
47.01 193.128 46.85 193.658 46.77 194.368 cv
f
57.6 144.572 mo
54.1 144.572 li
f
57.6 144.572 mo
54.1 144.572 li
@
35.99 145.49 mo
36.01 145.11 36.08 144.79 36.2 144.53 cv
36.32 144.27 36.49 143.95 36.73 143.56 cv
38.33 141.06 li
39.23 141.06 li
37.59 143.63 li
38.29 143.45 38.85 143.48 39.27 143.71 cv
39.69 143.95 39.97 144.21 40.11 144.51 cv
40.25 144.81 40.33 145.14 40.35 145.49 cv
40.36 145.85 40.31 146.19 40.19 146.53 cv
40.07 146.87 39.86 147.17 39.56 147.44 cv
39.26 147.72 38.85 147.87 38.31 147.89 cv
37.77 147.92 37.32 147.82 36.94 147.6 cv
36.56 147.38 36.3 147.07 36.16 146.67 cv
36.02 146.27 35.96 145.87 35.99 145.49 cv
37.2 146.78 mo
37.43 147.03 37.74 147.17 38.14 147.19 cv
38.53 147.22 38.86 147.09 39.12 146.8 cv
39.38 146.52 39.51 146.1 39.51 145.55 cv
39.51 145.01 39.34 144.63 39.02 144.42 cv
38.69 144.21 38.32 144.13 37.92 144.18 cv
37.52 144.24 37.22 144.43 37.04 144.77 cv
36.86 145.11 36.78 145.47 36.81 145.85 cv
36.83 146.23 36.96 146.54 37.2 146.78 cv
f
40.95 144.05 mo
40.97 143.36 41.07 142.81 41.24 142.41 cv
41.41 142.01 41.65 141.67 41.97 141.41 cv
42.28 141.15 42.66 141.02 43.12 141.02 cv
43.57 141.02 43.97 141.21 44.31 141.59 cv
44.65 141.97 44.87 142.44 44.97 143.01 cv
45.07 143.59 45.11 144.25 45.07 144.99 cv
45.03 145.73 44.9 146.34 44.68 146.8 cv
44.46 147.27 44.12 147.59 43.68 147.77 cv
43.24 147.95 42.79 147.93 42.35 147.71 cv
41.91 147.49 41.6 147.2 41.42 146.84 cv
41.24 146.48 41.11 146.09 41.03 145.69 cv
40.95 145.29 40.92 144.74 40.95 144.05 cv
41.77 143.81 mo
41.69 144.53 41.71 145.16 41.85 145.72 cv
41.98 146.28 42.19 146.68 42.49 146.92 cv
42.79 147.16 43.09 147.2 43.41 147.06 cv
43.72 146.92 43.95 146.63 44.09 146.2 cv
44.23 145.77 44.31 145.3 44.31 144.79 cv
44.31 144.29 44.29 143.83 44.25 143.41 cv
44.21 142.99 44.09 142.61 43.9 142.27 cv
43.7 141.93 43.44 141.76 43.12 141.74 cv
42.79 141.73 42.5 141.89 42.26 142.23 cv
42.01 142.57 41.85 143.1 41.77 143.81 cv
f
45.95 144.05 mo
45.97 143.36 46.07 142.81 46.24 142.41 cv
46.41 142.01 46.65 141.67 46.97 141.41 cv
47.28 141.15 47.66 141.02 48.12 141.02 cv
48.57 141.02 48.97 141.21 49.31 141.59 cv
49.65 141.97 49.87 142.44 49.97 143.01 cv
50.07 143.59 50.11 144.25 50.07 144.99 cv
50.03 145.73 49.9 146.34 49.68 146.8 cv
49.46 147.27 49.12 147.59 48.68 147.77 cv
48.24 147.95 47.79 147.93 47.35 147.71 cv
46.91 147.49 46.6 147.2 46.42 146.84 cv
46.24 146.48 46.11 146.09 46.03 145.69 cv
45.95 145.29 45.92 144.74 45.95 144.05 cv
46.77 143.81 mo
46.69 144.53 46.71 145.16 46.85 145.72 cv
46.98 146.28 47.19 146.68 47.49 146.92 cv
47.79 147.16 48.09 147.2 48.41 147.06 cv
48.72 146.92 48.95 146.63 49.09 146.2 cv
49.23 145.77 49.31 145.3 49.31 144.79 cv
49.31 144.29 49.29 143.83 49.25 143.41 cv
49.21 142.99 49.09 142.61 48.9 142.27 cv
48.7 141.93 48.44 141.76 48.12 141.74 cv
47.79 141.73 47.5 141.89 47.26 142.23 cv
47.01 142.57 46.85 143.1 46.77 143.81 cv
f
57.6 94.0144 mo
54.1 94.0144 li
f
57.6 94.0144 mo
54.1 94.0144 li
@
35.87 95.3019 mo
35.87 94.9919 35.94 94.6819 36.1 94.3819 cv
36.26 94.0819 36.52 93.8419 36.89 93.6619 cv
36.57 93.4819 36.36 93.2819 36.26 93.0619 cv
36.16 92.8419 36.1 92.5819 36.09 92.2919 cv
36.07 92.0119 36.11 91.7619 36.2 91.5519 cv
36.29 91.3519 36.43 91.1519 36.61 90.9719 cv
36.79 90.7919 37 90.6619 37.22 90.6019 cv
37.44 90.5419 37.68 90.5019 37.94 90.5019 cv
38.2 90.5019 38.43 90.5319 38.64 90.5819 cv
38.85 90.6319 39.07 90.7419 39.31 90.9119 cv
39.54 91.0819 39.71 91.3219 39.82 91.6319 cv
39.92 91.9519 39.92 92.3119 39.8 92.7319 cv
39.68 93.1519 39.37 93.4719 38.88 93.7019 cv
39.32 93.8419 39.64 94.0419 39.82 94.3119 cv
40 94.5919 40.09 94.9219 40.09 95.3119 cv
40.09 95.7019 40.03 96.0119 39.91 96.2419 cv
39.79 96.4819 39.66 96.6719 39.52 96.8319 cv
39.38 96.9919 39.18 97.1119 38.94 97.2019 cv
38.69 97.2919 38.38 97.3319 38 97.3319 cv
37.62 97.3319 37.3 97.2919 37.03 97.2019 cv
36.75 97.1119 36.52 96.9719 36.34 96.7919 cv
36.16 96.6119 36.03 96.3919 35.97 96.1419 cv
35.9 95.9019 35.87 95.6219 35.87 95.3019 cv
36.67 95.2619 mo
36.65 95.5819 36.71 95.8519 36.83 96.0819 cv
36.95 96.3219 37.16 96.4719 37.47 96.5319 cv
37.78 96.6019 38.11 96.6019 38.45 96.5219 cv
38.79 96.4419 39.02 96.2619 39.15 95.9719 cv
39.28 95.6919 39.33 95.4019 39.29 95.1119 cv
39.25 94.8319 39.08 94.5919 38.8 94.3919 cv
38.51 94.1919 38.2 94.1119 37.86 94.1319 cv
37.52 94.1619 37.24 94.2819 37.02 94.4819 cv
36.8 94.6919 36.68 94.9519 36.67 95.2619 cv
36.81 92.2219 mo
36.81 92.4819 36.9 92.7319 37.08 92.9619 cv
37.26 93.2019 37.55 93.3119 37.94 93.3119 cv
38.33 93.3119 38.62 93.2019 38.82 92.9619 cv
39.02 92.7319 39.11 92.4519 39.1 92.1219 cv
39.08 91.8019 38.96 91.5619 38.74 91.4019 cv
38.52 91.2419 38.22 91.1819 37.84 91.2019 cv
37.46 91.2319 37.2 91.3419 37.04 91.5319 cv
36.88 91.7319 36.81 91.9619 36.81 92.2219 cv
f
40.95 93.4919 mo
40.97 92.8019 41.07 92.2519 41.24 91.8519 cv
41.41 91.4519 41.65 91.1119 41.97 90.8519 cv
42.28 90.5919 42.66 90.4619 43.12 90.4619 cv
43.57 90.4619 43.97 90.6519 44.31 91.0319 cv
44.65 91.4119 44.87 91.8819 44.97 92.4519 cv
45.07 93.0319 45.11 93.6919 45.07 94.4319 cv
45.03 95.1719 44.9 95.7819 44.68 96.2419 cv
44.46 96.7119 44.12 97.0319 43.68 97.2119 cv
43.24 97.3919 42.79 97.3719 42.35 97.1519 cv
41.91 96.9319 41.6 96.6419 41.42 96.2819 cv
41.24 95.9219 41.11 95.5319 41.03 95.1319 cv
40.95 94.7319 40.92 94.1819 40.95 93.4919 cv
41.77 93.2519 mo
41.69 93.9719 41.71 94.6019 41.85 95.1619 cv
41.98 95.7219 42.19 96.1219 42.49 96.3619 cv
42.79 96.6019 43.09 96.6419 43.41 96.5019 cv
43.72 96.3619 43.95 96.0719 44.09 95.6419 cv
44.23 95.2119 44.31 94.7419 44.31 94.2319 cv
44.31 93.7319 44.29 93.2719 44.25 92.8519 cv
44.21 92.4319 44.09 92.0519 43.9 91.7119 cv
43.7 91.3719 43.44 91.2019 43.12 91.1819 cv
42.79 91.1719 42.5 91.3319 42.26 91.6719 cv
42.01 92.0119 41.85 92.5419 41.77 93.2519 cv
f
45.95 93.4919 mo
45.97 92.8019 46.07 92.2519 46.24 91.8519 cv
46.41 91.4519 46.65 91.1119 46.97 90.8519 cv
47.28 90.5919 47.66 90.4619 48.12 90.4619 cv
48.57 90.4619 48.97 90.6519 49.31 91.0319 cv
49.65 91.4119 49.87 91.8819 49.97 92.4519 cv
50.07 93.0319 50.11 93.6919 50.07 94.4319 cv
50.03 95.1719 49.9 95.7819 49.68 96.2419 cv
49.46 96.7119 49.12 97.0319 48.68 97.2119 cv
48.24 97.3919 47.79 97.3719 47.35 97.1519 cv
46.91 96.9319 46.6 96.6419 46.42 96.2819 cv
46.24 95.9219 46.11 95.5319 46.03 95.1319 cv
45.95 94.7319 45.92 94.1819 45.95 93.4919 cv
46.77 93.2519 mo
46.69 93.9719 46.71 94.6019 46.85 95.1619 cv
46.98 95.7219 47.19 96.1219 47.49 96.3619 cv
47.79 96.6019 48.09 96.6419 48.41 96.5019 cv
48.72 96.3619 48.95 96.0719 49.09 95.6419 cv
49.23 95.2119 49.31 94.7419 49.31 94.2319 cv
49.31 93.7319 49.29 93.2719 49.25 92.8519 cv
49.21 92.4319 49.09 92.0519 48.9 91.7119 cv
48.7 91.3719 48.44 91.2019 48.12 91.1819 cv
47.79 91.1719 47.5 91.3319 47.26 91.6719 cv
47.01 92.0119 46.85 92.5419 46.77 93.2519 cv
f
57.6 43.4564 mo
54.1 43.4564 li
f
57.6 43.4564 mo
54.1 43.4564 li
@
32.79 41.2639 mo
32.45 41.6039 32.02 41.9339 31.5 42.2439 cv
31.5 41.5039 li
32.15 41.0639 32.68 40.5439 33.1 39.9439 cv
33.57 39.9439 li
33.57 46.6639 li
32.79 46.6639 li
32.79 41.2639 li
f
35.95 42.9339 mo
35.97 42.2439 36.07 41.6939 36.24 41.2939 cv
36.41 40.8939 36.65 40.5539 36.97 40.2939 cv
37.28 40.0339 37.66 39.9039 38.12 39.9039 cv
38.57 39.9039 38.97 40.0939 39.31 40.4739 cv
39.65 40.8539 39.87 41.3239 39.97 41.8939 cv
40.07 42.4739 40.11 43.1339 40.07 43.8739 cv
40.03 44.6139 39.9 45.2239 39.68 45.6839 cv
39.46 46.1539 39.12 46.4739 38.68 46.6539 cv
38.24 46.8339 37.79 46.8139 37.35 46.5939 cv
36.91 46.3739 36.6 46.0839 36.42 45.7239 cv
36.24 45.3639 36.11 44.9739 36.03 44.5739 cv
35.95 44.1739 35.92 43.6239 35.95 42.9339 cv
36.77 42.6939 mo
36.69 43.4139 36.71 44.0439 36.85 44.6039 cv
36.98 45.1639 37.19 45.5639 37.49 45.8039 cv
37.79 46.0439 38.09 46.0839 38.41 45.9439 cv
38.72 45.8039 38.95 45.5139 39.09 45.0839 cv
39.23 44.6539 39.31 44.1839 39.31 43.6739 cv
39.31 43.1739 39.29 42.7139 39.25 42.2939 cv
39.21 41.8739 39.09 41.4939 38.9 41.1539 cv
38.7 40.8139 38.44 40.6439 38.12 40.6239 cv
37.79 40.6139 37.5 40.7739 37.26 41.1139 cv
37.01 41.4539 36.85 41.9839 36.77 42.6939 cv
f
40.95 42.9339 mo
40.97 42.2439 41.07 41.6939 41.24 41.2939 cv
41.41 40.8939 41.65 40.5539 41.97 40.2939 cv
42.28 40.0339 42.66 39.9039 43.12 39.9039 cv
43.57 39.9039 43.97 40.0939 44.31 40.4739 cv
44.65 40.8539 44.87 41.3239 44.97 41.8939 cv
45.07 42.4739 45.11 43.1339 45.07 43.8739 cv
45.03 44.6139 44.9 45.2239 44.68 45.6839 cv
44.46 46.1539 44.12 46.4739 43.68 46.6539 cv
43.24 46.8339 42.79 46.8139 42.35 46.5939 cv
41.91 46.3739 41.6 46.0839 41.42 45.7239 cv
41.24 45.3639 41.11 44.9739 41.03 44.5739 cv
40.95 44.1739 40.92 43.6239 40.95 42.9339 cv
41.77 42.6939 mo
41.69 43.4139 41.71 44.0439 41.85 44.6039 cv
41.98 45.1639 42.19 45.5639 42.49 45.8039 cv
42.79 46.0439 43.09 46.0839 43.41 45.9439 cv
43.72 45.8039 43.95 45.5139 44.09 45.0839 cv
44.23 44.6539 44.31 44.1839 44.31 43.6739 cv
44.31 43.1739 44.29 42.7139 44.25 42.2939 cv
44.21 41.8739 44.09 41.4939 43.9 41.1539 cv
43.7 40.8139 43.44 40.6439 43.12 40.6239 cv
42.79 40.6139 42.5 40.7739 42.26 41.1139 cv
42.01 41.4539 41.85 41.9839 41.77 42.6939 cv
f
45.95 42.9339 mo
45.97 42.2439 46.07 41.6939 46.24 41.2939 cv
46.41 40.8939 46.65 40.5539 46.97 40.2939 cv
47.28 40.0339 47.66 39.9039 48.12 39.9039 cv
48.57 39.9039 48.97 40.0939 49.31 40.4739 cv
49.65 40.8539 49.87 41.3239 49.97 41.8939 cv
50.07 42.4739 50.11 43.1339 50.07 43.8739 cv
50.03 44.6139 49.9 45.2239 49.68 45.6839 cv
49.46 46.1539 49.12 46.4739 48.68 46.6539 cv
48.24 46.8339 47.79 46.8139 47.35 46.5939 cv
46.91 46.3739 46.6 46.0839 46.42 45.7239 cv
46.24 45.3639 46.11 44.9739 46.03 44.5739 cv
45.95 44.1739 45.92 43.6239 45.95 42.9339 cv
46.77 42.6939 mo
46.69 43.4139 46.71 44.0439 46.85 44.6039 cv
46.98 45.1639 47.19 45.5639 47.49 45.8039 cv
47.79 46.0439 48.09 46.0839 48.41 45.9439 cv
48.72 45.8039 48.95 45.5139 49.09 45.0839 cv
49.23 44.6539 49.31 44.1839 49.31 43.6739 cv
49.31 43.1739 49.29 42.7139 49.25 42.2939 cv
49.21 41.8739 49.09 41.4939 48.9 41.1539 cv
48.7 40.8139 48.44 40.6439 48.12 40.6239 cv
47.79 40.6139 47.5 40.7739 47.26 41.1139 cv
47.01 41.4539 46.85 41.9839 46.77 42.6939 cv
f
24.69 189.998 mo
25.21 191.748 25.6 193.008 25.89 193.788 cv
25.67 193.848 25.43 193.948 25.15 194.098 cv
25.13 193.838 25.08 193.618 25 193.438 cv
22.54 193.438 li
22.33 193.438 22.06 193.458 21.72 193.478 cv
21.72 192.728 li
21.96 192.758 22.29 192.768 22.73 192.768 cv
24.84 192.768 li
24.79 192.588 24.73 192.368 24.65 192.108 cv
20.7 192.108 li
20.7 193.398 li
20.44 193.378 19.99 193.358 19.33 193.358 cv
18.66 193.358 18.19 193.378 17.93 193.398 cv
17.93 190.388 li
18.22 190.418 18.69 190.428 19.33 190.428 cv
19.96 190.428 20.42 190.418 20.7 190.388 cv
20.7 191.438 li
22.11 191.438 li
22.11 191.138 22.1 190.808 22.07 190.468 cv
22.77 190.468 li
22.75 190.808 22.73 191.138 22.73 191.438 cv
24.49 191.438 li
24.44 191.208 24.27 190.728 23.98 189.998 cv
24.2 190.028 24.43 190.028 24.69 189.998 cv
17.5 187.928 mo
17.68 188.088 17.93 188.238 18.24 188.398 cv
18.24 185.548 li
18.68 185.728 19.15 185.968 19.65 186.268 cv
20.15 186.568 20.56 186.848 20.9 187.108 cv
21.37 186.508 21.71 185.758 21.91 184.838 cv
22.17 185.048 22.41 185.208 22.62 185.308 cv
22.49 185.628 22.31 185.988 22.09 186.408 cv
21.87 186.828 21.63 187.198 21.37 187.538 cv
21.63 187.878 21.87 188.258 22.07 188.658 cv
22.28 189.058 22.49 189.498 22.69 189.958 cv
22.46 190.068 22.24 190.208 22.03 190.388 cv
21.95 190.048 21.82 189.658 21.64 189.218 cv
21.46 188.778 21.23 188.388 20.94 188.048 cv
20.68 188.308 20.25 188.688 19.65 189.178 cv
19.97 189.358 20.23 189.528 20.43 189.688 cv
20.27 189.848 20.13 190.038 20 190.268 cv
19.74 189.988 19.35 189.698 18.81 189.408 cv
18.28 189.128 17.74 188.908 17.19 188.748 cv
17.37 188.468 17.48 188.188 17.5 187.928 cv
22.54 185.898 mo
22.88 185.928 23.48 185.938 24.33 185.938 cv
25.16 185.938 25.76 185.928 26.16 185.898 cv
26.16 186.638 li
25.42 186.638 li
25.42 188.868 li
26.2 188.868 li
26.2 189.568 li
25.76 189.548 25.14 189.528 24.33 189.528 cv
23.5 189.528 22.9 189.548 22.54 189.568 cv
22.54 185.898 li
24.84 186.638 mo
23.16 186.638 li
23.16 188.868 li
24.84 188.868 li
24.84 186.638 li
20.12 191.088 mo
18.51 191.088 li
18.51 192.688 li
20.12 192.688 li
20.12 191.088 li
19.1 188.828 mo
19.57 188.518 20.03 188.118 20.47 187.618 cv
20.31 187.458 20.06 187.278 19.71 187.068 cv
19.36 186.868 19.07 186.708 18.83 186.598 cv
18.83 188.668 li
19.1 188.828 li
f
22.42 177.188 mo
22.42 176.538 22.41 176.028 22.38 175.658 cv
23.12 175.658 li
23.1 175.998 23.08 176.498 23.08 177.148 cv
23.08 177.728 li
25.19 177.728 li
25.19 176.128 li
25.12 175.038 li
25.89 175.038 li
25.86 175.398 25.85 175.768 25.85 176.128 cv
25.85 179.998 li
25.85 180.468 25.86 180.898 25.89 181.288 cv
25.15 181.288 li
25.18 180.898 25.19 180.468 25.19 179.998 cv
25.19 178.478 li
23.08 178.478 li
23.08 178.978 li
23.08 179.458 23.1 179.968 23.12 180.508 cv
22.38 180.508 li
22.41 179.968 22.42 179.458 22.42 178.978 cv
22.42 177.188 li
18.01 175.738 mo
18.4 175.978 18.74 176.218 19.04 176.458 cv
19.34 176.708 19.66 176.988 20 177.298 cv
20.5 176.418 20.95 175.678 21.37 175.078 cv
21.58 175.318 21.77 175.508 21.95 175.658 cv
21.25 176.548 20.75 177.268 20.43 177.808 cv
20.75 178.228 21.01 178.628 21.21 178.988 cv
21.42 179.348 21.71 179.878 22.07 180.578 cv
21.89 180.658 21.67 180.848 21.4 181.128 cv
21.22 180.508 20.89 179.798 20.41 178.998 cv
19.93 178.208 19.34 177.568 18.63 177.068 cv
18.63 179.098 li
18.63 179.568 18.65 180.008 18.67 180.428 cv
17.97 180.428 li
18 180.038 18.01 179.608 18.01 179.138 cv
18.01 175.738 li
19.72 180.548 mo
19.96 180.808 20.47 181.238 21.25 181.828 cv
24.45 181.828 li
25 181.828 25.6 181.818 26.28 181.798 cv
26.28 182.578 li
25.6 182.558 24.99 182.538 24.41 182.538 cv
21.99 182.538 li
22.33 182.898 22.65 183.248 22.93 183.588 cv
22.75 183.748 22.56 183.918 22.38 184.098 cv
22 183.498 21.51 182.948 20.92 182.438 cv
20.34 181.938 19.76 181.538 19.18 181.248 cv
19.36 181.048 19.54 180.808 19.72 180.548 cv
17.77 180.978 mo
17.98 181.158 18.35 181.488 18.87 181.968 cv
19.39 182.448 19.85 182.918 20.23 183.358 cv
20.05 183.518 19.87 183.708 19.69 183.938 cv
19.38 183.478 19.01 183.038 18.58 182.638 cv
18.15 182.238 17.71 181.898 17.26 181.638 cv
17.45 181.438 17.62 181.218 17.77 180.978 cv
f
20.97 171.798 mo
18.4 171.798 li
18.17 171.798 17.83 171.808 17.38 171.828 cv
17.38 170.978 li
17.88 170.998 18.2 171.008 18.36 171.008 cv
20.97 171.008 li
20.97 166.288 li
20.97 165.948 20.96 165.588 20.94 165.188 cv
21.72 165.188 li
21.7 165.688 21.68 166.148 21.68 166.558 cv
21.68 168.828 li
22.2 168.648 22.71 168.368 23.2 167.988 cv
23.7 167.608 24.11 167.158 24.43 166.638 cv
24.76 166.118 24.99 165.648 25.12 165.228 cv
25.32 165.568 25.57 165.828 25.89 166.008 cv
25.6 166.558 25.27 167.068 24.88 167.538 cv
24.5 168.008 24.02 168.428 23.46 168.788 cv
22.9 169.148 22.31 169.428 21.68 169.608 cv
21.68 171.008 li
24.76 171.008 li
24.3 170.258 23.95 169.748 23.71 169.488 cv
24 169.308 24.26 169.128 24.49 168.938 cv
24.73 169.438 25.02 169.938 25.36 170.428 cv
25.71 170.928 26 171.288 26.24 171.518 cv
25.95 171.728 25.7 171.928 25.5 172.108 cv
25.3 171.908 25.03 171.798 24.69 171.798 cv
21.68 171.798 li
21.68 172.688 li
21.68 173.058 21.7 173.478 21.72 173.938 cv
20.94 173.938 li
20.96 173.478 20.97 173.088 20.97 172.768 cv
20.97 171.798 li
18.01 166.868 mo
18.25 167.158 18.64 167.578 19.2 168.138 cv
19.76 168.698 20.3 169.258 20.82 169.798 cv
20.51 170.038 20.3 170.228 20.19 170.388 cv
19.88 169.948 19.44 169.458 18.87 168.908 cv
18.3 168.358 17.8 167.938 17.38 167.648 cv
17.56 167.448 17.77 167.188 18.01 166.868 cv
f
22.73 161.798 mo
22.76 161.068 22.77 160.478 22.77 160.038 cv
22.77 156.398 li
23.19 156.638 23.61 156.928 24.03 157.268 cv
24.45 157.608 24.78 157.928 25.04 158.238 cv
25.2 157.898 25.32 157.418 25.42 156.798 cv
25.52 156.178 25.57 155.578 25.57 154.998 cv
25.73 155.158 25.99 155.298 26.36 155.428 cv
26.25 156.188 26.12 156.848 25.98 157.418 cv
25.84 157.998 25.68 158.478 25.5 158.868 cv
25.73 159.418 25.92 159.958 26.06 160.488 cv
26.2 161.028 26.31 161.578 26.39 162.148 cv
26.18 162.228 25.96 162.378 25.73 162.618 cv
25.73 162.148 25.66 161.618 25.54 161.018 cv
25.41 160.418 25.25 159.898 25.04 159.448 cv
24.68 159.898 24.12 160.338 23.36 160.778 cv
23.4 161.798 li
22.73 161.798 li
17.42 159.878 mo
17.34 159.598 17.25 159.338 17.15 159.098 cv
17.44 158.948 17.82 158.788 18.28 158.628 cv
18.28 157.188 li
18.28 156.908 18.27 156.378 18.24 155.618 cv
18.94 155.618 li
18.92 156.358 18.9 156.898 18.9 157.258 cv
18.9 162.378 li
20.08 162.378 21.02 162.398 21.74 162.418 cv
22.46 162.448 23.17 162.518 23.87 162.638 cv
24.57 162.758 25.34 163.008 26.16 163.398 cv
26 163.638 25.89 163.878 25.81 164.138 cv
25.09 163.718 24.37 163.458 23.67 163.338 cv
22.97 163.218 22.08 163.158 20.98 163.138 cv
19.88 163.128 18.98 163.138 18.28 163.158 cv
18.28 159.528 li
17.94 159.638 17.66 159.758 17.42 159.878 cv
20.19 160.658 mo
19.78 160.658 19.46 160.678 19.22 160.698 cv
19.22 159.878 li
19.43 159.908 19.75 159.918 20.19 159.918 cv
20.19 157.808 li
19.78 157.808 19.44 157.828 19.18 157.848 cv
19.18 157.028 li
19.5 157.058 19.83 157.068 20.19 157.068 cv
20.19 156.498 20.18 155.998 20.15 155.578 cv
20.82 155.578 li
20.8 155.978 20.78 156.468 20.78 157.068 cv
21.48 157.068 21.99 157.058 22.3 157.028 cv
22.3 160.698 li
21.89 160.678 21.38 160.658 20.78 160.658 cv
20.78 160.978 20.8 161.428 20.82 162.028 cv
20.15 162.028 li
20.18 161.428 20.19 160.978 20.19 160.658 cv
21.68 157.808 mo
20.78 157.808 li
20.78 159.918 li
21.68 159.918 li
21.68 157.808 li
23.36 160.038 mo
23.88 159.698 24.33 159.298 24.69 158.828 cv
24.41 158.438 23.96 158.038 23.36 157.618 cv
23.36 159.998 li
23.36 160.038 li
f
2 lw
2 lc
73.8327 295.488 mo
154.996 295.235 li
236.16 294.73 li
317.324 294.73 li
398.487 294.982 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
gsave
70.3328 298.988 mo
77.3328 298.988 li
77.3328 291.988 li
70.3328 291.988 li
70.3328 298.988 li
clp
70.8327 298.488 mo
76.8327 298.488 li
76.8327 292.488 li
70.8327 292.488 li
cp
f
1 lw
0 lc
0 lj
70.8327 298.488 mo
76.8327 298.488 li
76.8327 292.488 li
70.8327 292.488 li
cp
@
grestore
gsave
151.496 298.735 mo
158.496 298.735 li
158.496 291.735 li
151.496 291.735 li
151.496 298.735 li
clp
151.996 298.235 mo
157.996 298.235 li
157.996 292.235 li
151.996 292.235 li
cp
f
1 lw
0 lc
0 lj
151.996 298.235 mo
157.996 298.235 li
157.996 292.235 li
151.996 292.235 li
cp
@
grestore
gsave
232.66 298.23 mo
239.66 298.23 li
239.66 291.23 li
232.66 291.23 li
232.66 298.23 li
clp
233.16 297.73 mo
239.16 297.73 li
239.16 291.73 li
233.16 291.73 li
cp
f
1 lw
0 lc
0 lj
233.16 297.73 mo
239.16 297.73 li
239.16 291.73 li
233.16 291.73 li
cp
@
grestore
gsave
313.824 298.23 mo
320.824 298.23 li
320.824 291.23 li
313.824 291.23 li
313.824 298.23 li
clp
314.324 297.73 mo
320.324 297.73 li
320.324 291.73 li
314.324 291.73 li
cp
f
1 lw
0 lc
0 lj
314.324 297.73 mo
320.324 297.73 li
320.324 291.73 li
314.324 291.73 li
cp
@
grestore
gsave
394.987 298.482 mo
401.987 298.482 li
401.987 291.482 li
394.987 291.482 li
394.987 298.482 li
clp
395.487 297.982 mo
401.487 297.982 li
401.487 291.982 li
395.487 291.982 li
cp
f
1 lw
0 lc
0 lj
395.487 297.982 mo
401.487 297.982 li
401.487 291.982 li
395.487 291.982 li
cp
@
grestore
0 lc
[7.4 3.2 ] 0 dsh
73.8327 293.466 mo
154.996 291.949 li
236.16 216.618 li
317.324 122.832 li
398.487 53.568 li
.926818 .245335 1 .155612 cmyk
@
gsave
70.3328 296.966 mo
77.3328 296.966 li
77.3328 289.966 li
70.3328 289.966 li
70.3328 296.966 li
clp
73.8327 296.466 mo
74.6283 296.466 75.3915 296.15 75.954 295.587 cv
76.5166 295.024 76.8327 294.261 76.8327 293.466 cv
76.8327 292.67 76.5166 291.907 75.954 291.344 cv
75.3915 290.782 74.6283 290.466 73.8327 290.466 cv
73.0371 290.466 72.274 290.782 71.7114 291.344 cv
71.1488 291.907 70.8327 292.67 70.8327 293.466 cv
70.8327 294.261 71.1488 295.024 71.7114 295.587 cv
72.274 296.15 73.0371 296.466 73.8327 296.466 cv
cp
f
1 lw
[] 0 dsh
73.8327 296.466 mo
74.6283 296.466 75.3915 296.15 75.954 295.587 cv
76.5166 295.024 76.8327 294.261 76.8327 293.466 cv
76.8327 292.67 76.5166 291.907 75.954 291.344 cv
75.3915 290.782 74.6283 290.466 73.8327 290.466 cv
73.0371 290.466 72.274 290.782 71.7114 291.344 cv
71.1488 291.907 70.8327 292.67 70.8327 293.466 cv
70.8327 294.261 71.1488 295.024 71.7114 295.587 cv
72.274 296.15 73.0371 296.466 73.8327 296.466 cv
cp
@
grestore
gsave
151.496 295.449 mo
158.496 295.449 li
158.496 288.449 li
151.496 288.449 li
151.496 295.449 li
clp
154.996 294.949 mo
155.792 294.949 156.555 294.633 157.118 294.07 cv
157.68 293.508 157.996 292.745 157.996 291.949 cv
157.996 291.153 157.68 290.39 157.118 289.828 cv
156.555 289.265 155.792 288.949 154.996 288.949 cv
154.201 288.949 153.438 289.265 152.875 289.828 cv
152.312 290.39 151.996 291.153 151.996 291.949 cv
151.996 292.745 152.312 293.508 152.875 294.07 cv
153.438 294.633 154.201 294.949 154.996 294.949 cv
cp
f
1 lw
[] 0 dsh
154.996 294.949 mo
155.792 294.949 156.555 294.633 157.118 294.07 cv
157.68 293.508 157.996 292.745 157.996 291.949 cv
157.996 291.153 157.68 290.39 157.118 289.828 cv
156.555 289.265 155.792 288.949 154.996 288.949 cv
154.201 288.949 153.438 289.265 152.875 289.828 cv
152.312 290.39 151.996 291.153 151.996 291.949 cv
151.996 292.745 152.312 293.508 152.875 294.07 cv
153.438 294.633 154.201 294.949 154.996 294.949 cv
cp
@
grestore
gsave
232.66 220.118 mo
239.66 220.118 li
239.66 213.118 li
232.66 213.118 li
232.66 220.118 li
clp
236.16 219.618 mo
236.956 219.618 237.719 219.301 238.281 218.739 cv
238.844 218.176 239.16 217.413 239.16 216.618 cv
239.16 215.822 238.844 215.059 238.281 214.496 cv
237.719 213.934 236.956 213.618 236.16 213.618 cv
235.364 213.618 234.601 213.934 234.039 214.496 cv
233.476 215.059 233.16 215.822 233.16 216.618 cv
233.16 217.413 233.476 218.176 234.039 218.739 cv
234.601 219.301 235.364 219.618 236.16 219.618 cv
cp
f
1 lw
[] 0 dsh
236.16 219.618 mo
236.956 219.618 237.719 219.301 238.281 218.739 cv
238.844 218.176 239.16 217.413 239.16 216.618 cv
239.16 215.822 238.844 215.059 238.281 214.496 cv
237.719 213.934 236.956 213.618 236.16 213.618 cv
235.364 213.618 234.601 213.934 234.039 214.496 cv
233.476 215.059 233.16 215.822 233.16 216.618 cv
233.16 217.413 233.476 218.176 234.039 218.739 cv
234.601 219.301 235.364 219.618 236.16 219.618 cv
cp
@
grestore
gsave
313.824 126.332 mo
320.824 126.332 li
320.824 119.332 li
313.824 119.332 li
313.824 126.332 li
clp
317.324 125.832 mo
318.119 125.832 318.882 125.516 319.445 124.954 cv
320.008 124.391 320.324 123.628 320.324 122.832 cv
320.324 122.037 320.008 121.274 319.445 120.711 cv
318.882 120.149 318.119 119.832 317.324 119.832 cv
316.528 119.832 315.765 120.149 315.202 120.711 cv
314.64 121.274 314.324 122.037 314.324 122.832 cv
314.324 123.628 314.64 124.391 315.202 124.954 cv
315.765 125.516 316.528 125.832 317.324 125.832 cv
cp
f
1 lw
[] 0 dsh
317.324 125.832 mo
318.119 125.832 318.882 125.516 319.445 124.954 cv
320.008 124.391 320.324 123.628 320.324 122.832 cv
320.324 122.037 320.008 121.274 319.445 120.711 cv
318.882 120.149 318.119 119.832 317.324 119.832 cv
316.528 119.832 315.765 120.149 315.202 120.711 cv
314.64 121.274 314.324 122.037 314.324 122.832 cv
314.324 123.628 314.64 124.391 315.202 124.954 cv
315.765 125.516 316.528 125.832 317.324 125.832 cv
cp
@
grestore
gsave
394.987 57.0681 mo
401.987 57.0681 li
401.987 50.068 li
394.987 50.068 li
394.987 57.0681 li
clp
398.487 56.568 mo
399.283 56.568 400.046 56.2519 400.609 55.6893 cv
401.171 55.1268 401.487 54.3636 401.487 53.568 cv
401.487 52.7724 401.171 52.0093 400.609 51.4467 cv
400.046 50.8841 399.283 50.568 398.487 50.568 cv
397.692 50.568 396.929 50.8841 396.366 51.4467 cv
395.803 52.0093 395.487 52.7724 395.487 53.568 cv
395.487 54.3636 395.803 55.1268 396.366 55.6893 cv
396.929 56.2519 397.692 56.568 398.487 56.568 cv
cp
f
1 lw
[] 0 dsh
398.487 56.568 mo
399.283 56.568 400.046 56.2519 400.609 55.6893 cv
401.171 55.1268 401.487 54.3636 401.487 53.568 cv
401.487 52.7724 401.171 52.0093 400.609 51.4467 cv
400.046 50.8841 399.283 50.568 398.487 50.568 cv
397.692 50.568 396.929 50.8841 396.366 51.4467 cv
395.803 52.0093 395.487 52.7724 395.487 53.568 cv
395.487 54.3636 395.803 55.1268 396.366 55.6893 cv
396.929 56.2519 397.692 56.568 398.487 56.568 cv
cp
@
grestore
[12.8 3.2 2 3.2 ] 0 dsh
73.8327 295.488 mo
154.996 295.488 li
236.16 294.982 li
317.324 294.982 li
398.487 295.235 li
.930816 .793027 0 0 cmyk
@
gsave
70.3328 298.988 mo
77.3328 298.988 li
77.3328 291.988 li
70.3328 291.988 li
70.3328 298.988 li
clp
70.8327 295.488 mo
76.8327 295.488 li
73.8327 298.488 mo
73.8327 292.488 li
f
1 lw
[] 0 dsh
70.8327 295.488 mo
76.8327 295.488 li
73.8327 298.488 mo
73.8327 292.488 li
@
grestore
gsave
151.496 298.988 mo
158.496 298.988 li
158.496 291.988 li
151.496 291.988 li
151.496 298.988 li
clp
151.996 295.488 mo
157.996 295.488 li
154.996 298.488 mo
154.996 292.488 li
f
1 lw
[] 0 dsh
151.996 295.488 mo
157.996 295.488 li
154.996 298.488 mo
154.996 292.488 li
@
grestore
gsave
232.66 298.482 mo
239.66 298.482 li
239.66 291.482 li
232.66 291.482 li
232.66 298.482 li
clp
233.16 294.982 mo
239.16 294.982 li
236.16 297.982 mo
236.16 291.982 li
f
1 lw
[] 0 dsh
233.16 294.982 mo
239.16 294.982 li
236.16 297.982 mo
236.16 291.982 li
@
grestore
gsave
313.824 298.482 mo
320.824 298.482 li
320.824 291.482 li
313.824 291.482 li
313.824 298.482 li
clp
314.324 294.982 mo
320.324 294.982 li
317.324 297.982 mo
317.324 291.982 li
f
1 lw
[] 0 dsh
314.324 294.982 mo
320.324 294.982 li
317.324 297.982 mo
317.324 291.982 li
@
grestore
gsave
394.987 298.735 mo
401.987 298.735 li
401.987 291.735 li
394.987 291.735 li
394.987 298.735 li
clp
395.487 295.235 mo
401.487 295.235 li
398.487 298.235 mo
398.487 292.235 li
f
1 lw
[] 0 dsh
395.487 295.235 mo
401.487 295.235 li
398.487 298.235 mo
398.487 292.235 li
@
grestore
.8 lw
2 lc
0 lj
[] 0 dsh
57.6 307.584 mo
57.6 41.472 li
1 /0 /CSD get_res sepcs
1 sep
@
414.72 307.584 mo
414.72 41.472 li
@
57.6 307.584 mo
414.72 307.584 li
@
57.6 41.472 mo
414.72 41.472 li
@
146.6 88.722 mo
64.6 88.722 li
64.0101 88.7202 63.6627 88.578 63.4535 88.3685 cv
63.2441 88.1593 63.1018 87.8119 63.1 87.2221 cv
63.1 48.472 li
63.1018 47.8822 63.2441 47.5347 63.4535 47.3256 cv
63.6627 47.1161 64.0101 46.9738 64.6 46.972 cv
146.6 46.972 li
147.19 46.9738 147.537 47.1161 147.746 47.3256 cv
147.956 47.5347 148.098 47.8822 148.1 48.472 cv
148.1 87.2221 li
148.098 87.8119 147.956 88.1593 147.746 88.3685 cv
147.537 88.578 147.19 88.7202 146.6 88.722 cv
0 0 0 0 cmyk
f
146.611 89.722 mo
146.607 89.722 146.604 89.722 146.6 89.722 cv
64.6 89.722 li
64.5964 89.722 64.5928 89.722 64.5893 89.722 cv
63.8503 89.722 63.2018 89.5306 62.7464 89.0756 cv
62.2893 88.618 62.0982 87.9655 62.1 87.2221 cv
62.1 48.472 li
62.0982 47.7286 62.2893 47.0759 62.7464 46.6185 cv
63.2019 46.1633 63.8507 45.972 64.59 45.972 cv
64.5933 45.972 64.5966 45.972 64.6 45.972 cv
146.6 45.972 li
146.603 45.972 146.607 45.972 146.61 45.972 cv
147.349 45.972 147.998 46.1633 148.454 46.6185 cv
148.911 47.0759 149.102 47.7286 149.1 48.472 cv
149.1 87.2221 li
149.102 87.9655 148.911 88.618 148.454 89.0756 cv
147.998 89.5305 147.35 89.722 146.611 89.722 cv
64.6 88.722 mo
146.6 88.722 li
147.19 88.7202 147.537 88.578 147.746 88.3685 cv
147.956 88.1593 148.098 87.8119 148.1 87.2221 cv
148.1 48.472 li
148.098 47.8822 147.956 47.5347 147.746 47.3256 cv
147.537 47.1161 147.19 46.9738 146.6 46.972 cv
64.6 46.972 li
64.0101 46.9738 63.6627 47.1161 63.4535 47.3256 cv
63.2441 47.5347 63.1018 47.8822 63.1 48.472 cv
63.1 87.2221 li
63.1018 87.8119 63.2441 88.1593 63.4535 88.3685 cv
63.6627 88.578 64.0101 88.7202 64.6 88.722 cv
64.6 88.722 li
.159121 .120455 .125338 0 cmyk
f
2 lw
1 lj
66.6 53.972 mo
86.6 53.972 li
0 1 1 0 cmyk
@
73.6 56.972 mo
79.6 56.972 li
79.6 50.972 li
73.6 50.972 li
cp
f
1 lw
0 lc
0 lj
73.6 56.972 mo
79.6 56.972 li
79.6 50.972 li
73.6 50.972 li
cp
@
99.4 57.272 mo
98.47 57.272 li
97.92 55.202 li
96.2 55.202 li
95.65 57.272 li
94.72 57.272 li
96.67 50.522 li
97.45 50.522 li
99.4 57.272 li
97.73 54.462 mo
97.1 52.082 li
97.02 52.082 li
96.4 54.462 li
97.73 54.462 li
1 /0 /CSD get_res sepcs
1 sep
f
104.21 53.922 mo
104.21 54.542 104.16 55.072 104.07 55.502 cv
103.98 55.932 103.83 56.272 103.62 56.532 cv
103.94 57.122 li
103.31 57.772 li
102.96 57.122 li
102.85 57.202 102.72 57.262 102.56 57.302 cv
102.4 57.342 102.24 57.352 102.06 57.352 cv
101.38 57.352 100.85 57.092 100.46 56.552 cv
100.06 56.022 99.87 55.142 99.87 53.922 cv
99.87 52.702 100.06 51.822 100.46 51.302 cv
100.85 50.782 101.38 50.522 102.06 50.522 cv
102.74 50.522 103.26 50.782 103.64 51.302 cv
104.02 51.822 104.21 52.702 104.21 53.922 cv
103.27 53.922 mo
103.27 52.822 103.15 52.112 102.92 51.772 cv
102.68 51.432 102.4 51.262 102.06 51.262 cv
101.72 51.262 101.42 51.432 101.18 51.772 cv
100.93 52.112 100.81 52.822 100.81 53.922 cv
100.81 55.022 100.93 55.742 101.18 56.092 cv
101.42 56.442 101.72 56.612 102.06 56.612 cv
102.19 56.612 102.31 56.592 102.41 56.552 cv
102.51 56.512 102.59 56.472 102.65 56.422 cv
102.02 55.202 li
102.57 54.542 li
103.12 55.592 li
103.16 55.332 103.2 55.102 103.23 54.892 cv
103.25 54.692 103.27 54.362 103.27 53.922 cv
f
109.17 51.342 mo
105.97 51.342 li
105.97 53.522 li
108.39 53.522 li
108.39 54.272 li
105.97 54.272 li
105.97 57.272 li
105.07 57.272 li
105.07 50.592 li
109.17 50.592 li
109.17 51.342 li
f
114.29 57.272 mo
113.35 57.272 li
111.94 54.382 li
110.93 54.382 li
110.93 57.272 li
110.03 57.272 li
110.03 50.592 li
111.98 50.592 li
112.6 50.592 113.11 50.742 113.5 51.042 cv
113.89 51.342 114.09 51.832 114.09 52.512 cv
114.09 53.032 113.96 53.442 113.7 53.722 cv
113.44 54.012 113.14 54.192 112.8 54.272 cv
114.29 57.272 li
113.19 52.512 mo
113.19 52.152 113.08 51.862 112.86 51.652 cv
112.64 51.452 112.28 51.342 111.79 51.342 cv
110.93 51.342 li
110.93 53.642 li
112.02 53.642 li
112.33 53.642 112.6 53.562 112.84 53.392 cv
113.07 53.222 113.19 52.932 113.19 52.512 cv
f
119.17 55.092 mo
119.17 55.772 118.96 56.312 118.54 56.732 cv
118.12 57.152 117.63 57.352 117.06 57.352 cv
116.48 57.352 115.99 57.152 115.57 56.732 cv
115.15 56.312 114.95 55.772 114.95 55.092 cv
114.95 54.412 115.15 53.872 115.57 53.452 cv
115.99 53.032 116.48 52.822 117.06 52.822 cv
117.63 52.822 118.12 53.032 118.54 53.452 cv
118.96 53.872 119.17 54.412 119.17 55.092 cv
118.31 55.092 mo
118.31 54.572 118.18 54.182 117.92 53.922 cv
117.66 53.662 117.37 53.522 117.06 53.522 cv
116.74 53.522 116.46 53.662 116.2 53.922 cv
115.94 54.182 115.81 54.572 115.81 55.092 cv
115.81 55.612 115.94 56.002 116.2 56.262 cv
116.46 56.522 116.74 56.652 117.06 56.652 cv
117.37 56.652 117.66 56.522 117.92 56.262 cv
118.18 56.002 118.31 55.612 118.31 55.092 cv
f
123.98 57.272 mo
123.19 57.272 li
123.19 56.452 li
122.98 56.742 122.75 56.962 122.51 57.122 cv
122.26 57.282 121.94 57.352 121.55 57.352 cv
121.08 57.352 120.73 57.222 120.5 56.962 cv
120.26 56.702 120.15 56.382 120.15 55.992 cv
120.15 52.902 li
120.93 52.902 li
120.93 55.712 li
120.93 56.032 121 56.282 121.16 56.462 cv
121.32 56.642 121.53 56.732 121.79 56.732 cv
122.13 56.732 122.44 56.562 122.74 56.202 cv
123.04 55.852 123.19 55.412 123.19 54.892 cv
123.19 52.902 li
123.98 52.902 li
123.98 57.272 li
f
128.9 57.162 mo
128.76 57.222 128.61 57.262 128.44 57.302 cv
128.27 57.342 128.04 57.352 127.76 57.352 cv
127.29 57.352 126.91 57.222 126.63 56.962 cv
126.34 56.702 126.2 56.342 126.2 55.872 cv
126.2 53.522 li
124.87 53.522 li
124.87 52.902 li
126.2 52.902 li
126.2 51.382 li
126.98 51.382 li
126.98 52.902 li
128.58 52.902 li
128.58 53.522 li
126.98 53.522 li
126.98 55.912 li
126.98 56.122 127.03 56.302 127.14 56.442 cv
127.24 56.582 127.44 56.652 127.73 56.652 cv
128.01 56.652 128.24 56.632 128.42 56.572 cv
128.6 56.522 128.76 56.462 128.9 56.382 cv
128.9 57.162 li
f
132.41 51.652 mo
131.63 51.652 li
131.63 50.632 li
132.41 50.632 li
132.41 51.652 li
132.41 57.272 mo
131.63 57.272 li
131.63 52.902 li
132.41 52.902 li
132.41 57.272 li
f
138.98 57.272 mo
138.19 57.272 li
138.19 54.462 li
138.19 54.152 138.11 53.902 137.96 53.722 cv
137.8 53.542 137.59 53.452 137.33 53.452 cv
136.99 53.452 136.68 53.632 136.38 53.982 cv
136.08 54.332 135.93 54.762 135.93 55.282 cv
135.93 57.272 li
135.15 57.272 li
135.15 52.902 li
135.93 52.902 li
135.93 53.722 li
136.13 53.442 136.36 53.222 136.61 53.062 cv
136.85 52.902 137.17 52.822 137.57 52.822 cv
138.03 52.822 138.38 52.952 138.62 53.212 cv
138.86 53.472 138.98 53.802 138.98 54.192 cv
138.98 57.272 li
f
144.25 53.562 mo
144.07 53.522 143.89 53.492 143.72 53.472 cv
143.55 53.462 143.37 53.482 143.19 53.522 cv
143.27 53.602 143.33 53.702 143.39 53.822 cv
143.44 53.942 143.47 54.112 143.47 54.342 cv
143.47 54.792 143.32 55.162 143.02 55.442 cv
142.72 55.732 142.34 55.872 141.9 55.872 cv
141.8 55.872 141.66 55.852 141.49 55.812 cv
141.32 55.772 141.18 55.732 141.08 55.672 cv
140.93 55.832 li
140.89 56.022 li
140.89 56.162 140.98 56.262 141.16 56.322 cv
141.34 56.392 141.67 56.422 142.14 56.422 cv
142.89 56.422 143.4 56.532 143.68 56.732 cv
143.95 56.942 144.09 57.202 144.09 57.502 cv
144.09 57.912 143.88 58.212 143.48 58.412 cv
143.08 58.612 142.6 58.712 142.06 58.712 cv
141.36 58.712 140.84 58.612 140.5 58.432 cv
140.16 58.252 139.99 58.002 139.99 57.692 cv
139.99 57.542 140.05 57.402 140.18 57.242 cv
140.31 57.082 140.48 56.952 140.69 56.842 cv
140.53 56.772 140.41 56.682 140.32 56.562 cv
140.23 56.442 140.19 56.292 140.19 56.102 cv
140.19 55.952 140.24 55.822 140.36 55.702 cv
140.48 55.582 140.61 55.482 140.77 55.402 cv
140.64 55.272 140.54 55.112 140.46 54.932 cv
140.38 54.752 140.34 54.562 140.34 54.342 cv
140.34 53.902 140.49 53.542 140.79 53.252 cv
141.09 52.972 141.46 52.822 141.9 52.822 cv
142.14 52.822 142.34 52.862 142.51 52.922 cv
142.67 52.992 142.82 53.092 142.96 53.212 cv
143.16 53.062 143.37 52.952 143.58 52.882 cv
143.79 52.822 144.01 52.802 144.25 52.822 cv
144.25 53.562 li
142.69 54.342 mo
142.69 54.082 142.62 53.882 142.49 53.722 cv
142.36 53.572 142.16 53.492 141.9 53.492 cv
141.64 53.492 141.44 53.572 141.31 53.722 cv
141.18 53.882 141.12 54.082 141.12 54.342 cv
141.12 54.612 141.18 54.822 141.31 54.972 cv
141.44 55.132 141.64 55.202 141.9 55.202 cv
142.16 55.202 142.36 55.132 142.49 54.972 cv
142.62 54.822 142.69 54.612 142.69 54.342 cv
143.35 57.582 mo
143.35 57.482 143.29 57.382 143.17 57.282 cv
143.05 57.182 142.76 57.122 142.3 57.122 cv
142.19 57.122 142.04 57.122 141.86 57.102 cv
141.68 57.092 141.47 57.072 141.24 57.042 cv
141.03 57.122 140.89 57.222 140.81 57.322 cv
140.73 57.422 140.69 57.522 140.69 57.622 cv
140.69 57.772 140.79 57.902 141 58.002 cv
141.21 58.102 141.58 58.162 142.1 58.162 cv
142.54 58.162 142.85 58.102 143.05 57.982 cv
143.25 57.862 143.35 57.732 143.35 57.582 cv
f
2 lw
1 lj
[7.4 3.2 ] 0 dsh
66.6 67.222 mo
86.6 67.222 li
.926818 .245335 1 .155612 cmyk
@
76.6 70.222 mo
77.3956 70.222 78.1587 69.9059 78.7213 69.3433 cv
79.2839 68.7807 79.6 68.0176 79.6 67.222 cv
79.6 66.4264 79.2839 65.6633 78.7213 65.1007 cv
78.1587 64.5381 77.3956 64.222 76.6 64.222 cv
75.8044 64.222 75.0413 64.5381 74.4787 65.1007 cv
73.9161 65.6633 73.6 66.4264 73.6 67.222 cv
73.6 68.0176 73.9161 68.7807 74.4787 69.3433 cv
75.0413 69.9059 75.8044 70.222 76.6 70.222 cv
cp
f
1 lw
[] 0 dsh
76.6 70.222 mo
77.3956 70.222 78.1587 69.9059 78.7213 69.3433 cv
79.2839 68.7807 79.6 68.0176 79.6 67.222 cv
79.6 66.4264 79.2839 65.6633 78.7213 65.1007 cv
78.1587 64.5381 77.3956 64.222 76.6 64.222 cv
75.8044 64.222 75.0413 64.5381 74.4787 65.1007 cv
73.9161 65.6633 73.6 66.4264 73.6 67.222 cv
73.6 68.0176 73.9161 68.7807 74.4787 69.3433 cv
75.0413 69.9059 75.8044 70.222 76.6 70.222 cv
cp
@
99.17 67.202 mo
99.17 68.402 98.91 69.262 98.41 69.762 cv
97.9 70.272 97.22 70.522 96.36 70.522 cv
95.03 70.522 li
95.03 63.842 li
96.36 63.842 li
97.32 63.842 98.02 64.112 98.48 64.632 cv
98.94 65.152 99.17 66.012 99.17 67.202 cv
98.23 67.202 mo
98.23 66.242 98.07 65.572 97.76 65.182 cv
97.45 64.792 96.98 64.592 96.36 64.592 cv
95.93 64.592 li
95.93 69.782 li
96.36 69.782 li
96.98 69.782 97.45 69.602 97.76 69.222 cv
98.07 68.842 98.23 68.172 98.23 67.202 cv
1 /0 /CSD get_res sepcs
1 sep
f
104.17 64.592 mo
100.97 64.592 li
100.97 66.772 li
103.39 66.772 li
103.39 67.522 li
100.97 67.522 li
100.97 70.522 li
100.07 70.522 li
100.07 63.842 li
104.17 63.842 li
104.17 64.592 li
f
109.13 68.652 mo
109.13 69.252 108.94 69.732 108.56 70.082 cv
108.18 70.432 107.67 70.602 107.02 70.602 cv
106.37 70.602 105.86 70.422 105.5 70.062 cv
105.13 69.702 104.95 69.242 104.95 68.692 cv
104.95 68.422 li
105.85 68.422 li
105.85 68.652 li
105.85 69.052 105.96 69.352 106.2 69.552 cv
106.43 69.762 106.7 69.862 107.02 69.862 cv
107.44 69.862 107.74 69.752 107.94 69.532 cv
108.13 69.312 108.23 69.052 108.23 68.732 cv
108.23 68.472 108.11 68.232 107.88 68.012 cv
107.64 67.792 107.31 67.582 106.87 67.402 cv
106.24 67.172 105.79 66.912 105.52 66.622 cv
105.24 66.342 105.11 66.002 105.11 65.602 cv
105.11 65.062 105.29 64.622 105.67 64.282 cv
106.05 63.942 106.5 63.772 107.02 63.772 cv
107.7 63.772 108.19 63.982 108.49 64.382 cv
108.79 64.782 108.94 65.222 108.94 65.682 cv
108.04 65.682 li
108.06 65.402 107.98 65.142 107.8 64.902 cv
107.62 64.672 107.36 64.552 107.02 64.552 cv
106.7 64.552 106.46 64.642 106.28 64.812 cv
106.1 64.982 106.01 65.212 106.01 65.492 cv
106.01 65.732 106.08 65.932 106.22 66.092 cv
106.36 66.262 106.73 66.462 107.33 66.702 cv
107.9 66.942 108.34 67.222 108.66 67.542 cv
108.97 67.862 109.13 68.232 109.13 68.652 cv
f
2 lw
[12.8 3.2 2 3.2 ] 0 dsh
66.6 80.472 mo
86.6 80.472 li
.930816 .793027 0 0 cmyk
@
73.6 80.472 mo
79.6 80.472 li
76.6 83.472 mo
76.6 77.472 li
f
1 lw
[] 0 dsh
73.6 80.472 mo
79.6 80.472 li
76.6 83.472 mo
76.6 77.472 li
@
99.21 81.782 mo
99.21 82.542 99 83.072 98.58 83.352 cv
98.16 83.632 97.63 83.772 96.98 83.772 cv
95.03 83.772 li
95.03 77.092 li
97.06 77.092 li
97.71 77.092 98.2 77.262 98.52 77.602 cv
98.84 77.942 99.01 78.352 99.01 78.812 cv
99.01 79.292 98.9 79.632 98.68 79.852 cv
98.46 80.072 98.23 80.222 98 80.302 cv
98.31 80.382 98.59 80.552 98.84 80.792 cv
99.08 81.042 99.21 81.372 99.21 81.782 cv
98.12 78.812 mo
98.12 78.482 98.02 78.242 97.82 78.082 cv
97.62 77.922 97.38 77.842 97.1 77.842 cv
95.93 77.842 li
95.93 79.912 li
97.06 79.912 li
97.34 79.912 97.59 79.832 97.8 79.662 cv
98.01 79.492 98.12 79.212 98.12 78.812 cv
98.27 81.782 mo
98.27 81.372 98.13 81.082 97.86 80.912 cv
97.58 80.742 97.28 80.652 96.94 80.652 cv
95.93 80.652 li
95.93 83.032 li
96.83 83.032 li
97.29 83.032 97.65 82.942 97.9 82.762 cv
98.14 82.582 98.27 82.262 98.27 81.782 cv
1 /0 /CSD get_res sepcs
1 sep
f
104.17 77.842 mo
100.97 77.842 li
100.97 80.022 li
103.39 80.022 li
103.39 80.772 li
100.97 80.772 li
100.97 83.772 li
100.07 83.772 li
100.07 77.092 li
104.17 77.092 li
104.17 77.842 li
f
109.13 81.902 mo
109.13 82.502 108.94 82.982 108.56 83.332 cv
108.18 83.682 107.67 83.852 107.02 83.852 cv
106.37 83.852 105.86 83.672 105.5 83.312 cv
105.13 82.952 104.95 82.492 104.95 81.942 cv
104.95 81.672 li
105.85 81.672 li
105.85 81.902 li
105.85 82.302 105.96 82.602 106.2 82.802 cv
106.43 83.012 106.7 83.112 107.02 83.112 cv
107.44 83.112 107.74 83.002 107.94 82.782 cv
108.13 82.562 108.23 82.302 108.23 81.982 cv
108.23 81.722 108.11 81.482 107.88 81.262 cv
107.64 81.042 107.31 80.832 106.87 80.652 cv
106.24 80.422 105.79 80.162 105.52 79.872 cv
105.24 79.592 105.11 79.252 105.11 78.852 cv
105.11 78.312 105.29 77.872 105.67 77.532 cv
106.05 77.192 106.5 77.022 107.02 77.022 cv
107.7 77.022 108.19 77.232 108.49 77.632 cv
108.79 78.032 108.94 78.472 108.94 78.932 cv
108.04 78.932 li
108.06 78.652 107.98 78.392 107.8 78.152 cv
107.62 77.922 107.36 77.802 107.02 77.802 cv
106.7 77.802 106.46 77.892 106.28 78.062 cv
106.1 78.232 106.01 78.462 106.01 78.742 cv
106.01 78.982 106.08 79.182 106.22 79.342 cv
106.36 79.512 106.73 79.712 107.33 79.952 cv
107.9 80.192 108.34 80.472 108.66 80.792 cv
108.97 81.112 109.13 81.482 109.13 81.902 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
